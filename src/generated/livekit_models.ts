// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: livekit_models.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FileDescriptorProto as FileDescriptorProto1 } from "ts-proto-descriptors";
import {
  protoMetadata as protoMetadata1,
  Timestamp,
} from "./google/protobuf/timestamp";
import {
  MetricsBatch,
  protoMetadata as protoMetadata2,
} from "./livekit_metrics";
import { messageTypeRegistry } from "./typeRegistry";

export const protobufPackage = "livekit";

export const AudioCodec = {
  DEFAULT_AC: 0,
  OPUS: 1,
  AAC: 2,
  UNRECOGNIZED: -1,
} as const;

export type AudioCodec = (typeof AudioCodec)[keyof typeof AudioCodec];

export namespace AudioCodec {
  export type DEFAULT_AC = typeof AudioCodec.DEFAULT_AC;
  export type OPUS = typeof AudioCodec.OPUS;
  export type AAC = typeof AudioCodec.AAC;
  export type UNRECOGNIZED = typeof AudioCodec.UNRECOGNIZED;
}

export function audioCodecFromJSON(object: any): AudioCodec {
  switch (object) {
    case 0:
    case "DEFAULT_AC":
      return AudioCodec.DEFAULT_AC;
    case 1:
    case "OPUS":
      return AudioCodec.OPUS;
    case 2:
    case "AAC":
      return AudioCodec.AAC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AudioCodec.UNRECOGNIZED;
  }
}

export function audioCodecToJSON(object: AudioCodec): string {
  switch (object) {
    case AudioCodec.DEFAULT_AC:
      return "DEFAULT_AC";
    case AudioCodec.OPUS:
      return "OPUS";
    case AudioCodec.AAC:
      return "AAC";
    case AudioCodec.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export const VideoCodec = {
  DEFAULT_VC: 0,
  H264_BASELINE: 1,
  H264_MAIN: 2,
  H264_HIGH: 3,
  VP8: 4,
  UNRECOGNIZED: -1,
} as const;

export type VideoCodec = (typeof VideoCodec)[keyof typeof VideoCodec];

export namespace VideoCodec {
  export type DEFAULT_VC = typeof VideoCodec.DEFAULT_VC;
  export type H264_BASELINE = typeof VideoCodec.H264_BASELINE;
  export type H264_MAIN = typeof VideoCodec.H264_MAIN;
  export type H264_HIGH = typeof VideoCodec.H264_HIGH;
  export type VP8 = typeof VideoCodec.VP8;
  export type UNRECOGNIZED = typeof VideoCodec.UNRECOGNIZED;
}

export function videoCodecFromJSON(object: any): VideoCodec {
  switch (object) {
    case 0:
    case "DEFAULT_VC":
      return VideoCodec.DEFAULT_VC;
    case 1:
    case "H264_BASELINE":
      return VideoCodec.H264_BASELINE;
    case 2:
    case "H264_MAIN":
      return VideoCodec.H264_MAIN;
    case 3:
    case "H264_HIGH":
      return VideoCodec.H264_HIGH;
    case 4:
    case "VP8":
      return VideoCodec.VP8;
    case -1:
    case "UNRECOGNIZED":
    default:
      return VideoCodec.UNRECOGNIZED;
  }
}

export function videoCodecToJSON(object: VideoCodec): string {
  switch (object) {
    case VideoCodec.DEFAULT_VC:
      return "DEFAULT_VC";
    case VideoCodec.H264_BASELINE:
      return "H264_BASELINE";
    case VideoCodec.H264_MAIN:
      return "H264_MAIN";
    case VideoCodec.H264_HIGH:
      return "H264_HIGH";
    case VideoCodec.VP8:
      return "VP8";
    case VideoCodec.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export const ImageCodec = {
  IC_DEFAULT: 0,
  IC_JPEG: 1,
  UNRECOGNIZED: -1,
} as const;

export type ImageCodec = (typeof ImageCodec)[keyof typeof ImageCodec];

export namespace ImageCodec {
  export type IC_DEFAULT = typeof ImageCodec.IC_DEFAULT;
  export type IC_JPEG = typeof ImageCodec.IC_JPEG;
  export type UNRECOGNIZED = typeof ImageCodec.UNRECOGNIZED;
}

export function imageCodecFromJSON(object: any): ImageCodec {
  switch (object) {
    case 0:
    case "IC_DEFAULT":
      return ImageCodec.IC_DEFAULT;
    case 1:
    case "IC_JPEG":
      return ImageCodec.IC_JPEG;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ImageCodec.UNRECOGNIZED;
  }
}

export function imageCodecToJSON(object: ImageCodec): string {
  switch (object) {
    case ImageCodec.IC_DEFAULT:
      return "IC_DEFAULT";
    case ImageCodec.IC_JPEG:
      return "IC_JPEG";
    case ImageCodec.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Policy for publisher to handle subscribers that are unable to support the primary codec of a track */
export const BackupCodecPolicy = {
  /** REGRESSION - default behavior, regress to backup codec and all subscribers will receive the backup codec */
  REGRESSION: 0,
  /** SIMULCAST - encoding/send the primary and backup codec simultaneously */
  SIMULCAST: 1,
  UNRECOGNIZED: -1,
} as const;

export type BackupCodecPolicy =
  (typeof BackupCodecPolicy)[keyof typeof BackupCodecPolicy];

export namespace BackupCodecPolicy {
  export type REGRESSION = typeof BackupCodecPolicy.REGRESSION;
  export type SIMULCAST = typeof BackupCodecPolicy.SIMULCAST;
  export type UNRECOGNIZED = typeof BackupCodecPolicy.UNRECOGNIZED;
}

export function backupCodecPolicyFromJSON(object: any): BackupCodecPolicy {
  switch (object) {
    case 0:
    case "REGRESSION":
      return BackupCodecPolicy.REGRESSION;
    case 1:
    case "SIMULCAST":
      return BackupCodecPolicy.SIMULCAST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BackupCodecPolicy.UNRECOGNIZED;
  }
}

export function backupCodecPolicyToJSON(object: BackupCodecPolicy): string {
  switch (object) {
    case BackupCodecPolicy.REGRESSION:
      return "REGRESSION";
    case BackupCodecPolicy.SIMULCAST:
      return "SIMULCAST";
    case BackupCodecPolicy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export const TrackType = {
  AUDIO: 0,
  VIDEO: 1,
  DATA: 2,
  UNRECOGNIZED: -1,
} as const;

export type TrackType = (typeof TrackType)[keyof typeof TrackType];

export namespace TrackType {
  export type AUDIO = typeof TrackType.AUDIO;
  export type VIDEO = typeof TrackType.VIDEO;
  export type DATA = typeof TrackType.DATA;
  export type UNRECOGNIZED = typeof TrackType.UNRECOGNIZED;
}

export function trackTypeFromJSON(object: any): TrackType {
  switch (object) {
    case 0:
    case "AUDIO":
      return TrackType.AUDIO;
    case 1:
    case "VIDEO":
      return TrackType.VIDEO;
    case 2:
    case "DATA":
      return TrackType.DATA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TrackType.UNRECOGNIZED;
  }
}

export function trackTypeToJSON(object: TrackType): string {
  switch (object) {
    case TrackType.AUDIO:
      return "AUDIO";
    case TrackType.VIDEO:
      return "VIDEO";
    case TrackType.DATA:
      return "DATA";
    case TrackType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export const TrackSource = {
  UNKNOWN: 0,
  CAMERA: 1,
  MICROPHONE: 2,
  SCREEN_SHARE: 3,
  SCREEN_SHARE_AUDIO: 4,
  UNRECOGNIZED: -1,
} as const;

export type TrackSource = (typeof TrackSource)[keyof typeof TrackSource];

export namespace TrackSource {
  export type UNKNOWN = typeof TrackSource.UNKNOWN;
  export type CAMERA = typeof TrackSource.CAMERA;
  export type MICROPHONE = typeof TrackSource.MICROPHONE;
  export type SCREEN_SHARE = typeof TrackSource.SCREEN_SHARE;
  export type SCREEN_SHARE_AUDIO = typeof TrackSource.SCREEN_SHARE_AUDIO;
  export type UNRECOGNIZED = typeof TrackSource.UNRECOGNIZED;
}

export function trackSourceFromJSON(object: any): TrackSource {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return TrackSource.UNKNOWN;
    case 1:
    case "CAMERA":
      return TrackSource.CAMERA;
    case 2:
    case "MICROPHONE":
      return TrackSource.MICROPHONE;
    case 3:
    case "SCREEN_SHARE":
      return TrackSource.SCREEN_SHARE;
    case 4:
    case "SCREEN_SHARE_AUDIO":
      return TrackSource.SCREEN_SHARE_AUDIO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TrackSource.UNRECOGNIZED;
  }
}

export function trackSourceToJSON(object: TrackSource): string {
  switch (object) {
    case TrackSource.UNKNOWN:
      return "UNKNOWN";
    case TrackSource.CAMERA:
      return "CAMERA";
    case TrackSource.MICROPHONE:
      return "MICROPHONE";
    case TrackSource.SCREEN_SHARE:
      return "SCREEN_SHARE";
    case TrackSource.SCREEN_SHARE_AUDIO:
      return "SCREEN_SHARE_AUDIO";
    case TrackSource.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export const VideoQuality = {
  LOW: 0,
  MEDIUM: 1,
  HIGH: 2,
  OFF: 3,
  UNRECOGNIZED: -1,
} as const;

export type VideoQuality = (typeof VideoQuality)[keyof typeof VideoQuality];

export namespace VideoQuality {
  export type LOW = typeof VideoQuality.LOW;
  export type MEDIUM = typeof VideoQuality.MEDIUM;
  export type HIGH = typeof VideoQuality.HIGH;
  export type OFF = typeof VideoQuality.OFF;
  export type UNRECOGNIZED = typeof VideoQuality.UNRECOGNIZED;
}

export function videoQualityFromJSON(object: any): VideoQuality {
  switch (object) {
    case 0:
    case "LOW":
      return VideoQuality.LOW;
    case 1:
    case "MEDIUM":
      return VideoQuality.MEDIUM;
    case 2:
    case "HIGH":
      return VideoQuality.HIGH;
    case 3:
    case "OFF":
      return VideoQuality.OFF;
    case -1:
    case "UNRECOGNIZED":
    default:
      return VideoQuality.UNRECOGNIZED;
  }
}

export function videoQualityToJSON(object: VideoQuality): string {
  switch (object) {
    case VideoQuality.LOW:
      return "LOW";
    case VideoQuality.MEDIUM:
      return "MEDIUM";
    case VideoQuality.HIGH:
      return "HIGH";
    case VideoQuality.OFF:
      return "OFF";
    case VideoQuality.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export const ConnectionQuality = {
  POOR: 0,
  GOOD: 1,
  EXCELLENT: 2,
  LOST: 3,
  UNRECOGNIZED: -1,
} as const;

export type ConnectionQuality =
  (typeof ConnectionQuality)[keyof typeof ConnectionQuality];

export namespace ConnectionQuality {
  export type POOR = typeof ConnectionQuality.POOR;
  export type GOOD = typeof ConnectionQuality.GOOD;
  export type EXCELLENT = typeof ConnectionQuality.EXCELLENT;
  export type LOST = typeof ConnectionQuality.LOST;
  export type UNRECOGNIZED = typeof ConnectionQuality.UNRECOGNIZED;
}

export function connectionQualityFromJSON(object: any): ConnectionQuality {
  switch (object) {
    case 0:
    case "POOR":
      return ConnectionQuality.POOR;
    case 1:
    case "GOOD":
      return ConnectionQuality.GOOD;
    case 2:
    case "EXCELLENT":
      return ConnectionQuality.EXCELLENT;
    case 3:
    case "LOST":
      return ConnectionQuality.LOST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConnectionQuality.UNRECOGNIZED;
  }
}

export function connectionQualityToJSON(object: ConnectionQuality): string {
  switch (object) {
    case ConnectionQuality.POOR:
      return "POOR";
    case ConnectionQuality.GOOD:
      return "GOOD";
    case ConnectionQuality.EXCELLENT:
      return "EXCELLENT";
    case ConnectionQuality.LOST:
      return "LOST";
    case ConnectionQuality.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export const ClientConfigSetting = {
  UNSET: 0,
  DISABLED: 1,
  ENABLED: 2,
  UNRECOGNIZED: -1,
} as const;

export type ClientConfigSetting =
  (typeof ClientConfigSetting)[keyof typeof ClientConfigSetting];

export namespace ClientConfigSetting {
  export type UNSET = typeof ClientConfigSetting.UNSET;
  export type DISABLED = typeof ClientConfigSetting.DISABLED;
  export type ENABLED = typeof ClientConfigSetting.ENABLED;
  export type UNRECOGNIZED = typeof ClientConfigSetting.UNRECOGNIZED;
}

export function clientConfigSettingFromJSON(object: any): ClientConfigSetting {
  switch (object) {
    case 0:
    case "UNSET":
      return ClientConfigSetting.UNSET;
    case 1:
    case "DISABLED":
      return ClientConfigSetting.DISABLED;
    case 2:
    case "ENABLED":
      return ClientConfigSetting.ENABLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClientConfigSetting.UNRECOGNIZED;
  }
}

export function clientConfigSettingToJSON(object: ClientConfigSetting): string {
  switch (object) {
    case ClientConfigSetting.UNSET:
      return "UNSET";
    case ClientConfigSetting.DISABLED:
      return "DISABLED";
    case ClientConfigSetting.ENABLED:
      return "ENABLED";
    case ClientConfigSetting.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export const DisconnectReason = {
  UNKNOWN_REASON: 0,
  /** CLIENT_INITIATED - the client initiated the disconnect */
  CLIENT_INITIATED: 1,
  /** DUPLICATE_IDENTITY - another participant with the same identity has joined the room */
  DUPLICATE_IDENTITY: 2,
  /** SERVER_SHUTDOWN - the server instance is shutting down */
  SERVER_SHUTDOWN: 3,
  /** PARTICIPANT_REMOVED - RoomService.RemoveParticipant was called */
  PARTICIPANT_REMOVED: 4,
  /** ROOM_DELETED - RoomService.DeleteRoom was called */
  ROOM_DELETED: 5,
  /** STATE_MISMATCH - the client is attempting to resume a session, but server is not aware of it */
  STATE_MISMATCH: 6,
  /** JOIN_FAILURE - client was unable to connect fully */
  JOIN_FAILURE: 7,
  /** MIGRATION - Cloud-only, the server requested Participant to migrate the connection elsewhere */
  MIGRATION: 8,
  /** SIGNAL_CLOSE - the signal websocket was closed unexpectedly */
  SIGNAL_CLOSE: 9,
  /** ROOM_CLOSED - the room was closed, due to all Standard and Ingress participants having left */
  ROOM_CLOSED: 10,
  /** USER_UNAVAILABLE - SIP callee did not respond in time */
  USER_UNAVAILABLE: 11,
  /** USER_REJECTED - SIP callee rejected the call (busy) */
  USER_REJECTED: 12,
  /** SIP_TRUNK_FAILURE - SIP protocol failure or unexpected response */
  SIP_TRUNK_FAILURE: 13,
  UNRECOGNIZED: -1,
} as const;

export type DisconnectReason =
  (typeof DisconnectReason)[keyof typeof DisconnectReason];

export namespace DisconnectReason {
  export type UNKNOWN_REASON = typeof DisconnectReason.UNKNOWN_REASON;
  export type CLIENT_INITIATED = typeof DisconnectReason.CLIENT_INITIATED;
  export type DUPLICATE_IDENTITY = typeof DisconnectReason.DUPLICATE_IDENTITY;
  export type SERVER_SHUTDOWN = typeof DisconnectReason.SERVER_SHUTDOWN;
  export type PARTICIPANT_REMOVED = typeof DisconnectReason.PARTICIPANT_REMOVED;
  export type ROOM_DELETED = typeof DisconnectReason.ROOM_DELETED;
  export type STATE_MISMATCH = typeof DisconnectReason.STATE_MISMATCH;
  export type JOIN_FAILURE = typeof DisconnectReason.JOIN_FAILURE;
  export type MIGRATION = typeof DisconnectReason.MIGRATION;
  export type SIGNAL_CLOSE = typeof DisconnectReason.SIGNAL_CLOSE;
  export type ROOM_CLOSED = typeof DisconnectReason.ROOM_CLOSED;
  export type USER_UNAVAILABLE = typeof DisconnectReason.USER_UNAVAILABLE;
  export type USER_REJECTED = typeof DisconnectReason.USER_REJECTED;
  export type SIP_TRUNK_FAILURE = typeof DisconnectReason.SIP_TRUNK_FAILURE;
  export type UNRECOGNIZED = typeof DisconnectReason.UNRECOGNIZED;
}

export function disconnectReasonFromJSON(object: any): DisconnectReason {
  switch (object) {
    case 0:
    case "UNKNOWN_REASON":
      return DisconnectReason.UNKNOWN_REASON;
    case 1:
    case "CLIENT_INITIATED":
      return DisconnectReason.CLIENT_INITIATED;
    case 2:
    case "DUPLICATE_IDENTITY":
      return DisconnectReason.DUPLICATE_IDENTITY;
    case 3:
    case "SERVER_SHUTDOWN":
      return DisconnectReason.SERVER_SHUTDOWN;
    case 4:
    case "PARTICIPANT_REMOVED":
      return DisconnectReason.PARTICIPANT_REMOVED;
    case 5:
    case "ROOM_DELETED":
      return DisconnectReason.ROOM_DELETED;
    case 6:
    case "STATE_MISMATCH":
      return DisconnectReason.STATE_MISMATCH;
    case 7:
    case "JOIN_FAILURE":
      return DisconnectReason.JOIN_FAILURE;
    case 8:
    case "MIGRATION":
      return DisconnectReason.MIGRATION;
    case 9:
    case "SIGNAL_CLOSE":
      return DisconnectReason.SIGNAL_CLOSE;
    case 10:
    case "ROOM_CLOSED":
      return DisconnectReason.ROOM_CLOSED;
    case 11:
    case "USER_UNAVAILABLE":
      return DisconnectReason.USER_UNAVAILABLE;
    case 12:
    case "USER_REJECTED":
      return DisconnectReason.USER_REJECTED;
    case 13:
    case "SIP_TRUNK_FAILURE":
      return DisconnectReason.SIP_TRUNK_FAILURE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DisconnectReason.UNRECOGNIZED;
  }
}

export function disconnectReasonToJSON(object: DisconnectReason): string {
  switch (object) {
    case DisconnectReason.UNKNOWN_REASON:
      return "UNKNOWN_REASON";
    case DisconnectReason.CLIENT_INITIATED:
      return "CLIENT_INITIATED";
    case DisconnectReason.DUPLICATE_IDENTITY:
      return "DUPLICATE_IDENTITY";
    case DisconnectReason.SERVER_SHUTDOWN:
      return "SERVER_SHUTDOWN";
    case DisconnectReason.PARTICIPANT_REMOVED:
      return "PARTICIPANT_REMOVED";
    case DisconnectReason.ROOM_DELETED:
      return "ROOM_DELETED";
    case DisconnectReason.STATE_MISMATCH:
      return "STATE_MISMATCH";
    case DisconnectReason.JOIN_FAILURE:
      return "JOIN_FAILURE";
    case DisconnectReason.MIGRATION:
      return "MIGRATION";
    case DisconnectReason.SIGNAL_CLOSE:
      return "SIGNAL_CLOSE";
    case DisconnectReason.ROOM_CLOSED:
      return "ROOM_CLOSED";
    case DisconnectReason.USER_UNAVAILABLE:
      return "USER_UNAVAILABLE";
    case DisconnectReason.USER_REJECTED:
      return "USER_REJECTED";
    case DisconnectReason.SIP_TRUNK_FAILURE:
      return "SIP_TRUNK_FAILURE";
    case DisconnectReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export const ReconnectReason = {
  RR_UNKNOWN: 0,
  RR_SIGNAL_DISCONNECTED: 1,
  RR_PUBLISHER_FAILED: 2,
  RR_SUBSCRIBER_FAILED: 3,
  RR_SWITCH_CANDIDATE: 4,
  UNRECOGNIZED: -1,
} as const;

export type ReconnectReason =
  (typeof ReconnectReason)[keyof typeof ReconnectReason];

export namespace ReconnectReason {
  export type RR_UNKNOWN = typeof ReconnectReason.RR_UNKNOWN;
  export type RR_SIGNAL_DISCONNECTED =
    typeof ReconnectReason.RR_SIGNAL_DISCONNECTED;
  export type RR_PUBLISHER_FAILED = typeof ReconnectReason.RR_PUBLISHER_FAILED;
  export type RR_SUBSCRIBER_FAILED =
    typeof ReconnectReason.RR_SUBSCRIBER_FAILED;
  export type RR_SWITCH_CANDIDATE = typeof ReconnectReason.RR_SWITCH_CANDIDATE;
  export type UNRECOGNIZED = typeof ReconnectReason.UNRECOGNIZED;
}

export function reconnectReasonFromJSON(object: any): ReconnectReason {
  switch (object) {
    case 0:
    case "RR_UNKNOWN":
      return ReconnectReason.RR_UNKNOWN;
    case 1:
    case "RR_SIGNAL_DISCONNECTED":
      return ReconnectReason.RR_SIGNAL_DISCONNECTED;
    case 2:
    case "RR_PUBLISHER_FAILED":
      return ReconnectReason.RR_PUBLISHER_FAILED;
    case 3:
    case "RR_SUBSCRIBER_FAILED":
      return ReconnectReason.RR_SUBSCRIBER_FAILED;
    case 4:
    case "RR_SWITCH_CANDIDATE":
      return ReconnectReason.RR_SWITCH_CANDIDATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ReconnectReason.UNRECOGNIZED;
  }
}

export function reconnectReasonToJSON(object: ReconnectReason): string {
  switch (object) {
    case ReconnectReason.RR_UNKNOWN:
      return "RR_UNKNOWN";
    case ReconnectReason.RR_SIGNAL_DISCONNECTED:
      return "RR_SIGNAL_DISCONNECTED";
    case ReconnectReason.RR_PUBLISHER_FAILED:
      return "RR_PUBLISHER_FAILED";
    case ReconnectReason.RR_SUBSCRIBER_FAILED:
      return "RR_SUBSCRIBER_FAILED";
    case ReconnectReason.RR_SWITCH_CANDIDATE:
      return "RR_SWITCH_CANDIDATE";
    case ReconnectReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export const SubscriptionError = {
  SE_UNKNOWN: 0,
  SE_CODEC_UNSUPPORTED: 1,
  SE_TRACK_NOTFOUND: 2,
  UNRECOGNIZED: -1,
} as const;

export type SubscriptionError =
  (typeof SubscriptionError)[keyof typeof SubscriptionError];

export namespace SubscriptionError {
  export type SE_UNKNOWN = typeof SubscriptionError.SE_UNKNOWN;
  export type SE_CODEC_UNSUPPORTED =
    typeof SubscriptionError.SE_CODEC_UNSUPPORTED;
  export type SE_TRACK_NOTFOUND = typeof SubscriptionError.SE_TRACK_NOTFOUND;
  export type UNRECOGNIZED = typeof SubscriptionError.UNRECOGNIZED;
}

export function subscriptionErrorFromJSON(object: any): SubscriptionError {
  switch (object) {
    case 0:
    case "SE_UNKNOWN":
      return SubscriptionError.SE_UNKNOWN;
    case 1:
    case "SE_CODEC_UNSUPPORTED":
      return SubscriptionError.SE_CODEC_UNSUPPORTED;
    case 2:
    case "SE_TRACK_NOTFOUND":
      return SubscriptionError.SE_TRACK_NOTFOUND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SubscriptionError.UNRECOGNIZED;
  }
}

export function subscriptionErrorToJSON(object: SubscriptionError): string {
  switch (object) {
    case SubscriptionError.SE_UNKNOWN:
      return "SE_UNKNOWN";
    case SubscriptionError.SE_CODEC_UNSUPPORTED:
      return "SE_CODEC_UNSUPPORTED";
    case SubscriptionError.SE_TRACK_NOTFOUND:
      return "SE_TRACK_NOTFOUND";
    case SubscriptionError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export const AudioTrackFeature = {
  TF_STEREO: 0,
  TF_NO_DTX: 1,
  TF_AUTO_GAIN_CONTROL: 2,
  TF_ECHO_CANCELLATION: 3,
  TF_NOISE_SUPPRESSION: 4,
  TF_ENHANCED_NOISE_CANCELLATION: 5,
  UNRECOGNIZED: -1,
} as const;

export type AudioTrackFeature =
  (typeof AudioTrackFeature)[keyof typeof AudioTrackFeature];

export namespace AudioTrackFeature {
  export type TF_STEREO = typeof AudioTrackFeature.TF_STEREO;
  export type TF_NO_DTX = typeof AudioTrackFeature.TF_NO_DTX;
  export type TF_AUTO_GAIN_CONTROL =
    typeof AudioTrackFeature.TF_AUTO_GAIN_CONTROL;
  export type TF_ECHO_CANCELLATION =
    typeof AudioTrackFeature.TF_ECHO_CANCELLATION;
  export type TF_NOISE_SUPPRESSION =
    typeof AudioTrackFeature.TF_NOISE_SUPPRESSION;
  export type TF_ENHANCED_NOISE_CANCELLATION =
    typeof AudioTrackFeature.TF_ENHANCED_NOISE_CANCELLATION;
  export type UNRECOGNIZED = typeof AudioTrackFeature.UNRECOGNIZED;
}

export function audioTrackFeatureFromJSON(object: any): AudioTrackFeature {
  switch (object) {
    case 0:
    case "TF_STEREO":
      return AudioTrackFeature.TF_STEREO;
    case 1:
    case "TF_NO_DTX":
      return AudioTrackFeature.TF_NO_DTX;
    case 2:
    case "TF_AUTO_GAIN_CONTROL":
      return AudioTrackFeature.TF_AUTO_GAIN_CONTROL;
    case 3:
    case "TF_ECHO_CANCELLATION":
      return AudioTrackFeature.TF_ECHO_CANCELLATION;
    case 4:
    case "TF_NOISE_SUPPRESSION":
      return AudioTrackFeature.TF_NOISE_SUPPRESSION;
    case 5:
    case "TF_ENHANCED_NOISE_CANCELLATION":
      return AudioTrackFeature.TF_ENHANCED_NOISE_CANCELLATION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AudioTrackFeature.UNRECOGNIZED;
  }
}

export function audioTrackFeatureToJSON(object: AudioTrackFeature): string {
  switch (object) {
    case AudioTrackFeature.TF_STEREO:
      return "TF_STEREO";
    case AudioTrackFeature.TF_NO_DTX:
      return "TF_NO_DTX";
    case AudioTrackFeature.TF_AUTO_GAIN_CONTROL:
      return "TF_AUTO_GAIN_CONTROL";
    case AudioTrackFeature.TF_ECHO_CANCELLATION:
      return "TF_ECHO_CANCELLATION";
    case AudioTrackFeature.TF_NOISE_SUPPRESSION:
      return "TF_NOISE_SUPPRESSION";
    case AudioTrackFeature.TF_ENHANCED_NOISE_CANCELLATION:
      return "TF_ENHANCED_NOISE_CANCELLATION";
    case AudioTrackFeature.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Pagination {
  $type: "livekit.Pagination";
  /** list entities which IDs are greater */
  afterId: string;
  limit: number;
}

export interface Room {
  $type: "livekit.Room";
  sid: string;
  name: string;
  emptyTimeout: number;
  departureTimeout: number;
  maxParticipants: number;
  creationTime: bigint;
  creationTimeMs: bigint;
  turnPassword: string;
  enabledCodecs: Codec[];
  metadata: string;
  numParticipants: number;
  numPublishers: number;
  activeRecording: boolean;
  version: TimedVersion | undefined;
}

export interface Codec {
  $type: "livekit.Codec";
  mime: string;
  fmtpLine: string;
}

export interface PlayoutDelay {
  $type: "livekit.PlayoutDelay";
  enabled: boolean;
  min: number;
  max: number;
}

export interface ParticipantPermission {
  $type: "livekit.ParticipantPermission";
  /** allow participant to subscribe to other tracks in the room */
  canSubscribe: boolean;
  /** allow participant to publish new tracks to room */
  canPublish: boolean;
  /** allow participant to publish data */
  canPublishData: boolean;
  /** sources that are allowed to be published */
  canPublishSources: TrackSource[];
  /** indicates that it's hidden to others */
  hidden: boolean;
  /**
   * indicates it's a recorder instance
   * deprecated: use ParticipantInfo.kind instead
   *
   * @deprecated
   */
  recorder: boolean;
  /** indicates that participant can update own metadata and attributes */
  canUpdateMetadata: boolean;
  /**
   * indicates that participant is an agent
   * deprecated: use ParticipantInfo.kind instead
   *
   * @deprecated
   */
  agent: boolean;
  /** if a participant can subscribe to metrics */
  canSubscribeMetrics: boolean;
}

export interface ParticipantInfo {
  $type: "livekit.ParticipantInfo";
  sid: string;
  identity: string;
  state: ParticipantInfo_State;
  tracks: TrackInfo[];
  metadata: string;
  /** timestamp when participant joined room, in seconds */
  joinedAt: bigint;
  /** timestamp when participant joined room, in milliseconds */
  joinedAtMs: bigint;
  name: string;
  version: number;
  permission: ParticipantPermission | undefined;
  region: string;
  /**
   * indicates the participant has an active publisher connection
   * and can publish to the server
   */
  isPublisher: boolean;
  kind: ParticipantInfo_Kind;
  attributes: { [key: string]: string };
  disconnectReason: DisconnectReason;
}

export const ParticipantInfo_State = {
  /** JOINING - websocket' connected, but not offered yet */
  JOINING: 0,
  /** JOINED - server received client offer */
  JOINED: 1,
  /** ACTIVE - ICE connectivity established */
  ACTIVE: 2,
  /** DISCONNECTED - WS disconnected */
  DISCONNECTED: 3,
  UNRECOGNIZED: -1,
} as const;

export type ParticipantInfo_State =
  (typeof ParticipantInfo_State)[keyof typeof ParticipantInfo_State];

export namespace ParticipantInfo_State {
  export type JOINING = typeof ParticipantInfo_State.JOINING;
  export type JOINED = typeof ParticipantInfo_State.JOINED;
  export type ACTIVE = typeof ParticipantInfo_State.ACTIVE;
  export type DISCONNECTED = typeof ParticipantInfo_State.DISCONNECTED;
  export type UNRECOGNIZED = typeof ParticipantInfo_State.UNRECOGNIZED;
}

export function participantInfo_StateFromJSON(
  object: any,
): ParticipantInfo_State {
  switch (object) {
    case 0:
    case "JOINING":
      return ParticipantInfo_State.JOINING;
    case 1:
    case "JOINED":
      return ParticipantInfo_State.JOINED;
    case 2:
    case "ACTIVE":
      return ParticipantInfo_State.ACTIVE;
    case 3:
    case "DISCONNECTED":
      return ParticipantInfo_State.DISCONNECTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ParticipantInfo_State.UNRECOGNIZED;
  }
}

export function participantInfo_StateToJSON(
  object: ParticipantInfo_State,
): string {
  switch (object) {
    case ParticipantInfo_State.JOINING:
      return "JOINING";
    case ParticipantInfo_State.JOINED:
      return "JOINED";
    case ParticipantInfo_State.ACTIVE:
      return "ACTIVE";
    case ParticipantInfo_State.DISCONNECTED:
      return "DISCONNECTED";
    case ParticipantInfo_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export const ParticipantInfo_Kind = {
  /** STANDARD - standard participants, e.g. web clients */
  STANDARD: 0,
  /** INGRESS - only ingests streams */
  INGRESS: 1,
  /** EGRESS - only consumes streams */
  EGRESS: 2,
  /** SIP - SIP participants */
  SIP: 3,
  /** AGENT - LiveKit agents */
  AGENT: 4,
  UNRECOGNIZED: -1,
} as const;

export type ParticipantInfo_Kind =
  (typeof ParticipantInfo_Kind)[keyof typeof ParticipantInfo_Kind];

export namespace ParticipantInfo_Kind {
  export type STANDARD = typeof ParticipantInfo_Kind.STANDARD;
  export type INGRESS = typeof ParticipantInfo_Kind.INGRESS;
  export type EGRESS = typeof ParticipantInfo_Kind.EGRESS;
  export type SIP = typeof ParticipantInfo_Kind.SIP;
  export type AGENT = typeof ParticipantInfo_Kind.AGENT;
  export type UNRECOGNIZED = typeof ParticipantInfo_Kind.UNRECOGNIZED;
}

export function participantInfo_KindFromJSON(
  object: any,
): ParticipantInfo_Kind {
  switch (object) {
    case 0:
    case "STANDARD":
      return ParticipantInfo_Kind.STANDARD;
    case 1:
    case "INGRESS":
      return ParticipantInfo_Kind.INGRESS;
    case 2:
    case "EGRESS":
      return ParticipantInfo_Kind.EGRESS;
    case 3:
    case "SIP":
      return ParticipantInfo_Kind.SIP;
    case 4:
    case "AGENT":
      return ParticipantInfo_Kind.AGENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ParticipantInfo_Kind.UNRECOGNIZED;
  }
}

export function participantInfo_KindToJSON(
  object: ParticipantInfo_Kind,
): string {
  switch (object) {
    case ParticipantInfo_Kind.STANDARD:
      return "STANDARD";
    case ParticipantInfo_Kind.INGRESS:
      return "INGRESS";
    case ParticipantInfo_Kind.EGRESS:
      return "EGRESS";
    case ParticipantInfo_Kind.SIP:
      return "SIP";
    case ParticipantInfo_Kind.AGENT:
      return "AGENT";
    case ParticipantInfo_Kind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ParticipantInfo_AttributesEntry {
  $type: "livekit.ParticipantInfo.AttributesEntry";
  key: string;
  value: string;
}

export interface Encryption {
  $type: "livekit.Encryption";
}

export const Encryption_Type = {
  NONE: 0,
  GCM: 1,
  CUSTOM: 2,
  UNRECOGNIZED: -1,
} as const;

export type Encryption_Type =
  (typeof Encryption_Type)[keyof typeof Encryption_Type];

export namespace Encryption_Type {
  export type NONE = typeof Encryption_Type.NONE;
  export type GCM = typeof Encryption_Type.GCM;
  export type CUSTOM = typeof Encryption_Type.CUSTOM;
  export type UNRECOGNIZED = typeof Encryption_Type.UNRECOGNIZED;
}

export function encryption_TypeFromJSON(object: any): Encryption_Type {
  switch (object) {
    case 0:
    case "NONE":
      return Encryption_Type.NONE;
    case 1:
    case "GCM":
      return Encryption_Type.GCM;
    case 2:
    case "CUSTOM":
      return Encryption_Type.CUSTOM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Encryption_Type.UNRECOGNIZED;
  }
}

export function encryption_TypeToJSON(object: Encryption_Type): string {
  switch (object) {
    case Encryption_Type.NONE:
      return "NONE";
    case Encryption_Type.GCM:
      return "GCM";
    case Encryption_Type.CUSTOM:
      return "CUSTOM";
    case Encryption_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SimulcastCodecInfo {
  $type: "livekit.SimulcastCodecInfo";
  mimeType: string;
  mid: string;
  cid: string;
  layers: VideoLayer[];
}

export interface TrackInfo {
  $type: "livekit.TrackInfo";
  sid: string;
  type: TrackType;
  name: string;
  muted: boolean;
  /**
   * original width of video (unset for audio)
   * clients may receive a lower resolution version with simulcast
   */
  width: number;
  /** original height of video (unset for audio) */
  height: number;
  /** true if track is simulcasted */
  simulcast: boolean;
  /** true if DTX (Discontinuous Transmission) is disabled for audio */
  disableDtx: boolean;
  /** source of media */
  source: TrackSource;
  layers: VideoLayer[];
  /** mime type of codec */
  mimeType: string;
  mid: string;
  codecs: SimulcastCodecInfo[];
  stereo: boolean;
  /** true if RED (Redundant Encoding) is disabled for audio */
  disableRed: boolean;
  encryption: Encryption_Type;
  stream: string;
  version: TimedVersion | undefined;
  audioFeatures: AudioTrackFeature[];
  backupCodecPolicy: BackupCodecPolicy;
}

/** provide information about available spatial layers */
export interface VideoLayer {
  $type: "livekit.VideoLayer";
  /** for tracks with a single layer, this should be HIGH */
  quality: VideoQuality;
  width: number;
  height: number;
  /** target bitrate in bit per second (bps), server will measure actual */
  bitrate: number;
  ssrc: number;
}

/** new DataPacket API */
export interface DataPacket {
  $type: "livekit.DataPacket";
  /** @deprecated */
  kind: DataPacket_Kind;
  /** participant identity of user that sent the message */
  participantIdentity: string;
  /** identities of participants who will receive the message (sent to all by default) */
  destinationIdentities: string[];
  user?: UserPacket | undefined;
  /** @deprecated */
  speaker?: ActiveSpeakerUpdate | undefined;
  sipDtmf?: SipDTMF | undefined;
  transcription?: Transcription | undefined;
  metrics?: MetricsBatch | undefined;
  chatMessage?: ChatMessage | undefined;
  rpcRequest?: RpcRequest | undefined;
  rpcAck?: RpcAck | undefined;
  rpcResponse?: RpcResponse | undefined;
  streamHeader?: DataStream_Header | undefined;
  streamChunk?: DataStream_Chunk | undefined;
  streamTrailer?: DataStream_Trailer | undefined;
}

export const DataPacket_Kind = {
  RELIABLE: 0,
  LOSSY: 1,
  UNRECOGNIZED: -1,
} as const;

export type DataPacket_Kind =
  (typeof DataPacket_Kind)[keyof typeof DataPacket_Kind];

export namespace DataPacket_Kind {
  export type RELIABLE = typeof DataPacket_Kind.RELIABLE;
  export type LOSSY = typeof DataPacket_Kind.LOSSY;
  export type UNRECOGNIZED = typeof DataPacket_Kind.UNRECOGNIZED;
}

export function dataPacket_KindFromJSON(object: any): DataPacket_Kind {
  switch (object) {
    case 0:
    case "RELIABLE":
      return DataPacket_Kind.RELIABLE;
    case 1:
    case "LOSSY":
      return DataPacket_Kind.LOSSY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DataPacket_Kind.UNRECOGNIZED;
  }
}

export function dataPacket_KindToJSON(object: DataPacket_Kind): string {
  switch (object) {
    case DataPacket_Kind.RELIABLE:
      return "RELIABLE";
    case DataPacket_Kind.LOSSY:
      return "LOSSY";
    case DataPacket_Kind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ActiveSpeakerUpdate {
  $type: "livekit.ActiveSpeakerUpdate";
  speakers: SpeakerInfo[];
}

export interface SpeakerInfo {
  $type: "livekit.SpeakerInfo";
  sid: string;
  /** audio level, 0-1.0, 1 is loudest */
  level: number;
  /** true if speaker is currently active */
  active: boolean;
}

export interface UserPacket {
  $type: "livekit.UserPacket";
  /**
   * participant ID of user that sent the message
   *
   * @deprecated
   */
  participantSid: string;
  /** @deprecated */
  participantIdentity: string;
  /** user defined payload */
  payload: Buffer;
  /**
   * the ID of the participants who will receive the message (sent to all by default)
   *
   * @deprecated
   */
  destinationSids: string[];
  /**
   * identities of participants who will receive the message (sent to all by default)
   *
   * @deprecated
   */
  destinationIdentities: string[];
  /** topic under which the message was published */
  topic?: string | undefined;
  /** Unique ID to indentify the message */
  id?: string | undefined;
  /** start and end time allow relating the message to specific media time */
  startTime?: bigint | undefined;
  endTime?: bigint | undefined;
  /** added by SDK to enable de-duping of messages, for INTERNAL USE ONLY */
  nonce: Buffer;
}

export interface SipDTMF {
  $type: "livekit.SipDTMF";
  code: number;
  digit: string;
}

export interface Transcription {
  $type: "livekit.Transcription";
  /** Participant that got its speech transcribed */
  transcribedParticipantIdentity: string;
  trackId: string;
  segments: TranscriptionSegment[];
}

export interface TranscriptionSegment {
  $type: "livekit.TranscriptionSegment";
  id: string;
  text: string;
  startTime: bigint;
  endTime: bigint;
  final: boolean;
  language: string;
}

export interface ChatMessage {
  $type: "livekit.ChatMessage";
  /** uuid */
  id: string;
  timestamp: bigint;
  /** populated only if the intent is to edit/update an existing message */
  editTimestamp?: bigint | undefined;
  message: string;
  /** true to remove message */
  deleted: boolean;
  /** true if the chat message has been generated by an agent from a participant's audio transcription */
  generated: boolean;
}

export interface RpcRequest {
  $type: "livekit.RpcRequest";
  id: string;
  method: string;
  payload: string;
  responseTimeoutMs: number;
  version: number;
}

export interface RpcAck {
  $type: "livekit.RpcAck";
  requestId: string;
}

export interface RpcResponse {
  $type: "livekit.RpcResponse";
  requestId: string;
  payload?: string | undefined;
  error?: RpcError | undefined;
}

export interface RpcError {
  $type: "livekit.RpcError";
  code: number;
  message: string;
  data: string;
}

export interface ParticipantTracks {
  $type: "livekit.ParticipantTracks";
  /** participant ID of participant to whom the tracks belong */
  participantSid: string;
  trackSids: string[];
}

/** details about the server */
export interface ServerInfo {
  $type: "livekit.ServerInfo";
  edition: ServerInfo_Edition;
  version: string;
  protocol: number;
  region: string;
  nodeId: string;
  /** additional debugging information. sent only if server is in development mode */
  debugInfo: string;
  agentProtocol: number;
}

export const ServerInfo_Edition = {
  Standard: 0,
  Cloud: 1,
  UNRECOGNIZED: -1,
} as const;

export type ServerInfo_Edition =
  (typeof ServerInfo_Edition)[keyof typeof ServerInfo_Edition];

export namespace ServerInfo_Edition {
  export type Standard = typeof ServerInfo_Edition.Standard;
  export type Cloud = typeof ServerInfo_Edition.Cloud;
  export type UNRECOGNIZED = typeof ServerInfo_Edition.UNRECOGNIZED;
}

export function serverInfo_EditionFromJSON(object: any): ServerInfo_Edition {
  switch (object) {
    case 0:
    case "Standard":
      return ServerInfo_Edition.Standard;
    case 1:
    case "Cloud":
      return ServerInfo_Edition.Cloud;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ServerInfo_Edition.UNRECOGNIZED;
  }
}

export function serverInfo_EditionToJSON(object: ServerInfo_Edition): string {
  switch (object) {
    case ServerInfo_Edition.Standard:
      return "Standard";
    case ServerInfo_Edition.Cloud:
      return "Cloud";
    case ServerInfo_Edition.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** details about the client */
export interface ClientInfo {
  $type: "livekit.ClientInfo";
  sdk: ClientInfo_SDK;
  version: string;
  protocol: number;
  os: string;
  osVersion: string;
  deviceModel: string;
  browser: string;
  browserVersion: string;
  address: string;
  /** wifi, wired, cellular, vpn, empty if not known */
  network: string;
  /**
   * comma separated list of additional LiveKit SDKs in use of this client, with versions
   * e.g. "components-js:1.2.3,track-processors-js:1.2.3"
   */
  otherSdks: string;
}

export const ClientInfo_SDK = {
  UNKNOWN: 0,
  JS: 1,
  SWIFT: 2,
  ANDROID: 3,
  FLUTTER: 4,
  GO: 5,
  UNITY: 6,
  REACT_NATIVE: 7,
  RUST: 8,
  PYTHON: 9,
  CPP: 10,
  UNITY_WEB: 11,
  NODE: 12,
  UNRECOGNIZED: -1,
} as const;

export type ClientInfo_SDK =
  (typeof ClientInfo_SDK)[keyof typeof ClientInfo_SDK];

export namespace ClientInfo_SDK {
  export type UNKNOWN = typeof ClientInfo_SDK.UNKNOWN;
  export type JS = typeof ClientInfo_SDK.JS;
  export type SWIFT = typeof ClientInfo_SDK.SWIFT;
  export type ANDROID = typeof ClientInfo_SDK.ANDROID;
  export type FLUTTER = typeof ClientInfo_SDK.FLUTTER;
  export type GO = typeof ClientInfo_SDK.GO;
  export type UNITY = typeof ClientInfo_SDK.UNITY;
  export type REACT_NATIVE = typeof ClientInfo_SDK.REACT_NATIVE;
  export type RUST = typeof ClientInfo_SDK.RUST;
  export type PYTHON = typeof ClientInfo_SDK.PYTHON;
  export type CPP = typeof ClientInfo_SDK.CPP;
  export type UNITY_WEB = typeof ClientInfo_SDK.UNITY_WEB;
  export type NODE = typeof ClientInfo_SDK.NODE;
  export type UNRECOGNIZED = typeof ClientInfo_SDK.UNRECOGNIZED;
}

export function clientInfo_SDKFromJSON(object: any): ClientInfo_SDK {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return ClientInfo_SDK.UNKNOWN;
    case 1:
    case "JS":
      return ClientInfo_SDK.JS;
    case 2:
    case "SWIFT":
      return ClientInfo_SDK.SWIFT;
    case 3:
    case "ANDROID":
      return ClientInfo_SDK.ANDROID;
    case 4:
    case "FLUTTER":
      return ClientInfo_SDK.FLUTTER;
    case 5:
    case "GO":
      return ClientInfo_SDK.GO;
    case 6:
    case "UNITY":
      return ClientInfo_SDK.UNITY;
    case 7:
    case "REACT_NATIVE":
      return ClientInfo_SDK.REACT_NATIVE;
    case 8:
    case "RUST":
      return ClientInfo_SDK.RUST;
    case 9:
    case "PYTHON":
      return ClientInfo_SDK.PYTHON;
    case 10:
    case "CPP":
      return ClientInfo_SDK.CPP;
    case 11:
    case "UNITY_WEB":
      return ClientInfo_SDK.UNITY_WEB;
    case 12:
    case "NODE":
      return ClientInfo_SDK.NODE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClientInfo_SDK.UNRECOGNIZED;
  }
}

export function clientInfo_SDKToJSON(object: ClientInfo_SDK): string {
  switch (object) {
    case ClientInfo_SDK.UNKNOWN:
      return "UNKNOWN";
    case ClientInfo_SDK.JS:
      return "JS";
    case ClientInfo_SDK.SWIFT:
      return "SWIFT";
    case ClientInfo_SDK.ANDROID:
      return "ANDROID";
    case ClientInfo_SDK.FLUTTER:
      return "FLUTTER";
    case ClientInfo_SDK.GO:
      return "GO";
    case ClientInfo_SDK.UNITY:
      return "UNITY";
    case ClientInfo_SDK.REACT_NATIVE:
      return "REACT_NATIVE";
    case ClientInfo_SDK.RUST:
      return "RUST";
    case ClientInfo_SDK.PYTHON:
      return "PYTHON";
    case ClientInfo_SDK.CPP:
      return "CPP";
    case ClientInfo_SDK.UNITY_WEB:
      return "UNITY_WEB";
    case ClientInfo_SDK.NODE:
      return "NODE";
    case ClientInfo_SDK.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** server provided client configuration */
export interface ClientConfiguration {
  $type: "livekit.ClientConfiguration";
  video: VideoConfiguration | undefined;
  screen: VideoConfiguration | undefined;
  resumeConnection: ClientConfigSetting;
  disabledCodecs: DisabledCodecs | undefined;
  forceRelay: ClientConfigSetting;
}

export interface VideoConfiguration {
  $type: "livekit.VideoConfiguration";
  hardwareEncoder: ClientConfigSetting;
}

export interface DisabledCodecs {
  $type: "livekit.DisabledCodecs";
  /** disabled for both publish and subscribe */
  codecs: Codec[];
  /** only disable for publish */
  publish: Codec[];
}

export interface RTPDrift {
  $type: "livekit.RTPDrift";
  startTime: Date | undefined;
  endTime: Date | undefined;
  duration: number;
  startTimestamp: bigint;
  endTimestamp: bigint;
  rtpClockTicks: bigint;
  driftSamples: bigint;
  driftMs: number;
  clockRate: number;
}

export interface RTPStats {
  $type: "livekit.RTPStats";
  startTime: Date | undefined;
  endTime: Date | undefined;
  duration: number;
  packets: number;
  packetRate: number;
  bytes: bigint;
  headerBytes: bigint;
  bitrate: number;
  packetsLost: number;
  packetLossRate: number;
  packetLossPercentage: number;
  packetsDuplicate: number;
  packetDuplicateRate: number;
  bytesDuplicate: bigint;
  headerBytesDuplicate: bigint;
  bitrateDuplicate: number;
  packetsPadding: number;
  packetPaddingRate: number;
  bytesPadding: bigint;
  headerBytesPadding: bigint;
  bitratePadding: number;
  packetsOutOfOrder: number;
  frames: number;
  frameRate: number;
  jitterCurrent: number;
  jitterMax: number;
  gapHistogram: { [key: number]: number };
  nacks: number;
  nackAcks: number;
  nackMisses: number;
  nackRepeated: number;
  plis: number;
  lastPli: Date | undefined;
  firs: number;
  lastFir: Date | undefined;
  rttCurrent: number;
  rttMax: number;
  keyFrames: number;
  lastKeyFrame: Date | undefined;
  layerLockPlis: number;
  lastLayerLockPli: Date | undefined;
  packetDrift: RTPDrift | undefined;
  ntpReportDrift: RTPDrift | undefined;
  rebasedReportDrift: RTPDrift | undefined;
  /** NEXT_ID: 48 */
  receivedReportDrift: RTPDrift | undefined;
}

export interface RTPStats_GapHistogramEntry {
  $type: "livekit.RTPStats.GapHistogramEntry";
  key: number;
  value: number;
}

export interface RTCPSenderReportState {
  $type: "livekit.RTCPSenderReportState";
  rtpTimestamp: number;
  rtpTimestampExt: bigint;
  ntpTimestamp: bigint;
  /** time at which this happened */
  at: bigint;
  atAdjusted: bigint;
  packets: number;
  octets: bigint;
}

export interface RTPForwarderState {
  $type: "livekit.RTPForwarderState";
  started: boolean;
  referenceLayerSpatial: number;
  preStartTime: bigint;
  extFirstTimestamp: bigint;
  dummyStartTimestampOffset: bigint;
  rtpMunger: RTPMungerState | undefined;
  vp8Munger?: VP8MungerState | undefined;
  senderReportState: RTCPSenderReportState[];
}

export interface RTPMungerState {
  $type: "livekit.RTPMungerState";
  extLastSequenceNumber: bigint;
  extSecondLastSequenceNumber: bigint;
  extLastTimestamp: bigint;
  extSecondLastTimestamp: bigint;
  lastMarker: boolean;
  secondLastMarker: boolean;
}

export interface VP8MungerState {
  $type: "livekit.VP8MungerState";
  extLastPictureId: number;
  pictureIdUsed: boolean;
  lastTl0PicIdx: number;
  tl0PicIdxUsed: boolean;
  tidUsed: boolean;
  lastKeyIdx: number;
  keyIdxUsed: boolean;
}

export interface TimedVersion {
  $type: "livekit.TimedVersion";
  unixMicro: bigint;
  ticks: number;
}

export interface DataStream {
  $type: "livekit.DataStream";
}

/** enum for operation types (specific to TextHeader) */
export const DataStream_OperationType = {
  CREATE: 0,
  UPDATE: 1,
  DELETE: 2,
  REACTION: 3,
  UNRECOGNIZED: -1,
} as const;

export type DataStream_OperationType =
  (typeof DataStream_OperationType)[keyof typeof DataStream_OperationType];

export namespace DataStream_OperationType {
  export type CREATE = typeof DataStream_OperationType.CREATE;
  export type UPDATE = typeof DataStream_OperationType.UPDATE;
  export type DELETE = typeof DataStream_OperationType.DELETE;
  export type REACTION = typeof DataStream_OperationType.REACTION;
  export type UNRECOGNIZED = typeof DataStream_OperationType.UNRECOGNIZED;
}

export function dataStream_OperationTypeFromJSON(
  object: any,
): DataStream_OperationType {
  switch (object) {
    case 0:
    case "CREATE":
      return DataStream_OperationType.CREATE;
    case 1:
    case "UPDATE":
      return DataStream_OperationType.UPDATE;
    case 2:
    case "DELETE":
      return DataStream_OperationType.DELETE;
    case 3:
    case "REACTION":
      return DataStream_OperationType.REACTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DataStream_OperationType.UNRECOGNIZED;
  }
}

export function dataStream_OperationTypeToJSON(
  object: DataStream_OperationType,
): string {
  switch (object) {
    case DataStream_OperationType.CREATE:
      return "CREATE";
    case DataStream_OperationType.UPDATE:
      return "UPDATE";
    case DataStream_OperationType.DELETE:
      return "DELETE";
    case DataStream_OperationType.REACTION:
      return "REACTION";
    case DataStream_OperationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** header properties specific to text streams */
export interface DataStream_TextHeader {
  $type: "livekit.DataStream.TextHeader";
  operationType: DataStream_OperationType;
  /** Optional: Version for updates/edits */
  version: number;
  /** Optional: Reply to specific message */
  replyToStreamId: string;
  /** file attachments for text streams */
  attachedStreamIds: string[];
  /** true if the text has been generated by an agent from a participant's audio transcription */
  generated: boolean;
}

/** header properties specific to byte or file streams */
export interface DataStream_ByteHeader {
  $type: "livekit.DataStream.ByteHeader";
  name: string;
}

/** main DataStream.Header that contains a oneof for specific headers */
export interface DataStream_Header {
  $type: "livekit.DataStream.Header";
  /** unique identifier for this data stream */
  streamId: string;
  /** using int64 for Unix timestamp */
  timestamp: bigint;
  topic: string;
  mimeType: string;
  /** only populated for finite streams, if it's a stream of unknown size this stays empty */
  totalLength?: bigint | undefined;
  /** defaults to NONE */
  encryptionType: Encryption_Type;
  /** user defined attributes map that can carry additional info */
  attributes: { [key: string]: string };
  textHeader?: DataStream_TextHeader | undefined;
  byteHeader?: DataStream_ByteHeader | undefined;
}

export interface DataStream_Header_AttributesEntry {
  $type: "livekit.DataStream.Header.AttributesEntry";
  key: string;
  value: string;
}

export interface DataStream_Chunk {
  $type: "livekit.DataStream.Chunk";
  /** unique identifier for this data stream to map it to the correct header */
  streamId: string;
  chunkIndex: bigint;
  /** content as binary (bytes) */
  content: Buffer;
  /** a version indicating that this chunk_index has been retroactively modified and the original one needs to be replaced */
  version: number;
  /** optional, initialization vector for AES-GCM encryption */
  iv?: Buffer | undefined;
}

export interface DataStream_Trailer {
  $type: "livekit.DataStream.Trailer";
  /** unique identifier for this data stream */
  streamId: string;
  /** reason why the stream was closed (could contain "error" / "interrupted" / empty for expected end) */
  reason: string;
  /** finalizing updates for the stream, can also include additional insights for errors or endTime for transcription */
  attributes: { [key: string]: string };
}

export interface DataStream_Trailer_AttributesEntry {
  $type: "livekit.DataStream.Trailer.AttributesEntry";
  key: string;
  value: string;
}

function createBasePagination(): Pagination {
  return { $type: "livekit.Pagination", afterId: "", limit: 0 };
}

export const Pagination: MessageFns<Pagination, "livekit.Pagination"> = {
  $type: "livekit.Pagination" as const,

  encode(
    message: Pagination,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.afterId !== "") {
      writer.uint32(10).string(message.afterId);
    }
    if (message.limit !== 0) {
      writer.uint32(16).int32(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Pagination {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePagination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.afterId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Pagination {
    return {
      $type: Pagination.$type,
      afterId: isSet(object.afterId) ? globalThis.String(object.afterId) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: Pagination): unknown {
    const obj: any = {};
    if (message.afterId !== "") {
      obj.afterId = message.afterId;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Pagination>, I>>(base?: I): Pagination {
    return Pagination.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Pagination>, I>>(
    object: I,
  ): Pagination {
    const message = createBasePagination();
    message.afterId = object.afterId ?? "";
    message.limit = object.limit ?? 0;
    return message;
  },
};

messageTypeRegistry.set(Pagination.$type, Pagination);

function createBaseRoom(): Room {
  return {
    $type: "livekit.Room",
    sid: "",
    name: "",
    emptyTimeout: 0,
    departureTimeout: 0,
    maxParticipants: 0,
    creationTime: 0n,
    creationTimeMs: 0n,
    turnPassword: "",
    enabledCodecs: [],
    metadata: "",
    numParticipants: 0,
    numPublishers: 0,
    activeRecording: false,
    version: undefined,
  };
}

export const Room: MessageFns<Room, "livekit.Room"> = {
  $type: "livekit.Room" as const,

  encode(
    message: Room,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.sid !== "") {
      writer.uint32(10).string(message.sid);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.emptyTimeout !== 0) {
      writer.uint32(24).uint32(message.emptyTimeout);
    }
    if (message.departureTimeout !== 0) {
      writer.uint32(112).uint32(message.departureTimeout);
    }
    if (message.maxParticipants !== 0) {
      writer.uint32(32).uint32(message.maxParticipants);
    }
    if (message.creationTime !== 0n) {
      if (BigInt.asIntN(64, message.creationTime) !== message.creationTime) {
        throw new globalThis.Error(
          "value provided for field message.creationTime of type int64 too large",
        );
      }
      writer.uint32(40).int64(message.creationTime);
    }
    if (message.creationTimeMs !== 0n) {
      if (
        BigInt.asIntN(64, message.creationTimeMs) !== message.creationTimeMs
      ) {
        throw new globalThis.Error(
          "value provided for field message.creationTimeMs of type int64 too large",
        );
      }
      writer.uint32(120).int64(message.creationTimeMs);
    }
    if (message.turnPassword !== "") {
      writer.uint32(50).string(message.turnPassword);
    }
    for (const v of message.enabledCodecs) {
      Codec.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.metadata !== "") {
      writer.uint32(66).string(message.metadata);
    }
    if (message.numParticipants !== 0) {
      writer.uint32(72).uint32(message.numParticipants);
    }
    if (message.numPublishers !== 0) {
      writer.uint32(88).uint32(message.numPublishers);
    }
    if (message.activeRecording !== false) {
      writer.uint32(80).bool(message.activeRecording);
    }
    if (message.version !== undefined) {
      TimedVersion.encode(message.version, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Room {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.emptyTimeout = reader.uint32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.departureTimeout = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.maxParticipants = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.creationTime = reader.int64() as bigint;
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.creationTimeMs = reader.int64() as bigint;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.turnPassword = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.enabledCodecs.push(Codec.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.metadata = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.numParticipants = reader.uint32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.numPublishers = reader.uint32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.activeRecording = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.version = TimedVersion.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Room {
    return {
      $type: Room.$type,
      sid: isSet(object.sid) ? globalThis.String(object.sid) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      emptyTimeout: isSet(object.emptyTimeout)
        ? globalThis.Number(object.emptyTimeout)
        : 0,
      departureTimeout: isSet(object.departureTimeout)
        ? globalThis.Number(object.departureTimeout)
        : 0,
      maxParticipants: isSet(object.maxParticipants)
        ? globalThis.Number(object.maxParticipants)
        : 0,
      creationTime: isSet(object.creationTime)
        ? BigInt(object.creationTime)
        : 0n,
      creationTimeMs: isSet(object.creationTimeMs)
        ? BigInt(object.creationTimeMs)
        : 0n,
      turnPassword: isSet(object.turnPassword)
        ? globalThis.String(object.turnPassword)
        : "",
      enabledCodecs: globalThis.Array.isArray(object?.enabledCodecs)
        ? object.enabledCodecs.map((e: any) => Codec.fromJSON(e))
        : [],
      metadata: isSet(object.metadata)
        ? globalThis.String(object.metadata)
        : "",
      numParticipants: isSet(object.numParticipants)
        ? globalThis.Number(object.numParticipants)
        : 0,
      numPublishers: isSet(object.numPublishers)
        ? globalThis.Number(object.numPublishers)
        : 0,
      activeRecording: isSet(object.activeRecording)
        ? globalThis.Boolean(object.activeRecording)
        : false,
      version: isSet(object.version)
        ? TimedVersion.fromJSON(object.version)
        : undefined,
    };
  },

  toJSON(message: Room): unknown {
    const obj: any = {};
    if (message.sid !== "") {
      obj.sid = message.sid;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.emptyTimeout !== 0) {
      obj.emptyTimeout = Math.round(message.emptyTimeout);
    }
    if (message.departureTimeout !== 0) {
      obj.departureTimeout = Math.round(message.departureTimeout);
    }
    if (message.maxParticipants !== 0) {
      obj.maxParticipants = Math.round(message.maxParticipants);
    }
    if (message.creationTime !== 0n) {
      obj.creationTime = message.creationTime.toString();
    }
    if (message.creationTimeMs !== 0n) {
      obj.creationTimeMs = message.creationTimeMs.toString();
    }
    if (message.turnPassword !== "") {
      obj.turnPassword = message.turnPassword;
    }
    if (message.enabledCodecs?.length) {
      obj.enabledCodecs = message.enabledCodecs.map((e) => Codec.toJSON(e));
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    if (message.numParticipants !== 0) {
      obj.numParticipants = Math.round(message.numParticipants);
    }
    if (message.numPublishers !== 0) {
      obj.numPublishers = Math.round(message.numPublishers);
    }
    if (message.activeRecording !== false) {
      obj.activeRecording = message.activeRecording;
    }
    if (message.version !== undefined) {
      obj.version = TimedVersion.toJSON(message.version);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Room>, I>>(base?: I): Room {
    return Room.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Room>, I>>(object: I): Room {
    const message = createBaseRoom();
    message.sid = object.sid ?? "";
    message.name = object.name ?? "";
    message.emptyTimeout = object.emptyTimeout ?? 0;
    message.departureTimeout = object.departureTimeout ?? 0;
    message.maxParticipants = object.maxParticipants ?? 0;
    message.creationTime = object.creationTime ?? 0n;
    message.creationTimeMs = object.creationTimeMs ?? 0n;
    message.turnPassword = object.turnPassword ?? "";
    message.enabledCodecs =
      object.enabledCodecs?.map((e) => Codec.fromPartial(e)) || [];
    message.metadata = object.metadata ?? "";
    message.numParticipants = object.numParticipants ?? 0;
    message.numPublishers = object.numPublishers ?? 0;
    message.activeRecording = object.activeRecording ?? false;
    message.version =
      object.version !== undefined && object.version !== null
        ? TimedVersion.fromPartial(object.version)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(Room.$type, Room);

function createBaseCodec(): Codec {
  return { $type: "livekit.Codec", mime: "", fmtpLine: "" };
}

export const Codec: MessageFns<Codec, "livekit.Codec"> = {
  $type: "livekit.Codec" as const,

  encode(
    message: Codec,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.mime !== "") {
      writer.uint32(10).string(message.mime);
    }
    if (message.fmtpLine !== "") {
      writer.uint32(18).string(message.fmtpLine);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Codec {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCodec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mime = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fmtpLine = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Codec {
    return {
      $type: Codec.$type,
      mime: isSet(object.mime) ? globalThis.String(object.mime) : "",
      fmtpLine: isSet(object.fmtpLine)
        ? globalThis.String(object.fmtpLine)
        : "",
    };
  },

  toJSON(message: Codec): unknown {
    const obj: any = {};
    if (message.mime !== "") {
      obj.mime = message.mime;
    }
    if (message.fmtpLine !== "") {
      obj.fmtpLine = message.fmtpLine;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Codec>, I>>(base?: I): Codec {
    return Codec.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Codec>, I>>(object: I): Codec {
    const message = createBaseCodec();
    message.mime = object.mime ?? "";
    message.fmtpLine = object.fmtpLine ?? "";
    return message;
  },
};

messageTypeRegistry.set(Codec.$type, Codec);

function createBasePlayoutDelay(): PlayoutDelay {
  return { $type: "livekit.PlayoutDelay", enabled: false, min: 0, max: 0 };
}

export const PlayoutDelay: MessageFns<PlayoutDelay, "livekit.PlayoutDelay"> = {
  $type: "livekit.PlayoutDelay" as const,

  encode(
    message: PlayoutDelay,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.enabled !== false) {
      writer.uint32(8).bool(message.enabled);
    }
    if (message.min !== 0) {
      writer.uint32(16).uint32(message.min);
    }
    if (message.max !== 0) {
      writer.uint32(24).uint32(message.max);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayoutDelay {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayoutDelay();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.min = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.max = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayoutDelay {
    return {
      $type: PlayoutDelay.$type,
      enabled: isSet(object.enabled)
        ? globalThis.Boolean(object.enabled)
        : false,
      min: isSet(object.min) ? globalThis.Number(object.min) : 0,
      max: isSet(object.max) ? globalThis.Number(object.max) : 0,
    };
  },

  toJSON(message: PlayoutDelay): unknown {
    const obj: any = {};
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.min !== 0) {
      obj.min = Math.round(message.min);
    }
    if (message.max !== 0) {
      obj.max = Math.round(message.max);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayoutDelay>, I>>(
    base?: I,
  ): PlayoutDelay {
    return PlayoutDelay.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayoutDelay>, I>>(
    object: I,
  ): PlayoutDelay {
    const message = createBasePlayoutDelay();
    message.enabled = object.enabled ?? false;
    message.min = object.min ?? 0;
    message.max = object.max ?? 0;
    return message;
  },
};

messageTypeRegistry.set(PlayoutDelay.$type, PlayoutDelay);

function createBaseParticipantPermission(): ParticipantPermission {
  return {
    $type: "livekit.ParticipantPermission",
    canSubscribe: false,
    canPublish: false,
    canPublishData: false,
    canPublishSources: [],
    hidden: false,
    recorder: false,
    canUpdateMetadata: false,
    agent: false,
    canSubscribeMetrics: false,
  };
}

export const ParticipantPermission: MessageFns<
  ParticipantPermission,
  "livekit.ParticipantPermission"
> = {
  $type: "livekit.ParticipantPermission" as const,

  encode(
    message: ParticipantPermission,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.canSubscribe !== false) {
      writer.uint32(8).bool(message.canSubscribe);
    }
    if (message.canPublish !== false) {
      writer.uint32(16).bool(message.canPublish);
    }
    if (message.canPublishData !== false) {
      writer.uint32(24).bool(message.canPublishData);
    }
    writer.uint32(74).fork();
    for (const v of message.canPublishSources) {
      writer.int32(v);
    }
    writer.join();
    if (message.hidden !== false) {
      writer.uint32(56).bool(message.hidden);
    }
    if (message.recorder !== false) {
      writer.uint32(64).bool(message.recorder);
    }
    if (message.canUpdateMetadata !== false) {
      writer.uint32(80).bool(message.canUpdateMetadata);
    }
    if (message.agent !== false) {
      writer.uint32(88).bool(message.agent);
    }
    if (message.canSubscribeMetrics !== false) {
      writer.uint32(96).bool(message.canSubscribeMetrics);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ParticipantPermission {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParticipantPermission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.canSubscribe = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.canPublish = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.canPublishData = reader.bool();
          continue;
        }
        case 9: {
          if (tag === 72) {
            message.canPublishSources.push(reader.int32() as any);

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.canPublishSources.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.hidden = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.recorder = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.canUpdateMetadata = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.agent = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.canSubscribeMetrics = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParticipantPermission {
    return {
      $type: ParticipantPermission.$type,
      canSubscribe: isSet(object.canSubscribe)
        ? globalThis.Boolean(object.canSubscribe)
        : false,
      canPublish: isSet(object.canPublish)
        ? globalThis.Boolean(object.canPublish)
        : false,
      canPublishData: isSet(object.canPublishData)
        ? globalThis.Boolean(object.canPublishData)
        : false,
      canPublishSources: globalThis.Array.isArray(object?.canPublishSources)
        ? object.canPublishSources.map((e: any) => trackSourceFromJSON(e))
        : [],
      hidden: isSet(object.hidden) ? globalThis.Boolean(object.hidden) : false,
      recorder: isSet(object.recorder)
        ? globalThis.Boolean(object.recorder)
        : false,
      canUpdateMetadata: isSet(object.canUpdateMetadata)
        ? globalThis.Boolean(object.canUpdateMetadata)
        : false,
      agent: isSet(object.agent) ? globalThis.Boolean(object.agent) : false,
      canSubscribeMetrics: isSet(object.canSubscribeMetrics)
        ? globalThis.Boolean(object.canSubscribeMetrics)
        : false,
    };
  },

  toJSON(message: ParticipantPermission): unknown {
    const obj: any = {};
    if (message.canSubscribe !== false) {
      obj.canSubscribe = message.canSubscribe;
    }
    if (message.canPublish !== false) {
      obj.canPublish = message.canPublish;
    }
    if (message.canPublishData !== false) {
      obj.canPublishData = message.canPublishData;
    }
    if (message.canPublishSources?.length) {
      obj.canPublishSources = message.canPublishSources.map((e) =>
        trackSourceToJSON(e),
      );
    }
    if (message.hidden !== false) {
      obj.hidden = message.hidden;
    }
    if (message.recorder !== false) {
      obj.recorder = message.recorder;
    }
    if (message.canUpdateMetadata !== false) {
      obj.canUpdateMetadata = message.canUpdateMetadata;
    }
    if (message.agent !== false) {
      obj.agent = message.agent;
    }
    if (message.canSubscribeMetrics !== false) {
      obj.canSubscribeMetrics = message.canSubscribeMetrics;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParticipantPermission>, I>>(
    base?: I,
  ): ParticipantPermission {
    return ParticipantPermission.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParticipantPermission>, I>>(
    object: I,
  ): ParticipantPermission {
    const message = createBaseParticipantPermission();
    message.canSubscribe = object.canSubscribe ?? false;
    message.canPublish = object.canPublish ?? false;
    message.canPublishData = object.canPublishData ?? false;
    message.canPublishSources = object.canPublishSources?.map((e) => e) || [];
    message.hidden = object.hidden ?? false;
    message.recorder = object.recorder ?? false;
    message.canUpdateMetadata = object.canUpdateMetadata ?? false;
    message.agent = object.agent ?? false;
    message.canSubscribeMetrics = object.canSubscribeMetrics ?? false;
    return message;
  },
};

messageTypeRegistry.set(ParticipantPermission.$type, ParticipantPermission);

function createBaseParticipantInfo(): ParticipantInfo {
  return {
    $type: "livekit.ParticipantInfo",
    sid: "",
    identity: "",
    state: 0,
    tracks: [],
    metadata: "",
    joinedAt: 0n,
    joinedAtMs: 0n,
    name: "",
    version: 0,
    permission: undefined,
    region: "",
    isPublisher: false,
    kind: 0,
    attributes: {},
    disconnectReason: 0,
  };
}

export const ParticipantInfo: MessageFns<
  ParticipantInfo,
  "livekit.ParticipantInfo"
> = {
  $type: "livekit.ParticipantInfo" as const,

  encode(
    message: ParticipantInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.sid !== "") {
      writer.uint32(10).string(message.sid);
    }
    if (message.identity !== "") {
      writer.uint32(18).string(message.identity);
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    for (const v of message.tracks) {
      TrackInfo.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.metadata !== "") {
      writer.uint32(42).string(message.metadata);
    }
    if (message.joinedAt !== 0n) {
      if (BigInt.asIntN(64, message.joinedAt) !== message.joinedAt) {
        throw new globalThis.Error(
          "value provided for field message.joinedAt of type int64 too large",
        );
      }
      writer.uint32(48).int64(message.joinedAt);
    }
    if (message.joinedAtMs !== 0n) {
      if (BigInt.asIntN(64, message.joinedAtMs) !== message.joinedAtMs) {
        throw new globalThis.Error(
          "value provided for field message.joinedAtMs of type int64 too large",
        );
      }
      writer.uint32(136).int64(message.joinedAtMs);
    }
    if (message.name !== "") {
      writer.uint32(74).string(message.name);
    }
    if (message.version !== 0) {
      writer.uint32(80).uint32(message.version);
    }
    if (message.permission !== undefined) {
      ParticipantPermission.encode(
        message.permission,
        writer.uint32(90).fork(),
      ).join();
    }
    if (message.region !== "") {
      writer.uint32(98).string(message.region);
    }
    if (message.isPublisher !== false) {
      writer.uint32(104).bool(message.isPublisher);
    }
    if (message.kind !== 0) {
      writer.uint32(112).int32(message.kind);
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      ParticipantInfo_AttributesEntry.encode(
        {
          $type: "livekit.ParticipantInfo.AttributesEntry",
          key: key as any,
          value,
        },
        writer.uint32(122).fork(),
      ).join();
    });
    if (message.disconnectReason !== 0) {
      writer.uint32(128).int32(message.disconnectReason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParticipantInfo {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParticipantInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.identity = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tracks.push(TrackInfo.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.joinedAt = reader.int64() as bigint;
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.joinedAtMs = reader.int64() as bigint;
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.version = reader.uint32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.permission = ParticipantPermission.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.region = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.isPublisher = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.kind = reader.int32() as any;
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          const entry15 = ParticipantInfo_AttributesEntry.decode(
            reader,
            reader.uint32(),
          );
          if (entry15.value !== undefined) {
            message.attributes[entry15.key] = entry15.value;
          }
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.disconnectReason = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParticipantInfo {
    return {
      $type: ParticipantInfo.$type,
      sid: isSet(object.sid) ? globalThis.String(object.sid) : "",
      identity: isSet(object.identity)
        ? globalThis.String(object.identity)
        : "",
      state: isSet(object.state)
        ? participantInfo_StateFromJSON(object.state)
        : 0,
      tracks: globalThis.Array.isArray(object?.tracks)
        ? object.tracks.map((e: any) => TrackInfo.fromJSON(e))
        : [],
      metadata: isSet(object.metadata)
        ? globalThis.String(object.metadata)
        : "",
      joinedAt: isSet(object.joinedAt) ? BigInt(object.joinedAt) : 0n,
      joinedAtMs: isSet(object.joinedAtMs) ? BigInt(object.joinedAtMs) : 0n,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      permission: isSet(object.permission)
        ? ParticipantPermission.fromJSON(object.permission)
        : undefined,
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      isPublisher: isSet(object.isPublisher)
        ? globalThis.Boolean(object.isPublisher)
        : false,
      kind: isSet(object.kind) ? participantInfo_KindFromJSON(object.kind) : 0,
      attributes: isObject(object.attributes)
        ? Object.entries(object.attributes).reduce<{ [key: string]: string }>(
            (acc, [key, value]) => {
              acc[key] = String(value);
              return acc;
            },
            {},
          )
        : {},
      disconnectReason: isSet(object.disconnectReason)
        ? disconnectReasonFromJSON(object.disconnectReason)
        : 0,
    };
  },

  toJSON(message: ParticipantInfo): unknown {
    const obj: any = {};
    if (message.sid !== "") {
      obj.sid = message.sid;
    }
    if (message.identity !== "") {
      obj.identity = message.identity;
    }
    if (message.state !== 0) {
      obj.state = participantInfo_StateToJSON(message.state);
    }
    if (message.tracks?.length) {
      obj.tracks = message.tracks.map((e) => TrackInfo.toJSON(e));
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    if (message.joinedAt !== 0n) {
      obj.joinedAt = message.joinedAt.toString();
    }
    if (message.joinedAtMs !== 0n) {
      obj.joinedAtMs = message.joinedAtMs.toString();
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.permission !== undefined) {
      obj.permission = ParticipantPermission.toJSON(message.permission);
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.isPublisher !== false) {
      obj.isPublisher = message.isPublisher;
    }
    if (message.kind !== 0) {
      obj.kind = participantInfo_KindToJSON(message.kind);
    }
    if (message.attributes) {
      const entries = Object.entries(message.attributes);
      if (entries.length > 0) {
        obj.attributes = {};
        entries.forEach(([k, v]) => {
          obj.attributes[k] = v;
        });
      }
    }
    if (message.disconnectReason !== 0) {
      obj.disconnectReason = disconnectReasonToJSON(message.disconnectReason);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParticipantInfo>, I>>(
    base?: I,
  ): ParticipantInfo {
    return ParticipantInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParticipantInfo>, I>>(
    object: I,
  ): ParticipantInfo {
    const message = createBaseParticipantInfo();
    message.sid = object.sid ?? "";
    message.identity = object.identity ?? "";
    message.state = object.state ?? 0;
    message.tracks = object.tracks?.map((e) => TrackInfo.fromPartial(e)) || [];
    message.metadata = object.metadata ?? "";
    message.joinedAt = object.joinedAt ?? 0n;
    message.joinedAtMs = object.joinedAtMs ?? 0n;
    message.name = object.name ?? "";
    message.version = object.version ?? 0;
    message.permission =
      object.permission !== undefined && object.permission !== null
        ? ParticipantPermission.fromPartial(object.permission)
        : undefined;
    message.region = object.region ?? "";
    message.isPublisher = object.isPublisher ?? false;
    message.kind = object.kind ?? 0;
    message.attributes = Object.entries(object.attributes ?? {}).reduce<{
      [key: string]: string;
    }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.disconnectReason = object.disconnectReason ?? 0;
    return message;
  },
};

messageTypeRegistry.set(ParticipantInfo.$type, ParticipantInfo);

function createBaseParticipantInfo_AttributesEntry(): ParticipantInfo_AttributesEntry {
  return {
    $type: "livekit.ParticipantInfo.AttributesEntry",
    key: "",
    value: "",
  };
}

export const ParticipantInfo_AttributesEntry: MessageFns<
  ParticipantInfo_AttributesEntry,
  "livekit.ParticipantInfo.AttributesEntry"
> = {
  $type: "livekit.ParticipantInfo.AttributesEntry" as const,

  encode(
    message: ParticipantInfo_AttributesEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ParticipantInfo_AttributesEntry {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParticipantInfo_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParticipantInfo_AttributesEntry {
    return {
      $type: ParticipantInfo_AttributesEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ParticipantInfo_AttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParticipantInfo_AttributesEntry>, I>>(
    base?: I,
  ): ParticipantInfo_AttributesEntry {
    return ParticipantInfo_AttributesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParticipantInfo_AttributesEntry>, I>>(
    object: I,
  ): ParticipantInfo_AttributesEntry {
    const message = createBaseParticipantInfo_AttributesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(
  ParticipantInfo_AttributesEntry.$type,
  ParticipantInfo_AttributesEntry,
);

function createBaseEncryption(): Encryption {
  return { $type: "livekit.Encryption" };
}

export const Encryption: MessageFns<Encryption, "livekit.Encryption"> = {
  $type: "livekit.Encryption" as const,

  encode(
    _: Encryption,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Encryption {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEncryption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Encryption {
    return { $type: Encryption.$type };
  },

  toJSON(_: Encryption): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Encryption>, I>>(base?: I): Encryption {
    return Encryption.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Encryption>, I>>(_: I): Encryption {
    const message = createBaseEncryption();
    return message;
  },
};

messageTypeRegistry.set(Encryption.$type, Encryption);

function createBaseSimulcastCodecInfo(): SimulcastCodecInfo {
  return {
    $type: "livekit.SimulcastCodecInfo",
    mimeType: "",
    mid: "",
    cid: "",
    layers: [],
  };
}

export const SimulcastCodecInfo: MessageFns<
  SimulcastCodecInfo,
  "livekit.SimulcastCodecInfo"
> = {
  $type: "livekit.SimulcastCodecInfo" as const,

  encode(
    message: SimulcastCodecInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.mimeType !== "") {
      writer.uint32(10).string(message.mimeType);
    }
    if (message.mid !== "") {
      writer.uint32(18).string(message.mid);
    }
    if (message.cid !== "") {
      writer.uint32(26).string(message.cid);
    }
    for (const v of message.layers) {
      VideoLayer.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): SimulcastCodecInfo {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimulcastCodecInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.cid = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.layers.push(VideoLayer.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimulcastCodecInfo {
    return {
      $type: SimulcastCodecInfo.$type,
      mimeType: isSet(object.mimeType)
        ? globalThis.String(object.mimeType)
        : "",
      mid: isSet(object.mid) ? globalThis.String(object.mid) : "",
      cid: isSet(object.cid) ? globalThis.String(object.cid) : "",
      layers: globalThis.Array.isArray(object?.layers)
        ? object.layers.map((e: any) => VideoLayer.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SimulcastCodecInfo): unknown {
    const obj: any = {};
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    if (message.mid !== "") {
      obj.mid = message.mid;
    }
    if (message.cid !== "") {
      obj.cid = message.cid;
    }
    if (message.layers?.length) {
      obj.layers = message.layers.map((e) => VideoLayer.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SimulcastCodecInfo>, I>>(
    base?: I,
  ): SimulcastCodecInfo {
    return SimulcastCodecInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SimulcastCodecInfo>, I>>(
    object: I,
  ): SimulcastCodecInfo {
    const message = createBaseSimulcastCodecInfo();
    message.mimeType = object.mimeType ?? "";
    message.mid = object.mid ?? "";
    message.cid = object.cid ?? "";
    message.layers = object.layers?.map((e) => VideoLayer.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(SimulcastCodecInfo.$type, SimulcastCodecInfo);

function createBaseTrackInfo(): TrackInfo {
  return {
    $type: "livekit.TrackInfo",
    sid: "",
    type: 0,
    name: "",
    muted: false,
    width: 0,
    height: 0,
    simulcast: false,
    disableDtx: false,
    source: 0,
    layers: [],
    mimeType: "",
    mid: "",
    codecs: [],
    stereo: false,
    disableRed: false,
    encryption: 0,
    stream: "",
    version: undefined,
    audioFeatures: [],
    backupCodecPolicy: 0,
  };
}

export const TrackInfo: MessageFns<TrackInfo, "livekit.TrackInfo"> = {
  $type: "livekit.TrackInfo" as const,

  encode(
    message: TrackInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.sid !== "") {
      writer.uint32(10).string(message.sid);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.muted !== false) {
      writer.uint32(32).bool(message.muted);
    }
    if (message.width !== 0) {
      writer.uint32(40).uint32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(48).uint32(message.height);
    }
    if (message.simulcast !== false) {
      writer.uint32(56).bool(message.simulcast);
    }
    if (message.disableDtx !== false) {
      writer.uint32(64).bool(message.disableDtx);
    }
    if (message.source !== 0) {
      writer.uint32(72).int32(message.source);
    }
    for (const v of message.layers) {
      VideoLayer.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.mimeType !== "") {
      writer.uint32(90).string(message.mimeType);
    }
    if (message.mid !== "") {
      writer.uint32(98).string(message.mid);
    }
    for (const v of message.codecs) {
      SimulcastCodecInfo.encode(v!, writer.uint32(106).fork()).join();
    }
    if (message.stereo !== false) {
      writer.uint32(112).bool(message.stereo);
    }
    if (message.disableRed !== false) {
      writer.uint32(120).bool(message.disableRed);
    }
    if (message.encryption !== 0) {
      writer.uint32(128).int32(message.encryption);
    }
    if (message.stream !== "") {
      writer.uint32(138).string(message.stream);
    }
    if (message.version !== undefined) {
      TimedVersion.encode(message.version, writer.uint32(146).fork()).join();
    }
    writer.uint32(154).fork();
    for (const v of message.audioFeatures) {
      writer.int32(v);
    }
    writer.join();
    if (message.backupCodecPolicy !== 0) {
      writer.uint32(160).int32(message.backupCodecPolicy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrackInfo {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrackInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.muted = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.width = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.height = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.simulcast = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.disableDtx = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.source = reader.int32() as any;
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.layers.push(VideoLayer.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.mid = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.codecs.push(
            SimulcastCodecInfo.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.stereo = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.disableRed = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.encryption = reader.int32() as any;
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.stream = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.version = TimedVersion.decode(reader, reader.uint32());
          continue;
        }
        case 19: {
          if (tag === 152) {
            message.audioFeatures.push(reader.int32() as any);

            continue;
          }

          if (tag === 154) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.audioFeatures.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.backupCodecPolicy = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrackInfo {
    return {
      $type: TrackInfo.$type,
      sid: isSet(object.sid) ? globalThis.String(object.sid) : "",
      type: isSet(object.type) ? trackTypeFromJSON(object.type) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      muted: isSet(object.muted) ? globalThis.Boolean(object.muted) : false,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      simulcast: isSet(object.simulcast)
        ? globalThis.Boolean(object.simulcast)
        : false,
      disableDtx: isSet(object.disableDtx)
        ? globalThis.Boolean(object.disableDtx)
        : false,
      source: isSet(object.source) ? trackSourceFromJSON(object.source) : 0,
      layers: globalThis.Array.isArray(object?.layers)
        ? object.layers.map((e: any) => VideoLayer.fromJSON(e))
        : [],
      mimeType: isSet(object.mimeType)
        ? globalThis.String(object.mimeType)
        : "",
      mid: isSet(object.mid) ? globalThis.String(object.mid) : "",
      codecs: globalThis.Array.isArray(object?.codecs)
        ? object.codecs.map((e: any) => SimulcastCodecInfo.fromJSON(e))
        : [],
      stereo: isSet(object.stereo) ? globalThis.Boolean(object.stereo) : false,
      disableRed: isSet(object.disableRed)
        ? globalThis.Boolean(object.disableRed)
        : false,
      encryption: isSet(object.encryption)
        ? encryption_TypeFromJSON(object.encryption)
        : 0,
      stream: isSet(object.stream) ? globalThis.String(object.stream) : "",
      version: isSet(object.version)
        ? TimedVersion.fromJSON(object.version)
        : undefined,
      audioFeatures: globalThis.Array.isArray(object?.audioFeatures)
        ? object.audioFeatures.map((e: any) => audioTrackFeatureFromJSON(e))
        : [],
      backupCodecPolicy: isSet(object.backupCodecPolicy)
        ? backupCodecPolicyFromJSON(object.backupCodecPolicy)
        : 0,
    };
  },

  toJSON(message: TrackInfo): unknown {
    const obj: any = {};
    if (message.sid !== "") {
      obj.sid = message.sid;
    }
    if (message.type !== 0) {
      obj.type = trackTypeToJSON(message.type);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.muted !== false) {
      obj.muted = message.muted;
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.simulcast !== false) {
      obj.simulcast = message.simulcast;
    }
    if (message.disableDtx !== false) {
      obj.disableDtx = message.disableDtx;
    }
    if (message.source !== 0) {
      obj.source = trackSourceToJSON(message.source);
    }
    if (message.layers?.length) {
      obj.layers = message.layers.map((e) => VideoLayer.toJSON(e));
    }
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    if (message.mid !== "") {
      obj.mid = message.mid;
    }
    if (message.codecs?.length) {
      obj.codecs = message.codecs.map((e) => SimulcastCodecInfo.toJSON(e));
    }
    if (message.stereo !== false) {
      obj.stereo = message.stereo;
    }
    if (message.disableRed !== false) {
      obj.disableRed = message.disableRed;
    }
    if (message.encryption !== 0) {
      obj.encryption = encryption_TypeToJSON(message.encryption);
    }
    if (message.stream !== "") {
      obj.stream = message.stream;
    }
    if (message.version !== undefined) {
      obj.version = TimedVersion.toJSON(message.version);
    }
    if (message.audioFeatures?.length) {
      obj.audioFeatures = message.audioFeatures.map((e) =>
        audioTrackFeatureToJSON(e),
      );
    }
    if (message.backupCodecPolicy !== 0) {
      obj.backupCodecPolicy = backupCodecPolicyToJSON(
        message.backupCodecPolicy,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TrackInfo>, I>>(base?: I): TrackInfo {
    return TrackInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrackInfo>, I>>(
    object: I,
  ): TrackInfo {
    const message = createBaseTrackInfo();
    message.sid = object.sid ?? "";
    message.type = object.type ?? 0;
    message.name = object.name ?? "";
    message.muted = object.muted ?? false;
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.simulcast = object.simulcast ?? false;
    message.disableDtx = object.disableDtx ?? false;
    message.source = object.source ?? 0;
    message.layers = object.layers?.map((e) => VideoLayer.fromPartial(e)) || [];
    message.mimeType = object.mimeType ?? "";
    message.mid = object.mid ?? "";
    message.codecs =
      object.codecs?.map((e) => SimulcastCodecInfo.fromPartial(e)) || [];
    message.stereo = object.stereo ?? false;
    message.disableRed = object.disableRed ?? false;
    message.encryption = object.encryption ?? 0;
    message.stream = object.stream ?? "";
    message.version =
      object.version !== undefined && object.version !== null
        ? TimedVersion.fromPartial(object.version)
        : undefined;
    message.audioFeatures = object.audioFeatures?.map((e) => e) || [];
    message.backupCodecPolicy = object.backupCodecPolicy ?? 0;
    return message;
  },
};

messageTypeRegistry.set(TrackInfo.$type, TrackInfo);

function createBaseVideoLayer(): VideoLayer {
  return {
    $type: "livekit.VideoLayer",
    quality: 0,
    width: 0,
    height: 0,
    bitrate: 0,
    ssrc: 0,
  };
}

export const VideoLayer: MessageFns<VideoLayer, "livekit.VideoLayer"> = {
  $type: "livekit.VideoLayer" as const,

  encode(
    message: VideoLayer,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.quality !== 0) {
      writer.uint32(8).int32(message.quality);
    }
    if (message.width !== 0) {
      writer.uint32(16).uint32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(24).uint32(message.height);
    }
    if (message.bitrate !== 0) {
      writer.uint32(32).uint32(message.bitrate);
    }
    if (message.ssrc !== 0) {
      writer.uint32(40).uint32(message.ssrc);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoLayer {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoLayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.quality = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.width = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.height = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.bitrate = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.ssrc = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoLayer {
    return {
      $type: VideoLayer.$type,
      quality: isSet(object.quality) ? videoQualityFromJSON(object.quality) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      bitrate: isSet(object.bitrate) ? globalThis.Number(object.bitrate) : 0,
      ssrc: isSet(object.ssrc) ? globalThis.Number(object.ssrc) : 0,
    };
  },

  toJSON(message: VideoLayer): unknown {
    const obj: any = {};
    if (message.quality !== 0) {
      obj.quality = videoQualityToJSON(message.quality);
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.bitrate !== 0) {
      obj.bitrate = Math.round(message.bitrate);
    }
    if (message.ssrc !== 0) {
      obj.ssrc = Math.round(message.ssrc);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VideoLayer>, I>>(base?: I): VideoLayer {
    return VideoLayer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VideoLayer>, I>>(
    object: I,
  ): VideoLayer {
    const message = createBaseVideoLayer();
    message.quality = object.quality ?? 0;
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.bitrate = object.bitrate ?? 0;
    message.ssrc = object.ssrc ?? 0;
    return message;
  },
};

messageTypeRegistry.set(VideoLayer.$type, VideoLayer);

function createBaseDataPacket(): DataPacket {
  return {
    $type: "livekit.DataPacket",
    kind: 0,
    participantIdentity: "",
    destinationIdentities: [],
    user: undefined,
    speaker: undefined,
    sipDtmf: undefined,
    transcription: undefined,
    metrics: undefined,
    chatMessage: undefined,
    rpcRequest: undefined,
    rpcAck: undefined,
    rpcResponse: undefined,
    streamHeader: undefined,
    streamChunk: undefined,
    streamTrailer: undefined,
  };
}

export const DataPacket: MessageFns<DataPacket, "livekit.DataPacket"> = {
  $type: "livekit.DataPacket" as const,

  encode(
    message: DataPacket,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.kind !== 0) {
      writer.uint32(8).int32(message.kind);
    }
    if (message.participantIdentity !== "") {
      writer.uint32(34).string(message.participantIdentity);
    }
    for (const v of message.destinationIdentities) {
      writer.uint32(42).string(v!);
    }
    if (message.user !== undefined) {
      UserPacket.encode(message.user, writer.uint32(18).fork()).join();
    }
    if (message.speaker !== undefined) {
      ActiveSpeakerUpdate.encode(
        message.speaker,
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.sipDtmf !== undefined) {
      SipDTMF.encode(message.sipDtmf, writer.uint32(50).fork()).join();
    }
    if (message.transcription !== undefined) {
      Transcription.encode(
        message.transcription,
        writer.uint32(58).fork(),
      ).join();
    }
    if (message.metrics !== undefined) {
      MetricsBatch.encode(message.metrics, writer.uint32(66).fork()).join();
    }
    if (message.chatMessage !== undefined) {
      ChatMessage.encode(message.chatMessage, writer.uint32(74).fork()).join();
    }
    if (message.rpcRequest !== undefined) {
      RpcRequest.encode(message.rpcRequest, writer.uint32(82).fork()).join();
    }
    if (message.rpcAck !== undefined) {
      RpcAck.encode(message.rpcAck, writer.uint32(90).fork()).join();
    }
    if (message.rpcResponse !== undefined) {
      RpcResponse.encode(message.rpcResponse, writer.uint32(98).fork()).join();
    }
    if (message.streamHeader !== undefined) {
      DataStream_Header.encode(
        message.streamHeader,
        writer.uint32(106).fork(),
      ).join();
    }
    if (message.streamChunk !== undefined) {
      DataStream_Chunk.encode(
        message.streamChunk,
        writer.uint32(114).fork(),
      ).join();
    }
    if (message.streamTrailer !== undefined) {
      DataStream_Trailer.encode(
        message.streamTrailer,
        writer.uint32(122).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataPacket {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataPacket();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.kind = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.participantIdentity = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.destinationIdentities.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.user = UserPacket.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.speaker = ActiveSpeakerUpdate.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.sipDtmf = SipDTMF.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.transcription = Transcription.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.metrics = MetricsBatch.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.chatMessage = ChatMessage.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.rpcRequest = RpcRequest.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.rpcAck = RpcAck.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.rpcResponse = RpcResponse.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.streamHeader = DataStream_Header.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.streamChunk = DataStream_Chunk.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.streamTrailer = DataStream_Trailer.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataPacket {
    return {
      $type: DataPacket.$type,
      kind: isSet(object.kind) ? dataPacket_KindFromJSON(object.kind) : 0,
      participantIdentity: isSet(object.participantIdentity)
        ? globalThis.String(object.participantIdentity)
        : "",
      destinationIdentities: globalThis.Array.isArray(
        object?.destinationIdentities,
      )
        ? object.destinationIdentities.map((e: any) => globalThis.String(e))
        : [],
      user: isSet(object.user) ? UserPacket.fromJSON(object.user) : undefined,
      speaker: isSet(object.speaker)
        ? ActiveSpeakerUpdate.fromJSON(object.speaker)
        : undefined,
      sipDtmf: isSet(object.sipDtmf)
        ? SipDTMF.fromJSON(object.sipDtmf)
        : undefined,
      transcription: isSet(object.transcription)
        ? Transcription.fromJSON(object.transcription)
        : undefined,
      metrics: isSet(object.metrics)
        ? MetricsBatch.fromJSON(object.metrics)
        : undefined,
      chatMessage: isSet(object.chatMessage)
        ? ChatMessage.fromJSON(object.chatMessage)
        : undefined,
      rpcRequest: isSet(object.rpcRequest)
        ? RpcRequest.fromJSON(object.rpcRequest)
        : undefined,
      rpcAck: isSet(object.rpcAck) ? RpcAck.fromJSON(object.rpcAck) : undefined,
      rpcResponse: isSet(object.rpcResponse)
        ? RpcResponse.fromJSON(object.rpcResponse)
        : undefined,
      streamHeader: isSet(object.streamHeader)
        ? DataStream_Header.fromJSON(object.streamHeader)
        : undefined,
      streamChunk: isSet(object.streamChunk)
        ? DataStream_Chunk.fromJSON(object.streamChunk)
        : undefined,
      streamTrailer: isSet(object.streamTrailer)
        ? DataStream_Trailer.fromJSON(object.streamTrailer)
        : undefined,
    };
  },

  toJSON(message: DataPacket): unknown {
    const obj: any = {};
    if (message.kind !== 0) {
      obj.kind = dataPacket_KindToJSON(message.kind);
    }
    if (message.participantIdentity !== "") {
      obj.participantIdentity = message.participantIdentity;
    }
    if (message.destinationIdentities?.length) {
      obj.destinationIdentities = message.destinationIdentities;
    }
    if (message.user !== undefined) {
      obj.user = UserPacket.toJSON(message.user);
    }
    if (message.speaker !== undefined) {
      obj.speaker = ActiveSpeakerUpdate.toJSON(message.speaker);
    }
    if (message.sipDtmf !== undefined) {
      obj.sipDtmf = SipDTMF.toJSON(message.sipDtmf);
    }
    if (message.transcription !== undefined) {
      obj.transcription = Transcription.toJSON(message.transcription);
    }
    if (message.metrics !== undefined) {
      obj.metrics = MetricsBatch.toJSON(message.metrics);
    }
    if (message.chatMessage !== undefined) {
      obj.chatMessage = ChatMessage.toJSON(message.chatMessage);
    }
    if (message.rpcRequest !== undefined) {
      obj.rpcRequest = RpcRequest.toJSON(message.rpcRequest);
    }
    if (message.rpcAck !== undefined) {
      obj.rpcAck = RpcAck.toJSON(message.rpcAck);
    }
    if (message.rpcResponse !== undefined) {
      obj.rpcResponse = RpcResponse.toJSON(message.rpcResponse);
    }
    if (message.streamHeader !== undefined) {
      obj.streamHeader = DataStream_Header.toJSON(message.streamHeader);
    }
    if (message.streamChunk !== undefined) {
      obj.streamChunk = DataStream_Chunk.toJSON(message.streamChunk);
    }
    if (message.streamTrailer !== undefined) {
      obj.streamTrailer = DataStream_Trailer.toJSON(message.streamTrailer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataPacket>, I>>(base?: I): DataPacket {
    return DataPacket.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataPacket>, I>>(
    object: I,
  ): DataPacket {
    const message = createBaseDataPacket();
    message.kind = object.kind ?? 0;
    message.participantIdentity = object.participantIdentity ?? "";
    message.destinationIdentities =
      object.destinationIdentities?.map((e) => e) || [];
    message.user =
      object.user !== undefined && object.user !== null
        ? UserPacket.fromPartial(object.user)
        : undefined;
    message.speaker =
      object.speaker !== undefined && object.speaker !== null
        ? ActiveSpeakerUpdate.fromPartial(object.speaker)
        : undefined;
    message.sipDtmf =
      object.sipDtmf !== undefined && object.sipDtmf !== null
        ? SipDTMF.fromPartial(object.sipDtmf)
        : undefined;
    message.transcription =
      object.transcription !== undefined && object.transcription !== null
        ? Transcription.fromPartial(object.transcription)
        : undefined;
    message.metrics =
      object.metrics !== undefined && object.metrics !== null
        ? MetricsBatch.fromPartial(object.metrics)
        : undefined;
    message.chatMessage =
      object.chatMessage !== undefined && object.chatMessage !== null
        ? ChatMessage.fromPartial(object.chatMessage)
        : undefined;
    message.rpcRequest =
      object.rpcRequest !== undefined && object.rpcRequest !== null
        ? RpcRequest.fromPartial(object.rpcRequest)
        : undefined;
    message.rpcAck =
      object.rpcAck !== undefined && object.rpcAck !== null
        ? RpcAck.fromPartial(object.rpcAck)
        : undefined;
    message.rpcResponse =
      object.rpcResponse !== undefined && object.rpcResponse !== null
        ? RpcResponse.fromPartial(object.rpcResponse)
        : undefined;
    message.streamHeader =
      object.streamHeader !== undefined && object.streamHeader !== null
        ? DataStream_Header.fromPartial(object.streamHeader)
        : undefined;
    message.streamChunk =
      object.streamChunk !== undefined && object.streamChunk !== null
        ? DataStream_Chunk.fromPartial(object.streamChunk)
        : undefined;
    message.streamTrailer =
      object.streamTrailer !== undefined && object.streamTrailer !== null
        ? DataStream_Trailer.fromPartial(object.streamTrailer)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(DataPacket.$type, DataPacket);

function createBaseActiveSpeakerUpdate(): ActiveSpeakerUpdate {
  return { $type: "livekit.ActiveSpeakerUpdate", speakers: [] };
}

export const ActiveSpeakerUpdate: MessageFns<
  ActiveSpeakerUpdate,
  "livekit.ActiveSpeakerUpdate"
> = {
  $type: "livekit.ActiveSpeakerUpdate" as const,

  encode(
    message: ActiveSpeakerUpdate,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.speakers) {
      SpeakerInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ActiveSpeakerUpdate {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActiveSpeakerUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.speakers.push(SpeakerInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActiveSpeakerUpdate {
    return {
      $type: ActiveSpeakerUpdate.$type,
      speakers: globalThis.Array.isArray(object?.speakers)
        ? object.speakers.map((e: any) => SpeakerInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ActiveSpeakerUpdate): unknown {
    const obj: any = {};
    if (message.speakers?.length) {
      obj.speakers = message.speakers.map((e) => SpeakerInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActiveSpeakerUpdate>, I>>(
    base?: I,
  ): ActiveSpeakerUpdate {
    return ActiveSpeakerUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActiveSpeakerUpdate>, I>>(
    object: I,
  ): ActiveSpeakerUpdate {
    const message = createBaseActiveSpeakerUpdate();
    message.speakers =
      object.speakers?.map((e) => SpeakerInfo.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(ActiveSpeakerUpdate.$type, ActiveSpeakerUpdate);

function createBaseSpeakerInfo(): SpeakerInfo {
  return { $type: "livekit.SpeakerInfo", sid: "", level: 0, active: false };
}

export const SpeakerInfo: MessageFns<SpeakerInfo, "livekit.SpeakerInfo"> = {
  $type: "livekit.SpeakerInfo" as const,

  encode(
    message: SpeakerInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.sid !== "") {
      writer.uint32(10).string(message.sid);
    }
    if (message.level !== 0) {
      writer.uint32(21).float(message.level);
    }
    if (message.active !== false) {
      writer.uint32(24).bool(message.active);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpeakerInfo {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpeakerInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.level = reader.float();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpeakerInfo {
    return {
      $type: SpeakerInfo.$type,
      sid: isSet(object.sid) ? globalThis.String(object.sid) : "",
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
    };
  },

  toJSON(message: SpeakerInfo): unknown {
    const obj: any = {};
    if (message.sid !== "") {
      obj.sid = message.sid;
    }
    if (message.level !== 0) {
      obj.level = message.level;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpeakerInfo>, I>>(base?: I): SpeakerInfo {
    return SpeakerInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SpeakerInfo>, I>>(
    object: I,
  ): SpeakerInfo {
    const message = createBaseSpeakerInfo();
    message.sid = object.sid ?? "";
    message.level = object.level ?? 0;
    message.active = object.active ?? false;
    return message;
  },
};

messageTypeRegistry.set(SpeakerInfo.$type, SpeakerInfo);

function createBaseUserPacket(): UserPacket {
  return {
    $type: "livekit.UserPacket",
    participantSid: "",
    participantIdentity: "",
    payload: Buffer.alloc(0),
    destinationSids: [],
    destinationIdentities: [],
    topic: undefined,
    id: undefined,
    startTime: undefined,
    endTime: undefined,
    nonce: Buffer.alloc(0),
  };
}

export const UserPacket: MessageFns<UserPacket, "livekit.UserPacket"> = {
  $type: "livekit.UserPacket" as const,

  encode(
    message: UserPacket,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.participantSid !== "") {
      writer.uint32(10).string(message.participantSid);
    }
    if (message.participantIdentity !== "") {
      writer.uint32(42).string(message.participantIdentity);
    }
    if (message.payload.length !== 0) {
      writer.uint32(18).bytes(message.payload);
    }
    for (const v of message.destinationSids) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.destinationIdentities) {
      writer.uint32(50).string(v!);
    }
    if (message.topic !== undefined) {
      writer.uint32(34).string(message.topic);
    }
    if (message.id !== undefined) {
      writer.uint32(66).string(message.id);
    }
    if (message.startTime !== undefined) {
      if (BigInt.asUintN(64, message.startTime) !== message.startTime) {
        throw new globalThis.Error(
          "value provided for field message.startTime of type uint64 too large",
        );
      }
      writer.uint32(72).uint64(message.startTime);
    }
    if (message.endTime !== undefined) {
      if (BigInt.asUintN(64, message.endTime) !== message.endTime) {
        throw new globalThis.Error(
          "value provided for field message.endTime of type uint64 too large",
        );
      }
      writer.uint32(80).uint64(message.endTime);
    }
    if (message.nonce.length !== 0) {
      writer.uint32(90).bytes(message.nonce);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserPacket {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserPacket();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.participantSid = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.participantIdentity = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.payload = Buffer.from(reader.bytes());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.destinationSids.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.destinationIdentities.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.topic = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.startTime = reader.uint64() as bigint;
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.endTime = reader.uint64() as bigint;
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.nonce = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserPacket {
    return {
      $type: UserPacket.$type,
      participantSid: isSet(object.participantSid)
        ? globalThis.String(object.participantSid)
        : "",
      participantIdentity: isSet(object.participantIdentity)
        ? globalThis.String(object.participantIdentity)
        : "",
      payload: isSet(object.payload)
        ? Buffer.from(bytesFromBase64(object.payload))
        : Buffer.alloc(0),
      destinationSids: globalThis.Array.isArray(object?.destinationSids)
        ? object.destinationSids.map((e: any) => globalThis.String(e))
        : [],
      destinationIdentities: globalThis.Array.isArray(
        object?.destinationIdentities,
      )
        ? object.destinationIdentities.map((e: any) => globalThis.String(e))
        : [],
      topic: isSet(object.topic) ? globalThis.String(object.topic) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      startTime: isSet(object.startTime) ? BigInt(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? BigInt(object.endTime) : undefined,
      nonce: isSet(object.nonce)
        ? Buffer.from(bytesFromBase64(object.nonce))
        : Buffer.alloc(0),
    };
  },

  toJSON(message: UserPacket): unknown {
    const obj: any = {};
    if (message.participantSid !== "") {
      obj.participantSid = message.participantSid;
    }
    if (message.participantIdentity !== "") {
      obj.participantIdentity = message.participantIdentity;
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    if (message.destinationSids?.length) {
      obj.destinationSids = message.destinationSids;
    }
    if (message.destinationIdentities?.length) {
      obj.destinationIdentities = message.destinationIdentities;
    }
    if (message.topic !== undefined) {
      obj.topic = message.topic;
    }
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toString();
    }
    if (message.nonce.length !== 0) {
      obj.nonce = base64FromBytes(message.nonce);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserPacket>, I>>(base?: I): UserPacket {
    return UserPacket.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserPacket>, I>>(
    object: I,
  ): UserPacket {
    const message = createBaseUserPacket();
    message.participantSid = object.participantSid ?? "";
    message.participantIdentity = object.participantIdentity ?? "";
    message.payload = object.payload ?? Buffer.alloc(0);
    message.destinationSids = object.destinationSids?.map((e) => e) || [];
    message.destinationIdentities =
      object.destinationIdentities?.map((e) => e) || [];
    message.topic = object.topic ?? undefined;
    message.id = object.id ?? undefined;
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.nonce = object.nonce ?? Buffer.alloc(0);
    return message;
  },
};

messageTypeRegistry.set(UserPacket.$type, UserPacket);

function createBaseSipDTMF(): SipDTMF {
  return { $type: "livekit.SipDTMF", code: 0, digit: "" };
}

export const SipDTMF: MessageFns<SipDTMF, "livekit.SipDTMF"> = {
  $type: "livekit.SipDTMF" as const,

  encode(
    message: SipDTMF,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(24).uint32(message.code);
    }
    if (message.digit !== "") {
      writer.uint32(34).string(message.digit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SipDTMF {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSipDTMF();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.code = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.digit = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SipDTMF {
    return {
      $type: SipDTMF.$type,
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      digit: isSet(object.digit) ? globalThis.String(object.digit) : "",
    };
  },

  toJSON(message: SipDTMF): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.digit !== "") {
      obj.digit = message.digit;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SipDTMF>, I>>(base?: I): SipDTMF {
    return SipDTMF.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SipDTMF>, I>>(object: I): SipDTMF {
    const message = createBaseSipDTMF();
    message.code = object.code ?? 0;
    message.digit = object.digit ?? "";
    return message;
  },
};

messageTypeRegistry.set(SipDTMF.$type, SipDTMF);

function createBaseTranscription(): Transcription {
  return {
    $type: "livekit.Transcription",
    transcribedParticipantIdentity: "",
    trackId: "",
    segments: [],
  };
}

export const Transcription: MessageFns<Transcription, "livekit.Transcription"> =
  {
    $type: "livekit.Transcription" as const,

    encode(
      message: Transcription,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.transcribedParticipantIdentity !== "") {
        writer.uint32(18).string(message.transcribedParticipantIdentity);
      }
      if (message.trackId !== "") {
        writer.uint32(26).string(message.trackId);
      }
      for (const v of message.segments) {
        TranscriptionSegment.encode(v!, writer.uint32(34).fork()).join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): Transcription {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      const end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseTranscription();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.transcribedParticipantIdentity = reader.string();
            continue;
          }
          case 3: {
            if (tag !== 26) {
              break;
            }

            message.trackId = reader.string();
            continue;
          }
          case 4: {
            if (tag !== 34) {
              break;
            }

            message.segments.push(
              TranscriptionSegment.decode(reader, reader.uint32()),
            );
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): Transcription {
      return {
        $type: Transcription.$type,
        transcribedParticipantIdentity: isSet(
          object.transcribedParticipantIdentity,
        )
          ? globalThis.String(object.transcribedParticipantIdentity)
          : "",
        trackId: isSet(object.trackId) ? globalThis.String(object.trackId) : "",
        segments: globalThis.Array.isArray(object?.segments)
          ? object.segments.map((e: any) => TranscriptionSegment.fromJSON(e))
          : [],
      };
    },

    toJSON(message: Transcription): unknown {
      const obj: any = {};
      if (message.transcribedParticipantIdentity !== "") {
        obj.transcribedParticipantIdentity =
          message.transcribedParticipantIdentity;
      }
      if (message.trackId !== "") {
        obj.trackId = message.trackId;
      }
      if (message.segments?.length) {
        obj.segments = message.segments.map((e) =>
          TranscriptionSegment.toJSON(e),
        );
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<Transcription>, I>>(
      base?: I,
    ): Transcription {
      return Transcription.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<Transcription>, I>>(
      object: I,
    ): Transcription {
      const message = createBaseTranscription();
      message.transcribedParticipantIdentity =
        object.transcribedParticipantIdentity ?? "";
      message.trackId = object.trackId ?? "";
      message.segments =
        object.segments?.map((e) => TranscriptionSegment.fromPartial(e)) || [];
      return message;
    },
  };

messageTypeRegistry.set(Transcription.$type, Transcription);

function createBaseTranscriptionSegment(): TranscriptionSegment {
  return {
    $type: "livekit.TranscriptionSegment",
    id: "",
    text: "",
    startTime: 0n,
    endTime: 0n,
    final: false,
    language: "",
  };
}

export const TranscriptionSegment: MessageFns<
  TranscriptionSegment,
  "livekit.TranscriptionSegment"
> = {
  $type: "livekit.TranscriptionSegment" as const,

  encode(
    message: TranscriptionSegment,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    if (message.startTime !== 0n) {
      if (BigInt.asUintN(64, message.startTime) !== message.startTime) {
        throw new globalThis.Error(
          "value provided for field message.startTime of type uint64 too large",
        );
      }
      writer.uint32(24).uint64(message.startTime);
    }
    if (message.endTime !== 0n) {
      if (BigInt.asUintN(64, message.endTime) !== message.endTime) {
        throw new globalThis.Error(
          "value provided for field message.endTime of type uint64 too large",
        );
      }
      writer.uint32(32).uint64(message.endTime);
    }
    if (message.final !== false) {
      writer.uint32(40).bool(message.final);
    }
    if (message.language !== "") {
      writer.uint32(50).string(message.language);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): TranscriptionSegment {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranscriptionSegment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.startTime = reader.uint64() as bigint;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.endTime = reader.uint64() as bigint;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.final = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.language = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranscriptionSegment {
    return {
      $type: TranscriptionSegment.$type,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      startTime: isSet(object.startTime) ? BigInt(object.startTime) : 0n,
      endTime: isSet(object.endTime) ? BigInt(object.endTime) : 0n,
      final: isSet(object.final) ? globalThis.Boolean(object.final) : false,
      language: isSet(object.language)
        ? globalThis.String(object.language)
        : "",
    };
  },

  toJSON(message: TranscriptionSegment): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.startTime !== 0n) {
      obj.startTime = message.startTime.toString();
    }
    if (message.endTime !== 0n) {
      obj.endTime = message.endTime.toString();
    }
    if (message.final !== false) {
      obj.final = message.final;
    }
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TranscriptionSegment>, I>>(
    base?: I,
  ): TranscriptionSegment {
    return TranscriptionSegment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TranscriptionSegment>, I>>(
    object: I,
  ): TranscriptionSegment {
    const message = createBaseTranscriptionSegment();
    message.id = object.id ?? "";
    message.text = object.text ?? "";
    message.startTime = object.startTime ?? 0n;
    message.endTime = object.endTime ?? 0n;
    message.final = object.final ?? false;
    message.language = object.language ?? "";
    return message;
  },
};

messageTypeRegistry.set(TranscriptionSegment.$type, TranscriptionSegment);

function createBaseChatMessage(): ChatMessage {
  return {
    $type: "livekit.ChatMessage",
    id: "",
    timestamp: 0n,
    editTimestamp: undefined,
    message: "",
    deleted: false,
    generated: false,
  };
}

export const ChatMessage: MessageFns<ChatMessage, "livekit.ChatMessage"> = {
  $type: "livekit.ChatMessage" as const,

  encode(
    message: ChatMessage,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.timestamp !== 0n) {
      if (BigInt.asIntN(64, message.timestamp) !== message.timestamp) {
        throw new globalThis.Error(
          "value provided for field message.timestamp of type int64 too large",
        );
      }
      writer.uint32(16).int64(message.timestamp);
    }
    if (message.editTimestamp !== undefined) {
      if (BigInt.asIntN(64, message.editTimestamp) !== message.editTimestamp) {
        throw new globalThis.Error(
          "value provided for field message.editTimestamp of type int64 too large",
        );
      }
      writer.uint32(24).int64(message.editTimestamp);
    }
    if (message.message !== "") {
      writer.uint32(34).string(message.message);
    }
    if (message.deleted !== false) {
      writer.uint32(40).bool(message.deleted);
    }
    if (message.generated !== false) {
      writer.uint32(48).bool(message.generated);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatMessage {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestamp = reader.int64() as bigint;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.editTimestamp = reader.int64() as bigint;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.deleted = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.generated = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatMessage {
    return {
      $type: ChatMessage.$type,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      timestamp: isSet(object.timestamp) ? BigInt(object.timestamp) : 0n,
      editTimestamp: isSet(object.editTimestamp)
        ? BigInt(object.editTimestamp)
        : undefined,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      deleted: isSet(object.deleted)
        ? globalThis.Boolean(object.deleted)
        : false,
      generated: isSet(object.generated)
        ? globalThis.Boolean(object.generated)
        : false,
    };
  },

  toJSON(message: ChatMessage): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.timestamp !== 0n) {
      obj.timestamp = message.timestamp.toString();
    }
    if (message.editTimestamp !== undefined) {
      obj.editTimestamp = message.editTimestamp.toString();
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.deleted !== false) {
      obj.deleted = message.deleted;
    }
    if (message.generated !== false) {
      obj.generated = message.generated;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChatMessage>, I>>(base?: I): ChatMessage {
    return ChatMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChatMessage>, I>>(
    object: I,
  ): ChatMessage {
    const message = createBaseChatMessage();
    message.id = object.id ?? "";
    message.timestamp = object.timestamp ?? 0n;
    message.editTimestamp = object.editTimestamp ?? undefined;
    message.message = object.message ?? "";
    message.deleted = object.deleted ?? false;
    message.generated = object.generated ?? false;
    return message;
  },
};

messageTypeRegistry.set(ChatMessage.$type, ChatMessage);

function createBaseRpcRequest(): RpcRequest {
  return {
    $type: "livekit.RpcRequest",
    id: "",
    method: "",
    payload: "",
    responseTimeoutMs: 0,
    version: 0,
  };
}

export const RpcRequest: MessageFns<RpcRequest, "livekit.RpcRequest"> = {
  $type: "livekit.RpcRequest" as const,

  encode(
    message: RpcRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.method !== "") {
      writer.uint32(18).string(message.method);
    }
    if (message.payload !== "") {
      writer.uint32(26).string(message.payload);
    }
    if (message.responseTimeoutMs !== 0) {
      writer.uint32(32).uint32(message.responseTimeoutMs);
    }
    if (message.version !== 0) {
      writer.uint32(40).uint32(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RpcRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRpcRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.method = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.payload = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.responseTimeoutMs = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.version = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RpcRequest {
    return {
      $type: RpcRequest.$type,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      method: isSet(object.method) ? globalThis.String(object.method) : "",
      payload: isSet(object.payload) ? globalThis.String(object.payload) : "",
      responseTimeoutMs: isSet(object.responseTimeoutMs)
        ? globalThis.Number(object.responseTimeoutMs)
        : 0,
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
    };
  },

  toJSON(message: RpcRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.method !== "") {
      obj.method = message.method;
    }
    if (message.payload !== "") {
      obj.payload = message.payload;
    }
    if (message.responseTimeoutMs !== 0) {
      obj.responseTimeoutMs = Math.round(message.responseTimeoutMs);
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RpcRequest>, I>>(base?: I): RpcRequest {
    return RpcRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RpcRequest>, I>>(
    object: I,
  ): RpcRequest {
    const message = createBaseRpcRequest();
    message.id = object.id ?? "";
    message.method = object.method ?? "";
    message.payload = object.payload ?? "";
    message.responseTimeoutMs = object.responseTimeoutMs ?? 0;
    message.version = object.version ?? 0;
    return message;
  },
};

messageTypeRegistry.set(RpcRequest.$type, RpcRequest);

function createBaseRpcAck(): RpcAck {
  return { $type: "livekit.RpcAck", requestId: "" };
}

export const RpcAck: MessageFns<RpcAck, "livekit.RpcAck"> = {
  $type: "livekit.RpcAck" as const,

  encode(
    message: RpcAck,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RpcAck {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRpcAck();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RpcAck {
    return {
      $type: RpcAck.$type,
      requestId: isSet(object.requestId)
        ? globalThis.String(object.requestId)
        : "",
    };
  },

  toJSON(message: RpcAck): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RpcAck>, I>>(base?: I): RpcAck {
    return RpcAck.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RpcAck>, I>>(object: I): RpcAck {
    const message = createBaseRpcAck();
    message.requestId = object.requestId ?? "";
    return message;
  },
};

messageTypeRegistry.set(RpcAck.$type, RpcAck);

function createBaseRpcResponse(): RpcResponse {
  return {
    $type: "livekit.RpcResponse",
    requestId: "",
    payload: undefined,
    error: undefined,
  };
}

export const RpcResponse: MessageFns<RpcResponse, "livekit.RpcResponse"> = {
  $type: "livekit.RpcResponse" as const,

  encode(
    message: RpcResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.payload !== undefined) {
      writer.uint32(18).string(message.payload);
    }
    if (message.error !== undefined) {
      RpcError.encode(message.error, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RpcResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRpcResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.payload = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = RpcError.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RpcResponse {
    return {
      $type: RpcResponse.$type,
      requestId: isSet(object.requestId)
        ? globalThis.String(object.requestId)
        : "",
      payload: isSet(object.payload)
        ? globalThis.String(object.payload)
        : undefined,
      error: isSet(object.error) ? RpcError.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: RpcResponse): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.payload !== undefined) {
      obj.payload = message.payload;
    }
    if (message.error !== undefined) {
      obj.error = RpcError.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RpcResponse>, I>>(base?: I): RpcResponse {
    return RpcResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RpcResponse>, I>>(
    object: I,
  ): RpcResponse {
    const message = createBaseRpcResponse();
    message.requestId = object.requestId ?? "";
    message.payload = object.payload ?? undefined;
    message.error =
      object.error !== undefined && object.error !== null
        ? RpcError.fromPartial(object.error)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(RpcResponse.$type, RpcResponse);

function createBaseRpcError(): RpcError {
  return { $type: "livekit.RpcError", code: 0, message: "", data: "" };
}

export const RpcError: MessageFns<RpcError, "livekit.RpcError"> = {
  $type: "livekit.RpcError" as const,

  encode(
    message: RpcError,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).uint32(message.code);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.data !== "") {
      writer.uint32(26).string(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RpcError {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRpcError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RpcError {
    return {
      $type: RpcError.$type,
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      data: isSet(object.data) ? globalThis.String(object.data) : "",
    };
  },

  toJSON(message: RpcError): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RpcError>, I>>(base?: I): RpcError {
    return RpcError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RpcError>, I>>(object: I): RpcError {
    const message = createBaseRpcError();
    message.code = object.code ?? 0;
    message.message = object.message ?? "";
    message.data = object.data ?? "";
    return message;
  },
};

messageTypeRegistry.set(RpcError.$type, RpcError);

function createBaseParticipantTracks(): ParticipantTracks {
  return {
    $type: "livekit.ParticipantTracks",
    participantSid: "",
    trackSids: [],
  };
}

export const ParticipantTracks: MessageFns<
  ParticipantTracks,
  "livekit.ParticipantTracks"
> = {
  $type: "livekit.ParticipantTracks" as const,

  encode(
    message: ParticipantTracks,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.participantSid !== "") {
      writer.uint32(10).string(message.participantSid);
    }
    for (const v of message.trackSids) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParticipantTracks {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParticipantTracks();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.participantSid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.trackSids.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParticipantTracks {
    return {
      $type: ParticipantTracks.$type,
      participantSid: isSet(object.participantSid)
        ? globalThis.String(object.participantSid)
        : "",
      trackSids: globalThis.Array.isArray(object?.trackSids)
        ? object.trackSids.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ParticipantTracks): unknown {
    const obj: any = {};
    if (message.participantSid !== "") {
      obj.participantSid = message.participantSid;
    }
    if (message.trackSids?.length) {
      obj.trackSids = message.trackSids;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParticipantTracks>, I>>(
    base?: I,
  ): ParticipantTracks {
    return ParticipantTracks.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParticipantTracks>, I>>(
    object: I,
  ): ParticipantTracks {
    const message = createBaseParticipantTracks();
    message.participantSid = object.participantSid ?? "";
    message.trackSids = object.trackSids?.map((e) => e) || [];
    return message;
  },
};

messageTypeRegistry.set(ParticipantTracks.$type, ParticipantTracks);

function createBaseServerInfo(): ServerInfo {
  return {
    $type: "livekit.ServerInfo",
    edition: 0,
    version: "",
    protocol: 0,
    region: "",
    nodeId: "",
    debugInfo: "",
    agentProtocol: 0,
  };
}

export const ServerInfo: MessageFns<ServerInfo, "livekit.ServerInfo"> = {
  $type: "livekit.ServerInfo" as const,

  encode(
    message: ServerInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.edition !== 0) {
      writer.uint32(8).int32(message.edition);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.protocol !== 0) {
      writer.uint32(24).int32(message.protocol);
    }
    if (message.region !== "") {
      writer.uint32(34).string(message.region);
    }
    if (message.nodeId !== "") {
      writer.uint32(42).string(message.nodeId);
    }
    if (message.debugInfo !== "") {
      writer.uint32(50).string(message.debugInfo);
    }
    if (message.agentProtocol !== 0) {
      writer.uint32(56).int32(message.agentProtocol);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerInfo {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.edition = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.protocol = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.region = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.nodeId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.debugInfo = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.agentProtocol = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerInfo {
    return {
      $type: ServerInfo.$type,
      edition: isSet(object.edition)
        ? serverInfo_EditionFromJSON(object.edition)
        : 0,
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      protocol: isSet(object.protocol) ? globalThis.Number(object.protocol) : 0,
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      nodeId: isSet(object.nodeId) ? globalThis.String(object.nodeId) : "",
      debugInfo: isSet(object.debugInfo)
        ? globalThis.String(object.debugInfo)
        : "",
      agentProtocol: isSet(object.agentProtocol)
        ? globalThis.Number(object.agentProtocol)
        : 0,
    };
  },

  toJSON(message: ServerInfo): unknown {
    const obj: any = {};
    if (message.edition !== 0) {
      obj.edition = serverInfo_EditionToJSON(message.edition);
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.protocol !== 0) {
      obj.protocol = Math.round(message.protocol);
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.nodeId !== "") {
      obj.nodeId = message.nodeId;
    }
    if (message.debugInfo !== "") {
      obj.debugInfo = message.debugInfo;
    }
    if (message.agentProtocol !== 0) {
      obj.agentProtocol = Math.round(message.agentProtocol);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerInfo>, I>>(base?: I): ServerInfo {
    return ServerInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerInfo>, I>>(
    object: I,
  ): ServerInfo {
    const message = createBaseServerInfo();
    message.edition = object.edition ?? 0;
    message.version = object.version ?? "";
    message.protocol = object.protocol ?? 0;
    message.region = object.region ?? "";
    message.nodeId = object.nodeId ?? "";
    message.debugInfo = object.debugInfo ?? "";
    message.agentProtocol = object.agentProtocol ?? 0;
    return message;
  },
};

messageTypeRegistry.set(ServerInfo.$type, ServerInfo);

function createBaseClientInfo(): ClientInfo {
  return {
    $type: "livekit.ClientInfo",
    sdk: 0,
    version: "",
    protocol: 0,
    os: "",
    osVersion: "",
    deviceModel: "",
    browser: "",
    browserVersion: "",
    address: "",
    network: "",
    otherSdks: "",
  };
}

export const ClientInfo: MessageFns<ClientInfo, "livekit.ClientInfo"> = {
  $type: "livekit.ClientInfo" as const,

  encode(
    message: ClientInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.sdk !== 0) {
      writer.uint32(8).int32(message.sdk);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.protocol !== 0) {
      writer.uint32(24).int32(message.protocol);
    }
    if (message.os !== "") {
      writer.uint32(34).string(message.os);
    }
    if (message.osVersion !== "") {
      writer.uint32(42).string(message.osVersion);
    }
    if (message.deviceModel !== "") {
      writer.uint32(50).string(message.deviceModel);
    }
    if (message.browser !== "") {
      writer.uint32(58).string(message.browser);
    }
    if (message.browserVersion !== "") {
      writer.uint32(66).string(message.browserVersion);
    }
    if (message.address !== "") {
      writer.uint32(74).string(message.address);
    }
    if (message.network !== "") {
      writer.uint32(82).string(message.network);
    }
    if (message.otherSdks !== "") {
      writer.uint32(90).string(message.otherSdks);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientInfo {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.sdk = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.protocol = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.os = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.osVersion = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.deviceModel = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.browser = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.browserVersion = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.network = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.otherSdks = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientInfo {
    return {
      $type: ClientInfo.$type,
      sdk: isSet(object.sdk) ? clientInfo_SDKFromJSON(object.sdk) : 0,
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      protocol: isSet(object.protocol) ? globalThis.Number(object.protocol) : 0,
      os: isSet(object.os) ? globalThis.String(object.os) : "",
      osVersion: isSet(object.osVersion)
        ? globalThis.String(object.osVersion)
        : "",
      deviceModel: isSet(object.deviceModel)
        ? globalThis.String(object.deviceModel)
        : "",
      browser: isSet(object.browser) ? globalThis.String(object.browser) : "",
      browserVersion: isSet(object.browserVersion)
        ? globalThis.String(object.browserVersion)
        : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      network: isSet(object.network) ? globalThis.String(object.network) : "",
      otherSdks: isSet(object.otherSdks)
        ? globalThis.String(object.otherSdks)
        : "",
    };
  },

  toJSON(message: ClientInfo): unknown {
    const obj: any = {};
    if (message.sdk !== 0) {
      obj.sdk = clientInfo_SDKToJSON(message.sdk);
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.protocol !== 0) {
      obj.protocol = Math.round(message.protocol);
    }
    if (message.os !== "") {
      obj.os = message.os;
    }
    if (message.osVersion !== "") {
      obj.osVersion = message.osVersion;
    }
    if (message.deviceModel !== "") {
      obj.deviceModel = message.deviceModel;
    }
    if (message.browser !== "") {
      obj.browser = message.browser;
    }
    if (message.browserVersion !== "") {
      obj.browserVersion = message.browserVersion;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.network !== "") {
      obj.network = message.network;
    }
    if (message.otherSdks !== "") {
      obj.otherSdks = message.otherSdks;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientInfo>, I>>(base?: I): ClientInfo {
    return ClientInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientInfo>, I>>(
    object: I,
  ): ClientInfo {
    const message = createBaseClientInfo();
    message.sdk = object.sdk ?? 0;
    message.version = object.version ?? "";
    message.protocol = object.protocol ?? 0;
    message.os = object.os ?? "";
    message.osVersion = object.osVersion ?? "";
    message.deviceModel = object.deviceModel ?? "";
    message.browser = object.browser ?? "";
    message.browserVersion = object.browserVersion ?? "";
    message.address = object.address ?? "";
    message.network = object.network ?? "";
    message.otherSdks = object.otherSdks ?? "";
    return message;
  },
};

messageTypeRegistry.set(ClientInfo.$type, ClientInfo);

function createBaseClientConfiguration(): ClientConfiguration {
  return {
    $type: "livekit.ClientConfiguration",
    video: undefined,
    screen: undefined,
    resumeConnection: 0,
    disabledCodecs: undefined,
    forceRelay: 0,
  };
}

export const ClientConfiguration: MessageFns<
  ClientConfiguration,
  "livekit.ClientConfiguration"
> = {
  $type: "livekit.ClientConfiguration" as const,

  encode(
    message: ClientConfiguration,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.video !== undefined) {
      VideoConfiguration.encode(message.video, writer.uint32(10).fork()).join();
    }
    if (message.screen !== undefined) {
      VideoConfiguration.encode(
        message.screen,
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.resumeConnection !== 0) {
      writer.uint32(24).int32(message.resumeConnection);
    }
    if (message.disabledCodecs !== undefined) {
      DisabledCodecs.encode(
        message.disabledCodecs,
        writer.uint32(34).fork(),
      ).join();
    }
    if (message.forceRelay !== 0) {
      writer.uint32(40).int32(message.forceRelay);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ClientConfiguration {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientConfiguration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.video = VideoConfiguration.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.screen = VideoConfiguration.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.resumeConnection = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.disabledCodecs = DisabledCodecs.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.forceRelay = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientConfiguration {
    return {
      $type: ClientConfiguration.$type,
      video: isSet(object.video)
        ? VideoConfiguration.fromJSON(object.video)
        : undefined,
      screen: isSet(object.screen)
        ? VideoConfiguration.fromJSON(object.screen)
        : undefined,
      resumeConnection: isSet(object.resumeConnection)
        ? clientConfigSettingFromJSON(object.resumeConnection)
        : 0,
      disabledCodecs: isSet(object.disabledCodecs)
        ? DisabledCodecs.fromJSON(object.disabledCodecs)
        : undefined,
      forceRelay: isSet(object.forceRelay)
        ? clientConfigSettingFromJSON(object.forceRelay)
        : 0,
    };
  },

  toJSON(message: ClientConfiguration): unknown {
    const obj: any = {};
    if (message.video !== undefined) {
      obj.video = VideoConfiguration.toJSON(message.video);
    }
    if (message.screen !== undefined) {
      obj.screen = VideoConfiguration.toJSON(message.screen);
    }
    if (message.resumeConnection !== 0) {
      obj.resumeConnection = clientConfigSettingToJSON(
        message.resumeConnection,
      );
    }
    if (message.disabledCodecs !== undefined) {
      obj.disabledCodecs = DisabledCodecs.toJSON(message.disabledCodecs);
    }
    if (message.forceRelay !== 0) {
      obj.forceRelay = clientConfigSettingToJSON(message.forceRelay);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientConfiguration>, I>>(
    base?: I,
  ): ClientConfiguration {
    return ClientConfiguration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientConfiguration>, I>>(
    object: I,
  ): ClientConfiguration {
    const message = createBaseClientConfiguration();
    message.video =
      object.video !== undefined && object.video !== null
        ? VideoConfiguration.fromPartial(object.video)
        : undefined;
    message.screen =
      object.screen !== undefined && object.screen !== null
        ? VideoConfiguration.fromPartial(object.screen)
        : undefined;
    message.resumeConnection = object.resumeConnection ?? 0;
    message.disabledCodecs =
      object.disabledCodecs !== undefined && object.disabledCodecs !== null
        ? DisabledCodecs.fromPartial(object.disabledCodecs)
        : undefined;
    message.forceRelay = object.forceRelay ?? 0;
    return message;
  },
};

messageTypeRegistry.set(ClientConfiguration.$type, ClientConfiguration);

function createBaseVideoConfiguration(): VideoConfiguration {
  return { $type: "livekit.VideoConfiguration", hardwareEncoder: 0 };
}

export const VideoConfiguration: MessageFns<
  VideoConfiguration,
  "livekit.VideoConfiguration"
> = {
  $type: "livekit.VideoConfiguration" as const,

  encode(
    message: VideoConfiguration,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.hardwareEncoder !== 0) {
      writer.uint32(8).int32(message.hardwareEncoder);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): VideoConfiguration {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoConfiguration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.hardwareEncoder = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoConfiguration {
    return {
      $type: VideoConfiguration.$type,
      hardwareEncoder: isSet(object.hardwareEncoder)
        ? clientConfigSettingFromJSON(object.hardwareEncoder)
        : 0,
    };
  },

  toJSON(message: VideoConfiguration): unknown {
    const obj: any = {};
    if (message.hardwareEncoder !== 0) {
      obj.hardwareEncoder = clientConfigSettingToJSON(message.hardwareEncoder);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VideoConfiguration>, I>>(
    base?: I,
  ): VideoConfiguration {
    return VideoConfiguration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VideoConfiguration>, I>>(
    object: I,
  ): VideoConfiguration {
    const message = createBaseVideoConfiguration();
    message.hardwareEncoder = object.hardwareEncoder ?? 0;
    return message;
  },
};

messageTypeRegistry.set(VideoConfiguration.$type, VideoConfiguration);

function createBaseDisabledCodecs(): DisabledCodecs {
  return { $type: "livekit.DisabledCodecs", codecs: [], publish: [] };
}

export const DisabledCodecs: MessageFns<
  DisabledCodecs,
  "livekit.DisabledCodecs"
> = {
  $type: "livekit.DisabledCodecs" as const,

  encode(
    message: DisabledCodecs,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.codecs) {
      Codec.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.publish) {
      Codec.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisabledCodecs {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisabledCodecs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.codecs.push(Codec.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.publish.push(Codec.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisabledCodecs {
    return {
      $type: DisabledCodecs.$type,
      codecs: globalThis.Array.isArray(object?.codecs)
        ? object.codecs.map((e: any) => Codec.fromJSON(e))
        : [],
      publish: globalThis.Array.isArray(object?.publish)
        ? object.publish.map((e: any) => Codec.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DisabledCodecs): unknown {
    const obj: any = {};
    if (message.codecs?.length) {
      obj.codecs = message.codecs.map((e) => Codec.toJSON(e));
    }
    if (message.publish?.length) {
      obj.publish = message.publish.map((e) => Codec.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DisabledCodecs>, I>>(
    base?: I,
  ): DisabledCodecs {
    return DisabledCodecs.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DisabledCodecs>, I>>(
    object: I,
  ): DisabledCodecs {
    const message = createBaseDisabledCodecs();
    message.codecs = object.codecs?.map((e) => Codec.fromPartial(e)) || [];
    message.publish = object.publish?.map((e) => Codec.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(DisabledCodecs.$type, DisabledCodecs);

function createBaseRTPDrift(): RTPDrift {
  return {
    $type: "livekit.RTPDrift",
    startTime: undefined,
    endTime: undefined,
    duration: 0,
    startTimestamp: 0n,
    endTimestamp: 0n,
    rtpClockTicks: 0n,
    driftSamples: 0n,
    driftMs: 0,
    clockRate: 0,
  };
}

export const RTPDrift: MessageFns<RTPDrift, "livekit.RTPDrift"> = {
  $type: "livekit.RTPDrift" as const,

  encode(
    message: RTPDrift,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.startTime !== undefined) {
      Timestamp.encode(
        toTimestamp(message.startTime),
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(
        toTimestamp(message.endTime),
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.duration !== 0) {
      writer.uint32(25).double(message.duration);
    }
    if (message.startTimestamp !== 0n) {
      if (
        BigInt.asUintN(64, message.startTimestamp) !== message.startTimestamp
      ) {
        throw new globalThis.Error(
          "value provided for field message.startTimestamp of type uint64 too large",
        );
      }
      writer.uint32(32).uint64(message.startTimestamp);
    }
    if (message.endTimestamp !== 0n) {
      if (BigInt.asUintN(64, message.endTimestamp) !== message.endTimestamp) {
        throw new globalThis.Error(
          "value provided for field message.endTimestamp of type uint64 too large",
        );
      }
      writer.uint32(40).uint64(message.endTimestamp);
    }
    if (message.rtpClockTicks !== 0n) {
      if (BigInt.asUintN(64, message.rtpClockTicks) !== message.rtpClockTicks) {
        throw new globalThis.Error(
          "value provided for field message.rtpClockTicks of type uint64 too large",
        );
      }
      writer.uint32(48).uint64(message.rtpClockTicks);
    }
    if (message.driftSamples !== 0n) {
      if (BigInt.asIntN(64, message.driftSamples) !== message.driftSamples) {
        throw new globalThis.Error(
          "value provided for field message.driftSamples of type int64 too large",
        );
      }
      writer.uint32(56).int64(message.driftSamples);
    }
    if (message.driftMs !== 0) {
      writer.uint32(65).double(message.driftMs);
    }
    if (message.clockRate !== 0) {
      writer.uint32(73).double(message.clockRate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RTPDrift {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTPDrift();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.startTime = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.duration = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.startTimestamp = reader.uint64() as bigint;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.endTimestamp = reader.uint64() as bigint;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.rtpClockTicks = reader.uint64() as bigint;
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.driftSamples = reader.int64() as bigint;
          continue;
        }
        case 8: {
          if (tag !== 65) {
            break;
          }

          message.driftMs = reader.double();
          continue;
        }
        case 9: {
          if (tag !== 73) {
            break;
          }

          message.clockRate = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTPDrift {
    return {
      $type: RTPDrift.$type,
      startTime: isSet(object.startTime)
        ? fromJsonTimestamp(object.startTime)
        : undefined,
      endTime: isSet(object.endTime)
        ? fromJsonTimestamp(object.endTime)
        : undefined,
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
      startTimestamp: isSet(object.startTimestamp)
        ? BigInt(object.startTimestamp)
        : 0n,
      endTimestamp: isSet(object.endTimestamp)
        ? BigInt(object.endTimestamp)
        : 0n,
      rtpClockTicks: isSet(object.rtpClockTicks)
        ? BigInt(object.rtpClockTicks)
        : 0n,
      driftSamples: isSet(object.driftSamples)
        ? BigInt(object.driftSamples)
        : 0n,
      driftMs: isSet(object.driftMs) ? globalThis.Number(object.driftMs) : 0,
      clockRate: isSet(object.clockRate)
        ? globalThis.Number(object.clockRate)
        : 0,
    };
  },

  toJSON(message: RTPDrift): unknown {
    const obj: any = {};
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.duration !== 0) {
      obj.duration = message.duration;
    }
    if (message.startTimestamp !== 0n) {
      obj.startTimestamp = message.startTimestamp.toString();
    }
    if (message.endTimestamp !== 0n) {
      obj.endTimestamp = message.endTimestamp.toString();
    }
    if (message.rtpClockTicks !== 0n) {
      obj.rtpClockTicks = message.rtpClockTicks.toString();
    }
    if (message.driftSamples !== 0n) {
      obj.driftSamples = message.driftSamples.toString();
    }
    if (message.driftMs !== 0) {
      obj.driftMs = message.driftMs;
    }
    if (message.clockRate !== 0) {
      obj.clockRate = message.clockRate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RTPDrift>, I>>(base?: I): RTPDrift {
    return RTPDrift.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RTPDrift>, I>>(object: I): RTPDrift {
    const message = createBaseRTPDrift();
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.duration = object.duration ?? 0;
    message.startTimestamp = object.startTimestamp ?? 0n;
    message.endTimestamp = object.endTimestamp ?? 0n;
    message.rtpClockTicks = object.rtpClockTicks ?? 0n;
    message.driftSamples = object.driftSamples ?? 0n;
    message.driftMs = object.driftMs ?? 0;
    message.clockRate = object.clockRate ?? 0;
    return message;
  },
};

messageTypeRegistry.set(RTPDrift.$type, RTPDrift);

function createBaseRTPStats(): RTPStats {
  return {
    $type: "livekit.RTPStats",
    startTime: undefined,
    endTime: undefined,
    duration: 0,
    packets: 0,
    packetRate: 0,
    bytes: 0n,
    headerBytes: 0n,
    bitrate: 0,
    packetsLost: 0,
    packetLossRate: 0,
    packetLossPercentage: 0,
    packetsDuplicate: 0,
    packetDuplicateRate: 0,
    bytesDuplicate: 0n,
    headerBytesDuplicate: 0n,
    bitrateDuplicate: 0,
    packetsPadding: 0,
    packetPaddingRate: 0,
    bytesPadding: 0n,
    headerBytesPadding: 0n,
    bitratePadding: 0,
    packetsOutOfOrder: 0,
    frames: 0,
    frameRate: 0,
    jitterCurrent: 0,
    jitterMax: 0,
    gapHistogram: {},
    nacks: 0,
    nackAcks: 0,
    nackMisses: 0,
    nackRepeated: 0,
    plis: 0,
    lastPli: undefined,
    firs: 0,
    lastFir: undefined,
    rttCurrent: 0,
    rttMax: 0,
    keyFrames: 0,
    lastKeyFrame: undefined,
    layerLockPlis: 0,
    lastLayerLockPli: undefined,
    packetDrift: undefined,
    ntpReportDrift: undefined,
    rebasedReportDrift: undefined,
    receivedReportDrift: undefined,
  };
}

export const RTPStats: MessageFns<RTPStats, "livekit.RTPStats"> = {
  $type: "livekit.RTPStats" as const,

  encode(
    message: RTPStats,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.startTime !== undefined) {
      Timestamp.encode(
        toTimestamp(message.startTime),
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(
        toTimestamp(message.endTime),
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.duration !== 0) {
      writer.uint32(25).double(message.duration);
    }
    if (message.packets !== 0) {
      writer.uint32(32).uint32(message.packets);
    }
    if (message.packetRate !== 0) {
      writer.uint32(41).double(message.packetRate);
    }
    if (message.bytes !== 0n) {
      if (BigInt.asUintN(64, message.bytes) !== message.bytes) {
        throw new globalThis.Error(
          "value provided for field message.bytes of type uint64 too large",
        );
      }
      writer.uint32(48).uint64(message.bytes);
    }
    if (message.headerBytes !== 0n) {
      if (BigInt.asUintN(64, message.headerBytes) !== message.headerBytes) {
        throw new globalThis.Error(
          "value provided for field message.headerBytes of type uint64 too large",
        );
      }
      writer.uint32(312).uint64(message.headerBytes);
    }
    if (message.bitrate !== 0) {
      writer.uint32(57).double(message.bitrate);
    }
    if (message.packetsLost !== 0) {
      writer.uint32(64).uint32(message.packetsLost);
    }
    if (message.packetLossRate !== 0) {
      writer.uint32(73).double(message.packetLossRate);
    }
    if (message.packetLossPercentage !== 0) {
      writer.uint32(85).float(message.packetLossPercentage);
    }
    if (message.packetsDuplicate !== 0) {
      writer.uint32(88).uint32(message.packetsDuplicate);
    }
    if (message.packetDuplicateRate !== 0) {
      writer.uint32(97).double(message.packetDuplicateRate);
    }
    if (message.bytesDuplicate !== 0n) {
      if (
        BigInt.asUintN(64, message.bytesDuplicate) !== message.bytesDuplicate
      ) {
        throw new globalThis.Error(
          "value provided for field message.bytesDuplicate of type uint64 too large",
        );
      }
      writer.uint32(104).uint64(message.bytesDuplicate);
    }
    if (message.headerBytesDuplicate !== 0n) {
      if (
        BigInt.asUintN(64, message.headerBytesDuplicate) !==
        message.headerBytesDuplicate
      ) {
        throw new globalThis.Error(
          "value provided for field message.headerBytesDuplicate of type uint64 too large",
        );
      }
      writer.uint32(320).uint64(message.headerBytesDuplicate);
    }
    if (message.bitrateDuplicate !== 0) {
      writer.uint32(113).double(message.bitrateDuplicate);
    }
    if (message.packetsPadding !== 0) {
      writer.uint32(120).uint32(message.packetsPadding);
    }
    if (message.packetPaddingRate !== 0) {
      writer.uint32(129).double(message.packetPaddingRate);
    }
    if (message.bytesPadding !== 0n) {
      if (BigInt.asUintN(64, message.bytesPadding) !== message.bytesPadding) {
        throw new globalThis.Error(
          "value provided for field message.bytesPadding of type uint64 too large",
        );
      }
      writer.uint32(136).uint64(message.bytesPadding);
    }
    if (message.headerBytesPadding !== 0n) {
      if (
        BigInt.asUintN(64, message.headerBytesPadding) !==
        message.headerBytesPadding
      ) {
        throw new globalThis.Error(
          "value provided for field message.headerBytesPadding of type uint64 too large",
        );
      }
      writer.uint32(328).uint64(message.headerBytesPadding);
    }
    if (message.bitratePadding !== 0) {
      writer.uint32(145).double(message.bitratePadding);
    }
    if (message.packetsOutOfOrder !== 0) {
      writer.uint32(152).uint32(message.packetsOutOfOrder);
    }
    if (message.frames !== 0) {
      writer.uint32(160).uint32(message.frames);
    }
    if (message.frameRate !== 0) {
      writer.uint32(169).double(message.frameRate);
    }
    if (message.jitterCurrent !== 0) {
      writer.uint32(177).double(message.jitterCurrent);
    }
    if (message.jitterMax !== 0) {
      writer.uint32(185).double(message.jitterMax);
    }
    Object.entries(message.gapHistogram).forEach(([key, value]) => {
      RTPStats_GapHistogramEntry.encode(
        { $type: "livekit.RTPStats.GapHistogramEntry", key: key as any, value },
        writer.uint32(194).fork(),
      ).join();
    });
    if (message.nacks !== 0) {
      writer.uint32(200).uint32(message.nacks);
    }
    if (message.nackAcks !== 0) {
      writer.uint32(296).uint32(message.nackAcks);
    }
    if (message.nackMisses !== 0) {
      writer.uint32(208).uint32(message.nackMisses);
    }
    if (message.nackRepeated !== 0) {
      writer.uint32(304).uint32(message.nackRepeated);
    }
    if (message.plis !== 0) {
      writer.uint32(216).uint32(message.plis);
    }
    if (message.lastPli !== undefined) {
      Timestamp.encode(
        toTimestamp(message.lastPli),
        writer.uint32(226).fork(),
      ).join();
    }
    if (message.firs !== 0) {
      writer.uint32(232).uint32(message.firs);
    }
    if (message.lastFir !== undefined) {
      Timestamp.encode(
        toTimestamp(message.lastFir),
        writer.uint32(242).fork(),
      ).join();
    }
    if (message.rttCurrent !== 0) {
      writer.uint32(248).uint32(message.rttCurrent);
    }
    if (message.rttMax !== 0) {
      writer.uint32(256).uint32(message.rttMax);
    }
    if (message.keyFrames !== 0) {
      writer.uint32(264).uint32(message.keyFrames);
    }
    if (message.lastKeyFrame !== undefined) {
      Timestamp.encode(
        toTimestamp(message.lastKeyFrame),
        writer.uint32(274).fork(),
      ).join();
    }
    if (message.layerLockPlis !== 0) {
      writer.uint32(280).uint32(message.layerLockPlis);
    }
    if (message.lastLayerLockPli !== undefined) {
      Timestamp.encode(
        toTimestamp(message.lastLayerLockPli),
        writer.uint32(290).fork(),
      ).join();
    }
    if (message.packetDrift !== undefined) {
      RTPDrift.encode(message.packetDrift, writer.uint32(354).fork()).join();
    }
    if (message.ntpReportDrift !== undefined) {
      RTPDrift.encode(message.ntpReportDrift, writer.uint32(362).fork()).join();
    }
    if (message.rebasedReportDrift !== undefined) {
      RTPDrift.encode(
        message.rebasedReportDrift,
        writer.uint32(370).fork(),
      ).join();
    }
    if (message.receivedReportDrift !== undefined) {
      RTPDrift.encode(
        message.receivedReportDrift,
        writer.uint32(378).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RTPStats {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTPStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.startTime = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.duration = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.packets = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.packetRate = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.bytes = reader.uint64() as bigint;
          continue;
        }
        case 39: {
          if (tag !== 312) {
            break;
          }

          message.headerBytes = reader.uint64() as bigint;
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.bitrate = reader.double();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.packetsLost = reader.uint32();
          continue;
        }
        case 9: {
          if (tag !== 73) {
            break;
          }

          message.packetLossRate = reader.double();
          continue;
        }
        case 10: {
          if (tag !== 85) {
            break;
          }

          message.packetLossPercentage = reader.float();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.packetsDuplicate = reader.uint32();
          continue;
        }
        case 12: {
          if (tag !== 97) {
            break;
          }

          message.packetDuplicateRate = reader.double();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.bytesDuplicate = reader.uint64() as bigint;
          continue;
        }
        case 40: {
          if (tag !== 320) {
            break;
          }

          message.headerBytesDuplicate = reader.uint64() as bigint;
          continue;
        }
        case 14: {
          if (tag !== 113) {
            break;
          }

          message.bitrateDuplicate = reader.double();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.packetsPadding = reader.uint32();
          continue;
        }
        case 16: {
          if (tag !== 129) {
            break;
          }

          message.packetPaddingRate = reader.double();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.bytesPadding = reader.uint64() as bigint;
          continue;
        }
        case 41: {
          if (tag !== 328) {
            break;
          }

          message.headerBytesPadding = reader.uint64() as bigint;
          continue;
        }
        case 18: {
          if (tag !== 145) {
            break;
          }

          message.bitratePadding = reader.double();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.packetsOutOfOrder = reader.uint32();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.frames = reader.uint32();
          continue;
        }
        case 21: {
          if (tag !== 169) {
            break;
          }

          message.frameRate = reader.double();
          continue;
        }
        case 22: {
          if (tag !== 177) {
            break;
          }

          message.jitterCurrent = reader.double();
          continue;
        }
        case 23: {
          if (tag !== 185) {
            break;
          }

          message.jitterMax = reader.double();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          const entry24 = RTPStats_GapHistogramEntry.decode(
            reader,
            reader.uint32(),
          );
          if (entry24.value !== undefined) {
            message.gapHistogram[entry24.key] = entry24.value;
          }
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.nacks = reader.uint32();
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.nackAcks = reader.uint32();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.nackMisses = reader.uint32();
          continue;
        }
        case 38: {
          if (tag !== 304) {
            break;
          }

          message.nackRepeated = reader.uint32();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.plis = reader.uint32();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.lastPli = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.firs = reader.uint32();
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.lastFir = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.rttCurrent = reader.uint32();
          continue;
        }
        case 32: {
          if (tag !== 256) {
            break;
          }

          message.rttMax = reader.uint32();
          continue;
        }
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.keyFrames = reader.uint32();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.lastKeyFrame = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 35: {
          if (tag !== 280) {
            break;
          }

          message.layerLockPlis = reader.uint32();
          continue;
        }
        case 36: {
          if (tag !== 290) {
            break;
          }

          message.lastLayerLockPli = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 44: {
          if (tag !== 354) {
            break;
          }

          message.packetDrift = RTPDrift.decode(reader, reader.uint32());
          continue;
        }
        case 45: {
          if (tag !== 362) {
            break;
          }

          message.ntpReportDrift = RTPDrift.decode(reader, reader.uint32());
          continue;
        }
        case 46: {
          if (tag !== 370) {
            break;
          }

          message.rebasedReportDrift = RTPDrift.decode(reader, reader.uint32());
          continue;
        }
        case 47: {
          if (tag !== 378) {
            break;
          }

          message.receivedReportDrift = RTPDrift.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTPStats {
    return {
      $type: RTPStats.$type,
      startTime: isSet(object.startTime)
        ? fromJsonTimestamp(object.startTime)
        : undefined,
      endTime: isSet(object.endTime)
        ? fromJsonTimestamp(object.endTime)
        : undefined,
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
      packets: isSet(object.packets) ? globalThis.Number(object.packets) : 0,
      packetRate: isSet(object.packetRate)
        ? globalThis.Number(object.packetRate)
        : 0,
      bytes: isSet(object.bytes) ? BigInt(object.bytes) : 0n,
      headerBytes: isSet(object.headerBytes) ? BigInt(object.headerBytes) : 0n,
      bitrate: isSet(object.bitrate) ? globalThis.Number(object.bitrate) : 0,
      packetsLost: isSet(object.packetsLost)
        ? globalThis.Number(object.packetsLost)
        : 0,
      packetLossRate: isSet(object.packetLossRate)
        ? globalThis.Number(object.packetLossRate)
        : 0,
      packetLossPercentage: isSet(object.packetLossPercentage)
        ? globalThis.Number(object.packetLossPercentage)
        : 0,
      packetsDuplicate: isSet(object.packetsDuplicate)
        ? globalThis.Number(object.packetsDuplicate)
        : 0,
      packetDuplicateRate: isSet(object.packetDuplicateRate)
        ? globalThis.Number(object.packetDuplicateRate)
        : 0,
      bytesDuplicate: isSet(object.bytesDuplicate)
        ? BigInt(object.bytesDuplicate)
        : 0n,
      headerBytesDuplicate: isSet(object.headerBytesDuplicate)
        ? BigInt(object.headerBytesDuplicate)
        : 0n,
      bitrateDuplicate: isSet(object.bitrateDuplicate)
        ? globalThis.Number(object.bitrateDuplicate)
        : 0,
      packetsPadding: isSet(object.packetsPadding)
        ? globalThis.Number(object.packetsPadding)
        : 0,
      packetPaddingRate: isSet(object.packetPaddingRate)
        ? globalThis.Number(object.packetPaddingRate)
        : 0,
      bytesPadding: isSet(object.bytesPadding)
        ? BigInt(object.bytesPadding)
        : 0n,
      headerBytesPadding: isSet(object.headerBytesPadding)
        ? BigInt(object.headerBytesPadding)
        : 0n,
      bitratePadding: isSet(object.bitratePadding)
        ? globalThis.Number(object.bitratePadding)
        : 0,
      packetsOutOfOrder: isSet(object.packetsOutOfOrder)
        ? globalThis.Number(object.packetsOutOfOrder)
        : 0,
      frames: isSet(object.frames) ? globalThis.Number(object.frames) : 0,
      frameRate: isSet(object.frameRate)
        ? globalThis.Number(object.frameRate)
        : 0,
      jitterCurrent: isSet(object.jitterCurrent)
        ? globalThis.Number(object.jitterCurrent)
        : 0,
      jitterMax: isSet(object.jitterMax)
        ? globalThis.Number(object.jitterMax)
        : 0,
      gapHistogram: isObject(object.gapHistogram)
        ? Object.entries(object.gapHistogram).reduce<{ [key: number]: number }>(
            (acc, [key, value]) => {
              acc[globalThis.Number(key)] = Number(value);
              return acc;
            },
            {},
          )
        : {},
      nacks: isSet(object.nacks) ? globalThis.Number(object.nacks) : 0,
      nackAcks: isSet(object.nackAcks) ? globalThis.Number(object.nackAcks) : 0,
      nackMisses: isSet(object.nackMisses)
        ? globalThis.Number(object.nackMisses)
        : 0,
      nackRepeated: isSet(object.nackRepeated)
        ? globalThis.Number(object.nackRepeated)
        : 0,
      plis: isSet(object.plis) ? globalThis.Number(object.plis) : 0,
      lastPli: isSet(object.lastPli)
        ? fromJsonTimestamp(object.lastPli)
        : undefined,
      firs: isSet(object.firs) ? globalThis.Number(object.firs) : 0,
      lastFir: isSet(object.lastFir)
        ? fromJsonTimestamp(object.lastFir)
        : undefined,
      rttCurrent: isSet(object.rttCurrent)
        ? globalThis.Number(object.rttCurrent)
        : 0,
      rttMax: isSet(object.rttMax) ? globalThis.Number(object.rttMax) : 0,
      keyFrames: isSet(object.keyFrames)
        ? globalThis.Number(object.keyFrames)
        : 0,
      lastKeyFrame: isSet(object.lastKeyFrame)
        ? fromJsonTimestamp(object.lastKeyFrame)
        : undefined,
      layerLockPlis: isSet(object.layerLockPlis)
        ? globalThis.Number(object.layerLockPlis)
        : 0,
      lastLayerLockPli: isSet(object.lastLayerLockPli)
        ? fromJsonTimestamp(object.lastLayerLockPli)
        : undefined,
      packetDrift: isSet(object.packetDrift)
        ? RTPDrift.fromJSON(object.packetDrift)
        : undefined,
      ntpReportDrift: isSet(object.ntpReportDrift)
        ? RTPDrift.fromJSON(object.ntpReportDrift)
        : undefined,
      rebasedReportDrift: isSet(object.rebasedReportDrift)
        ? RTPDrift.fromJSON(object.rebasedReportDrift)
        : undefined,
      receivedReportDrift: isSet(object.receivedReportDrift)
        ? RTPDrift.fromJSON(object.receivedReportDrift)
        : undefined,
    };
  },

  toJSON(message: RTPStats): unknown {
    const obj: any = {};
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.duration !== 0) {
      obj.duration = message.duration;
    }
    if (message.packets !== 0) {
      obj.packets = Math.round(message.packets);
    }
    if (message.packetRate !== 0) {
      obj.packetRate = message.packetRate;
    }
    if (message.bytes !== 0n) {
      obj.bytes = message.bytes.toString();
    }
    if (message.headerBytes !== 0n) {
      obj.headerBytes = message.headerBytes.toString();
    }
    if (message.bitrate !== 0) {
      obj.bitrate = message.bitrate;
    }
    if (message.packetsLost !== 0) {
      obj.packetsLost = Math.round(message.packetsLost);
    }
    if (message.packetLossRate !== 0) {
      obj.packetLossRate = message.packetLossRate;
    }
    if (message.packetLossPercentage !== 0) {
      obj.packetLossPercentage = message.packetLossPercentage;
    }
    if (message.packetsDuplicate !== 0) {
      obj.packetsDuplicate = Math.round(message.packetsDuplicate);
    }
    if (message.packetDuplicateRate !== 0) {
      obj.packetDuplicateRate = message.packetDuplicateRate;
    }
    if (message.bytesDuplicate !== 0n) {
      obj.bytesDuplicate = message.bytesDuplicate.toString();
    }
    if (message.headerBytesDuplicate !== 0n) {
      obj.headerBytesDuplicate = message.headerBytesDuplicate.toString();
    }
    if (message.bitrateDuplicate !== 0) {
      obj.bitrateDuplicate = message.bitrateDuplicate;
    }
    if (message.packetsPadding !== 0) {
      obj.packetsPadding = Math.round(message.packetsPadding);
    }
    if (message.packetPaddingRate !== 0) {
      obj.packetPaddingRate = message.packetPaddingRate;
    }
    if (message.bytesPadding !== 0n) {
      obj.bytesPadding = message.bytesPadding.toString();
    }
    if (message.headerBytesPadding !== 0n) {
      obj.headerBytesPadding = message.headerBytesPadding.toString();
    }
    if (message.bitratePadding !== 0) {
      obj.bitratePadding = message.bitratePadding;
    }
    if (message.packetsOutOfOrder !== 0) {
      obj.packetsOutOfOrder = Math.round(message.packetsOutOfOrder);
    }
    if (message.frames !== 0) {
      obj.frames = Math.round(message.frames);
    }
    if (message.frameRate !== 0) {
      obj.frameRate = message.frameRate;
    }
    if (message.jitterCurrent !== 0) {
      obj.jitterCurrent = message.jitterCurrent;
    }
    if (message.jitterMax !== 0) {
      obj.jitterMax = message.jitterMax;
    }
    if (message.gapHistogram) {
      const entries = Object.entries(message.gapHistogram);
      if (entries.length > 0) {
        obj.gapHistogram = {};
        entries.forEach(([k, v]) => {
          obj.gapHistogram[k] = Math.round(v);
        });
      }
    }
    if (message.nacks !== 0) {
      obj.nacks = Math.round(message.nacks);
    }
    if (message.nackAcks !== 0) {
      obj.nackAcks = Math.round(message.nackAcks);
    }
    if (message.nackMisses !== 0) {
      obj.nackMisses = Math.round(message.nackMisses);
    }
    if (message.nackRepeated !== 0) {
      obj.nackRepeated = Math.round(message.nackRepeated);
    }
    if (message.plis !== 0) {
      obj.plis = Math.round(message.plis);
    }
    if (message.lastPli !== undefined) {
      obj.lastPli = message.lastPli.toISOString();
    }
    if (message.firs !== 0) {
      obj.firs = Math.round(message.firs);
    }
    if (message.lastFir !== undefined) {
      obj.lastFir = message.lastFir.toISOString();
    }
    if (message.rttCurrent !== 0) {
      obj.rttCurrent = Math.round(message.rttCurrent);
    }
    if (message.rttMax !== 0) {
      obj.rttMax = Math.round(message.rttMax);
    }
    if (message.keyFrames !== 0) {
      obj.keyFrames = Math.round(message.keyFrames);
    }
    if (message.lastKeyFrame !== undefined) {
      obj.lastKeyFrame = message.lastKeyFrame.toISOString();
    }
    if (message.layerLockPlis !== 0) {
      obj.layerLockPlis = Math.round(message.layerLockPlis);
    }
    if (message.lastLayerLockPli !== undefined) {
      obj.lastLayerLockPli = message.lastLayerLockPli.toISOString();
    }
    if (message.packetDrift !== undefined) {
      obj.packetDrift = RTPDrift.toJSON(message.packetDrift);
    }
    if (message.ntpReportDrift !== undefined) {
      obj.ntpReportDrift = RTPDrift.toJSON(message.ntpReportDrift);
    }
    if (message.rebasedReportDrift !== undefined) {
      obj.rebasedReportDrift = RTPDrift.toJSON(message.rebasedReportDrift);
    }
    if (message.receivedReportDrift !== undefined) {
      obj.receivedReportDrift = RTPDrift.toJSON(message.receivedReportDrift);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RTPStats>, I>>(base?: I): RTPStats {
    return RTPStats.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RTPStats>, I>>(object: I): RTPStats {
    const message = createBaseRTPStats();
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.duration = object.duration ?? 0;
    message.packets = object.packets ?? 0;
    message.packetRate = object.packetRate ?? 0;
    message.bytes = object.bytes ?? 0n;
    message.headerBytes = object.headerBytes ?? 0n;
    message.bitrate = object.bitrate ?? 0;
    message.packetsLost = object.packetsLost ?? 0;
    message.packetLossRate = object.packetLossRate ?? 0;
    message.packetLossPercentage = object.packetLossPercentage ?? 0;
    message.packetsDuplicate = object.packetsDuplicate ?? 0;
    message.packetDuplicateRate = object.packetDuplicateRate ?? 0;
    message.bytesDuplicate = object.bytesDuplicate ?? 0n;
    message.headerBytesDuplicate = object.headerBytesDuplicate ?? 0n;
    message.bitrateDuplicate = object.bitrateDuplicate ?? 0;
    message.packetsPadding = object.packetsPadding ?? 0;
    message.packetPaddingRate = object.packetPaddingRate ?? 0;
    message.bytesPadding = object.bytesPadding ?? 0n;
    message.headerBytesPadding = object.headerBytesPadding ?? 0n;
    message.bitratePadding = object.bitratePadding ?? 0;
    message.packetsOutOfOrder = object.packetsOutOfOrder ?? 0;
    message.frames = object.frames ?? 0;
    message.frameRate = object.frameRate ?? 0;
    message.jitterCurrent = object.jitterCurrent ?? 0;
    message.jitterMax = object.jitterMax ?? 0;
    message.gapHistogram = Object.entries(object.gapHistogram ?? {}).reduce<{
      [key: number]: number;
    }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[globalThis.Number(key)] = globalThis.Number(value);
      }
      return acc;
    }, {});
    message.nacks = object.nacks ?? 0;
    message.nackAcks = object.nackAcks ?? 0;
    message.nackMisses = object.nackMisses ?? 0;
    message.nackRepeated = object.nackRepeated ?? 0;
    message.plis = object.plis ?? 0;
    message.lastPli = object.lastPli ?? undefined;
    message.firs = object.firs ?? 0;
    message.lastFir = object.lastFir ?? undefined;
    message.rttCurrent = object.rttCurrent ?? 0;
    message.rttMax = object.rttMax ?? 0;
    message.keyFrames = object.keyFrames ?? 0;
    message.lastKeyFrame = object.lastKeyFrame ?? undefined;
    message.layerLockPlis = object.layerLockPlis ?? 0;
    message.lastLayerLockPli = object.lastLayerLockPli ?? undefined;
    message.packetDrift =
      object.packetDrift !== undefined && object.packetDrift !== null
        ? RTPDrift.fromPartial(object.packetDrift)
        : undefined;
    message.ntpReportDrift =
      object.ntpReportDrift !== undefined && object.ntpReportDrift !== null
        ? RTPDrift.fromPartial(object.ntpReportDrift)
        : undefined;
    message.rebasedReportDrift =
      object.rebasedReportDrift !== undefined &&
      object.rebasedReportDrift !== null
        ? RTPDrift.fromPartial(object.rebasedReportDrift)
        : undefined;
    message.receivedReportDrift =
      object.receivedReportDrift !== undefined &&
      object.receivedReportDrift !== null
        ? RTPDrift.fromPartial(object.receivedReportDrift)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(RTPStats.$type, RTPStats);

function createBaseRTPStats_GapHistogramEntry(): RTPStats_GapHistogramEntry {
  return { $type: "livekit.RTPStats.GapHistogramEntry", key: 0, value: 0 };
}

export const RTPStats_GapHistogramEntry: MessageFns<
  RTPStats_GapHistogramEntry,
  "livekit.RTPStats.GapHistogramEntry"
> = {
  $type: "livekit.RTPStats.GapHistogramEntry" as const,

  encode(
    message: RTPStats_GapHistogramEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).uint32(message.value);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): RTPStats_GapHistogramEntry {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTPStats_GapHistogramEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTPStats_GapHistogramEntry {
    return {
      $type: RTPStats_GapHistogramEntry.$type,
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: RTPStats_GapHistogramEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RTPStats_GapHistogramEntry>, I>>(
    base?: I,
  ): RTPStats_GapHistogramEntry {
    return RTPStats_GapHistogramEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RTPStats_GapHistogramEntry>, I>>(
    object: I,
  ): RTPStats_GapHistogramEntry {
    const message = createBaseRTPStats_GapHistogramEntry();
    message.key = object.key ?? 0;
    message.value = object.value ?? 0;
    return message;
  },
};

messageTypeRegistry.set(
  RTPStats_GapHistogramEntry.$type,
  RTPStats_GapHistogramEntry,
);

function createBaseRTCPSenderReportState(): RTCPSenderReportState {
  return {
    $type: "livekit.RTCPSenderReportState",
    rtpTimestamp: 0,
    rtpTimestampExt: 0n,
    ntpTimestamp: 0n,
    at: 0n,
    atAdjusted: 0n,
    packets: 0,
    octets: 0n,
  };
}

export const RTCPSenderReportState: MessageFns<
  RTCPSenderReportState,
  "livekit.RTCPSenderReportState"
> = {
  $type: "livekit.RTCPSenderReportState" as const,

  encode(
    message: RTCPSenderReportState,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.rtpTimestamp !== 0) {
      writer.uint32(8).uint32(message.rtpTimestamp);
    }
    if (message.rtpTimestampExt !== 0n) {
      if (
        BigInt.asUintN(64, message.rtpTimestampExt) !== message.rtpTimestampExt
      ) {
        throw new globalThis.Error(
          "value provided for field message.rtpTimestampExt of type uint64 too large",
        );
      }
      writer.uint32(16).uint64(message.rtpTimestampExt);
    }
    if (message.ntpTimestamp !== 0n) {
      if (BigInt.asUintN(64, message.ntpTimestamp) !== message.ntpTimestamp) {
        throw new globalThis.Error(
          "value provided for field message.ntpTimestamp of type uint64 too large",
        );
      }
      writer.uint32(24).uint64(message.ntpTimestamp);
    }
    if (message.at !== 0n) {
      if (BigInt.asIntN(64, message.at) !== message.at) {
        throw new globalThis.Error(
          "value provided for field message.at of type int64 too large",
        );
      }
      writer.uint32(32).int64(message.at);
    }
    if (message.atAdjusted !== 0n) {
      if (BigInt.asIntN(64, message.atAdjusted) !== message.atAdjusted) {
        throw new globalThis.Error(
          "value provided for field message.atAdjusted of type int64 too large",
        );
      }
      writer.uint32(40).int64(message.atAdjusted);
    }
    if (message.packets !== 0) {
      writer.uint32(48).uint32(message.packets);
    }
    if (message.octets !== 0n) {
      if (BigInt.asUintN(64, message.octets) !== message.octets) {
        throw new globalThis.Error(
          "value provided for field message.octets of type uint64 too large",
        );
      }
      writer.uint32(56).uint64(message.octets);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): RTCPSenderReportState {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTCPSenderReportState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.rtpTimestamp = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.rtpTimestampExt = reader.uint64() as bigint;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.ntpTimestamp = reader.uint64() as bigint;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.at = reader.int64() as bigint;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.atAdjusted = reader.int64() as bigint;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.packets = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.octets = reader.uint64() as bigint;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTCPSenderReportState {
    return {
      $type: RTCPSenderReportState.$type,
      rtpTimestamp: isSet(object.rtpTimestamp)
        ? globalThis.Number(object.rtpTimestamp)
        : 0,
      rtpTimestampExt: isSet(object.rtpTimestampExt)
        ? BigInt(object.rtpTimestampExt)
        : 0n,
      ntpTimestamp: isSet(object.ntpTimestamp)
        ? BigInt(object.ntpTimestamp)
        : 0n,
      at: isSet(object.at) ? BigInt(object.at) : 0n,
      atAdjusted: isSet(object.atAdjusted) ? BigInt(object.atAdjusted) : 0n,
      packets: isSet(object.packets) ? globalThis.Number(object.packets) : 0,
      octets: isSet(object.octets) ? BigInt(object.octets) : 0n,
    };
  },

  toJSON(message: RTCPSenderReportState): unknown {
    const obj: any = {};
    if (message.rtpTimestamp !== 0) {
      obj.rtpTimestamp = Math.round(message.rtpTimestamp);
    }
    if (message.rtpTimestampExt !== 0n) {
      obj.rtpTimestampExt = message.rtpTimestampExt.toString();
    }
    if (message.ntpTimestamp !== 0n) {
      obj.ntpTimestamp = message.ntpTimestamp.toString();
    }
    if (message.at !== 0n) {
      obj.at = message.at.toString();
    }
    if (message.atAdjusted !== 0n) {
      obj.atAdjusted = message.atAdjusted.toString();
    }
    if (message.packets !== 0) {
      obj.packets = Math.round(message.packets);
    }
    if (message.octets !== 0n) {
      obj.octets = message.octets.toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RTCPSenderReportState>, I>>(
    base?: I,
  ): RTCPSenderReportState {
    return RTCPSenderReportState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RTCPSenderReportState>, I>>(
    object: I,
  ): RTCPSenderReportState {
    const message = createBaseRTCPSenderReportState();
    message.rtpTimestamp = object.rtpTimestamp ?? 0;
    message.rtpTimestampExt = object.rtpTimestampExt ?? 0n;
    message.ntpTimestamp = object.ntpTimestamp ?? 0n;
    message.at = object.at ?? 0n;
    message.atAdjusted = object.atAdjusted ?? 0n;
    message.packets = object.packets ?? 0;
    message.octets = object.octets ?? 0n;
    return message;
  },
};

messageTypeRegistry.set(RTCPSenderReportState.$type, RTCPSenderReportState);

function createBaseRTPForwarderState(): RTPForwarderState {
  return {
    $type: "livekit.RTPForwarderState",
    started: false,
    referenceLayerSpatial: 0,
    preStartTime: 0n,
    extFirstTimestamp: 0n,
    dummyStartTimestampOffset: 0n,
    rtpMunger: undefined,
    vp8Munger: undefined,
    senderReportState: [],
  };
}

export const RTPForwarderState: MessageFns<
  RTPForwarderState,
  "livekit.RTPForwarderState"
> = {
  $type: "livekit.RTPForwarderState" as const,

  encode(
    message: RTPForwarderState,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.started !== false) {
      writer.uint32(8).bool(message.started);
    }
    if (message.referenceLayerSpatial !== 0) {
      writer.uint32(16).int32(message.referenceLayerSpatial);
    }
    if (message.preStartTime !== 0n) {
      if (BigInt.asIntN(64, message.preStartTime) !== message.preStartTime) {
        throw new globalThis.Error(
          "value provided for field message.preStartTime of type int64 too large",
        );
      }
      writer.uint32(24).int64(message.preStartTime);
    }
    if (message.extFirstTimestamp !== 0n) {
      if (
        BigInt.asUintN(64, message.extFirstTimestamp) !==
        message.extFirstTimestamp
      ) {
        throw new globalThis.Error(
          "value provided for field message.extFirstTimestamp of type uint64 too large",
        );
      }
      writer.uint32(32).uint64(message.extFirstTimestamp);
    }
    if (message.dummyStartTimestampOffset !== 0n) {
      if (
        BigInt.asUintN(64, message.dummyStartTimestampOffset) !==
        message.dummyStartTimestampOffset
      ) {
        throw new globalThis.Error(
          "value provided for field message.dummyStartTimestampOffset of type uint64 too large",
        );
      }
      writer.uint32(40).uint64(message.dummyStartTimestampOffset);
    }
    if (message.rtpMunger !== undefined) {
      RTPMungerState.encode(message.rtpMunger, writer.uint32(50).fork()).join();
    }
    if (message.vp8Munger !== undefined) {
      VP8MungerState.encode(message.vp8Munger, writer.uint32(58).fork()).join();
    }
    for (const v of message.senderReportState) {
      RTCPSenderReportState.encode(v!, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RTPForwarderState {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTPForwarderState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.started = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.referenceLayerSpatial = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.preStartTime = reader.int64() as bigint;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.extFirstTimestamp = reader.uint64() as bigint;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.dummyStartTimestampOffset = reader.uint64() as bigint;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.rtpMunger = RTPMungerState.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.vp8Munger = VP8MungerState.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.senderReportState.push(
            RTCPSenderReportState.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTPForwarderState {
    return {
      $type: RTPForwarderState.$type,
      started: isSet(object.started)
        ? globalThis.Boolean(object.started)
        : false,
      referenceLayerSpatial: isSet(object.referenceLayerSpatial)
        ? globalThis.Number(object.referenceLayerSpatial)
        : 0,
      preStartTime: isSet(object.preStartTime)
        ? BigInt(object.preStartTime)
        : 0n,
      extFirstTimestamp: isSet(object.extFirstTimestamp)
        ? BigInt(object.extFirstTimestamp)
        : 0n,
      dummyStartTimestampOffset: isSet(object.dummyStartTimestampOffset)
        ? BigInt(object.dummyStartTimestampOffset)
        : 0n,
      rtpMunger: isSet(object.rtpMunger)
        ? RTPMungerState.fromJSON(object.rtpMunger)
        : undefined,
      vp8Munger: isSet(object.vp8Munger)
        ? VP8MungerState.fromJSON(object.vp8Munger)
        : undefined,
      senderReportState: globalThis.Array.isArray(object?.senderReportState)
        ? object.senderReportState.map((e: any) =>
            RTCPSenderReportState.fromJSON(e),
          )
        : [],
    };
  },

  toJSON(message: RTPForwarderState): unknown {
    const obj: any = {};
    if (message.started !== false) {
      obj.started = message.started;
    }
    if (message.referenceLayerSpatial !== 0) {
      obj.referenceLayerSpatial = Math.round(message.referenceLayerSpatial);
    }
    if (message.preStartTime !== 0n) {
      obj.preStartTime = message.preStartTime.toString();
    }
    if (message.extFirstTimestamp !== 0n) {
      obj.extFirstTimestamp = message.extFirstTimestamp.toString();
    }
    if (message.dummyStartTimestampOffset !== 0n) {
      obj.dummyStartTimestampOffset =
        message.dummyStartTimestampOffset.toString();
    }
    if (message.rtpMunger !== undefined) {
      obj.rtpMunger = RTPMungerState.toJSON(message.rtpMunger);
    }
    if (message.vp8Munger !== undefined) {
      obj.vp8Munger = VP8MungerState.toJSON(message.vp8Munger);
    }
    if (message.senderReportState?.length) {
      obj.senderReportState = message.senderReportState.map((e) =>
        RTCPSenderReportState.toJSON(e),
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RTPForwarderState>, I>>(
    base?: I,
  ): RTPForwarderState {
    return RTPForwarderState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RTPForwarderState>, I>>(
    object: I,
  ): RTPForwarderState {
    const message = createBaseRTPForwarderState();
    message.started = object.started ?? false;
    message.referenceLayerSpatial = object.referenceLayerSpatial ?? 0;
    message.preStartTime = object.preStartTime ?? 0n;
    message.extFirstTimestamp = object.extFirstTimestamp ?? 0n;
    message.dummyStartTimestampOffset = object.dummyStartTimestampOffset ?? 0n;
    message.rtpMunger =
      object.rtpMunger !== undefined && object.rtpMunger !== null
        ? RTPMungerState.fromPartial(object.rtpMunger)
        : undefined;
    message.vp8Munger =
      object.vp8Munger !== undefined && object.vp8Munger !== null
        ? VP8MungerState.fromPartial(object.vp8Munger)
        : undefined;
    message.senderReportState =
      object.senderReportState?.map((e) =>
        RTCPSenderReportState.fromPartial(e),
      ) || [];
    return message;
  },
};

messageTypeRegistry.set(RTPForwarderState.$type, RTPForwarderState);

function createBaseRTPMungerState(): RTPMungerState {
  return {
    $type: "livekit.RTPMungerState",
    extLastSequenceNumber: 0n,
    extSecondLastSequenceNumber: 0n,
    extLastTimestamp: 0n,
    extSecondLastTimestamp: 0n,
    lastMarker: false,
    secondLastMarker: false,
  };
}

export const RTPMungerState: MessageFns<
  RTPMungerState,
  "livekit.RTPMungerState"
> = {
  $type: "livekit.RTPMungerState" as const,

  encode(
    message: RTPMungerState,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.extLastSequenceNumber !== 0n) {
      if (
        BigInt.asUintN(64, message.extLastSequenceNumber) !==
        message.extLastSequenceNumber
      ) {
        throw new globalThis.Error(
          "value provided for field message.extLastSequenceNumber of type uint64 too large",
        );
      }
      writer.uint32(8).uint64(message.extLastSequenceNumber);
    }
    if (message.extSecondLastSequenceNumber !== 0n) {
      if (
        BigInt.asUintN(64, message.extSecondLastSequenceNumber) !==
        message.extSecondLastSequenceNumber
      ) {
        throw new globalThis.Error(
          "value provided for field message.extSecondLastSequenceNumber of type uint64 too large",
        );
      }
      writer.uint32(16).uint64(message.extSecondLastSequenceNumber);
    }
    if (message.extLastTimestamp !== 0n) {
      if (
        BigInt.asUintN(64, message.extLastTimestamp) !==
        message.extLastTimestamp
      ) {
        throw new globalThis.Error(
          "value provided for field message.extLastTimestamp of type uint64 too large",
        );
      }
      writer.uint32(24).uint64(message.extLastTimestamp);
    }
    if (message.extSecondLastTimestamp !== 0n) {
      if (
        BigInt.asUintN(64, message.extSecondLastTimestamp) !==
        message.extSecondLastTimestamp
      ) {
        throw new globalThis.Error(
          "value provided for field message.extSecondLastTimestamp of type uint64 too large",
        );
      }
      writer.uint32(32).uint64(message.extSecondLastTimestamp);
    }
    if (message.lastMarker !== false) {
      writer.uint32(40).bool(message.lastMarker);
    }
    if (message.secondLastMarker !== false) {
      writer.uint32(48).bool(message.secondLastMarker);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RTPMungerState {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTPMungerState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.extLastSequenceNumber = reader.uint64() as bigint;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.extSecondLastSequenceNumber = reader.uint64() as bigint;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.extLastTimestamp = reader.uint64() as bigint;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.extSecondLastTimestamp = reader.uint64() as bigint;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.lastMarker = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.secondLastMarker = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTPMungerState {
    return {
      $type: RTPMungerState.$type,
      extLastSequenceNumber: isSet(object.extLastSequenceNumber)
        ? BigInt(object.extLastSequenceNumber)
        : 0n,
      extSecondLastSequenceNumber: isSet(object.extSecondLastSequenceNumber)
        ? BigInt(object.extSecondLastSequenceNumber)
        : 0n,
      extLastTimestamp: isSet(object.extLastTimestamp)
        ? BigInt(object.extLastTimestamp)
        : 0n,
      extSecondLastTimestamp: isSet(object.extSecondLastTimestamp)
        ? BigInt(object.extSecondLastTimestamp)
        : 0n,
      lastMarker: isSet(object.lastMarker)
        ? globalThis.Boolean(object.lastMarker)
        : false,
      secondLastMarker: isSet(object.secondLastMarker)
        ? globalThis.Boolean(object.secondLastMarker)
        : false,
    };
  },

  toJSON(message: RTPMungerState): unknown {
    const obj: any = {};
    if (message.extLastSequenceNumber !== 0n) {
      obj.extLastSequenceNumber = message.extLastSequenceNumber.toString();
    }
    if (message.extSecondLastSequenceNumber !== 0n) {
      obj.extSecondLastSequenceNumber =
        message.extSecondLastSequenceNumber.toString();
    }
    if (message.extLastTimestamp !== 0n) {
      obj.extLastTimestamp = message.extLastTimestamp.toString();
    }
    if (message.extSecondLastTimestamp !== 0n) {
      obj.extSecondLastTimestamp = message.extSecondLastTimestamp.toString();
    }
    if (message.lastMarker !== false) {
      obj.lastMarker = message.lastMarker;
    }
    if (message.secondLastMarker !== false) {
      obj.secondLastMarker = message.secondLastMarker;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RTPMungerState>, I>>(
    base?: I,
  ): RTPMungerState {
    return RTPMungerState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RTPMungerState>, I>>(
    object: I,
  ): RTPMungerState {
    const message = createBaseRTPMungerState();
    message.extLastSequenceNumber = object.extLastSequenceNumber ?? 0n;
    message.extSecondLastSequenceNumber =
      object.extSecondLastSequenceNumber ?? 0n;
    message.extLastTimestamp = object.extLastTimestamp ?? 0n;
    message.extSecondLastTimestamp = object.extSecondLastTimestamp ?? 0n;
    message.lastMarker = object.lastMarker ?? false;
    message.secondLastMarker = object.secondLastMarker ?? false;
    return message;
  },
};

messageTypeRegistry.set(RTPMungerState.$type, RTPMungerState);

function createBaseVP8MungerState(): VP8MungerState {
  return {
    $type: "livekit.VP8MungerState",
    extLastPictureId: 0,
    pictureIdUsed: false,
    lastTl0PicIdx: 0,
    tl0PicIdxUsed: false,
    tidUsed: false,
    lastKeyIdx: 0,
    keyIdxUsed: false,
  };
}

export const VP8MungerState: MessageFns<
  VP8MungerState,
  "livekit.VP8MungerState"
> = {
  $type: "livekit.VP8MungerState" as const,

  encode(
    message: VP8MungerState,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.extLastPictureId !== 0) {
      writer.uint32(8).int32(message.extLastPictureId);
    }
    if (message.pictureIdUsed !== false) {
      writer.uint32(16).bool(message.pictureIdUsed);
    }
    if (message.lastTl0PicIdx !== 0) {
      writer.uint32(24).uint32(message.lastTl0PicIdx);
    }
    if (message.tl0PicIdxUsed !== false) {
      writer.uint32(32).bool(message.tl0PicIdxUsed);
    }
    if (message.tidUsed !== false) {
      writer.uint32(40).bool(message.tidUsed);
    }
    if (message.lastKeyIdx !== 0) {
      writer.uint32(48).uint32(message.lastKeyIdx);
    }
    if (message.keyIdxUsed !== false) {
      writer.uint32(56).bool(message.keyIdxUsed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VP8MungerState {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVP8MungerState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.extLastPictureId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pictureIdUsed = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.lastTl0PicIdx = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.tl0PicIdxUsed = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.tidUsed = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.lastKeyIdx = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.keyIdxUsed = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VP8MungerState {
    return {
      $type: VP8MungerState.$type,
      extLastPictureId: isSet(object.extLastPictureId)
        ? globalThis.Number(object.extLastPictureId)
        : 0,
      pictureIdUsed: isSet(object.pictureIdUsed)
        ? globalThis.Boolean(object.pictureIdUsed)
        : false,
      lastTl0PicIdx: isSet(object.lastTl0PicIdx)
        ? globalThis.Number(object.lastTl0PicIdx)
        : 0,
      tl0PicIdxUsed: isSet(object.tl0PicIdxUsed)
        ? globalThis.Boolean(object.tl0PicIdxUsed)
        : false,
      tidUsed: isSet(object.tidUsed)
        ? globalThis.Boolean(object.tidUsed)
        : false,
      lastKeyIdx: isSet(object.lastKeyIdx)
        ? globalThis.Number(object.lastKeyIdx)
        : 0,
      keyIdxUsed: isSet(object.keyIdxUsed)
        ? globalThis.Boolean(object.keyIdxUsed)
        : false,
    };
  },

  toJSON(message: VP8MungerState): unknown {
    const obj: any = {};
    if (message.extLastPictureId !== 0) {
      obj.extLastPictureId = Math.round(message.extLastPictureId);
    }
    if (message.pictureIdUsed !== false) {
      obj.pictureIdUsed = message.pictureIdUsed;
    }
    if (message.lastTl0PicIdx !== 0) {
      obj.lastTl0PicIdx = Math.round(message.lastTl0PicIdx);
    }
    if (message.tl0PicIdxUsed !== false) {
      obj.tl0PicIdxUsed = message.tl0PicIdxUsed;
    }
    if (message.tidUsed !== false) {
      obj.tidUsed = message.tidUsed;
    }
    if (message.lastKeyIdx !== 0) {
      obj.lastKeyIdx = Math.round(message.lastKeyIdx);
    }
    if (message.keyIdxUsed !== false) {
      obj.keyIdxUsed = message.keyIdxUsed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VP8MungerState>, I>>(
    base?: I,
  ): VP8MungerState {
    return VP8MungerState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VP8MungerState>, I>>(
    object: I,
  ): VP8MungerState {
    const message = createBaseVP8MungerState();
    message.extLastPictureId = object.extLastPictureId ?? 0;
    message.pictureIdUsed = object.pictureIdUsed ?? false;
    message.lastTl0PicIdx = object.lastTl0PicIdx ?? 0;
    message.tl0PicIdxUsed = object.tl0PicIdxUsed ?? false;
    message.tidUsed = object.tidUsed ?? false;
    message.lastKeyIdx = object.lastKeyIdx ?? 0;
    message.keyIdxUsed = object.keyIdxUsed ?? false;
    return message;
  },
};

messageTypeRegistry.set(VP8MungerState.$type, VP8MungerState);

function createBaseTimedVersion(): TimedVersion {
  return { $type: "livekit.TimedVersion", unixMicro: 0n, ticks: 0 };
}

export const TimedVersion: MessageFns<TimedVersion, "livekit.TimedVersion"> = {
  $type: "livekit.TimedVersion" as const,

  encode(
    message: TimedVersion,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.unixMicro !== 0n) {
      if (BigInt.asIntN(64, message.unixMicro) !== message.unixMicro) {
        throw new globalThis.Error(
          "value provided for field message.unixMicro of type int64 too large",
        );
      }
      writer.uint32(8).int64(message.unixMicro);
    }
    if (message.ticks !== 0) {
      writer.uint32(16).int32(message.ticks);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimedVersion {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimedVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.unixMicro = reader.int64() as bigint;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.ticks = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimedVersion {
    return {
      $type: TimedVersion.$type,
      unixMicro: isSet(object.unixMicro) ? BigInt(object.unixMicro) : 0n,
      ticks: isSet(object.ticks) ? globalThis.Number(object.ticks) : 0,
    };
  },

  toJSON(message: TimedVersion): unknown {
    const obj: any = {};
    if (message.unixMicro !== 0n) {
      obj.unixMicro = message.unixMicro.toString();
    }
    if (message.ticks !== 0) {
      obj.ticks = Math.round(message.ticks);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TimedVersion>, I>>(
    base?: I,
  ): TimedVersion {
    return TimedVersion.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TimedVersion>, I>>(
    object: I,
  ): TimedVersion {
    const message = createBaseTimedVersion();
    message.unixMicro = object.unixMicro ?? 0n;
    message.ticks = object.ticks ?? 0;
    return message;
  },
};

messageTypeRegistry.set(TimedVersion.$type, TimedVersion);

function createBaseDataStream(): DataStream {
  return { $type: "livekit.DataStream" };
}

export const DataStream: MessageFns<DataStream, "livekit.DataStream"> = {
  $type: "livekit.DataStream" as const,

  encode(
    _: DataStream,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataStream {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataStream();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DataStream {
    return { $type: DataStream.$type };
  },

  toJSON(_: DataStream): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DataStream>, I>>(base?: I): DataStream {
    return DataStream.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataStream>, I>>(_: I): DataStream {
    const message = createBaseDataStream();
    return message;
  },
};

messageTypeRegistry.set(DataStream.$type, DataStream);

function createBaseDataStream_TextHeader(): DataStream_TextHeader {
  return {
    $type: "livekit.DataStream.TextHeader",
    operationType: 0,
    version: 0,
    replyToStreamId: "",
    attachedStreamIds: [],
    generated: false,
  };
}

export const DataStream_TextHeader: MessageFns<
  DataStream_TextHeader,
  "livekit.DataStream.TextHeader"
> = {
  $type: "livekit.DataStream.TextHeader" as const,

  encode(
    message: DataStream_TextHeader,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.operationType !== 0) {
      writer.uint32(8).int32(message.operationType);
    }
    if (message.version !== 0) {
      writer.uint32(16).int32(message.version);
    }
    if (message.replyToStreamId !== "") {
      writer.uint32(26).string(message.replyToStreamId);
    }
    for (const v of message.attachedStreamIds) {
      writer.uint32(34).string(v!);
    }
    if (message.generated !== false) {
      writer.uint32(40).bool(message.generated);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DataStream_TextHeader {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataStream_TextHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.operationType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.version = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.replyToStreamId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.attachedStreamIds.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.generated = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataStream_TextHeader {
    return {
      $type: DataStream_TextHeader.$type,
      operationType: isSet(object.operationType)
        ? dataStream_OperationTypeFromJSON(object.operationType)
        : 0,
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      replyToStreamId: isSet(object.replyToStreamId)
        ? globalThis.String(object.replyToStreamId)
        : "",
      attachedStreamIds: globalThis.Array.isArray(object?.attachedStreamIds)
        ? object.attachedStreamIds.map((e: any) => globalThis.String(e))
        : [],
      generated: isSet(object.generated)
        ? globalThis.Boolean(object.generated)
        : false,
    };
  },

  toJSON(message: DataStream_TextHeader): unknown {
    const obj: any = {};
    if (message.operationType !== 0) {
      obj.operationType = dataStream_OperationTypeToJSON(message.operationType);
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.replyToStreamId !== "") {
      obj.replyToStreamId = message.replyToStreamId;
    }
    if (message.attachedStreamIds?.length) {
      obj.attachedStreamIds = message.attachedStreamIds;
    }
    if (message.generated !== false) {
      obj.generated = message.generated;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataStream_TextHeader>, I>>(
    base?: I,
  ): DataStream_TextHeader {
    return DataStream_TextHeader.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataStream_TextHeader>, I>>(
    object: I,
  ): DataStream_TextHeader {
    const message = createBaseDataStream_TextHeader();
    message.operationType = object.operationType ?? 0;
    message.version = object.version ?? 0;
    message.replyToStreamId = object.replyToStreamId ?? "";
    message.attachedStreamIds = object.attachedStreamIds?.map((e) => e) || [];
    message.generated = object.generated ?? false;
    return message;
  },
};

messageTypeRegistry.set(DataStream_TextHeader.$type, DataStream_TextHeader);

function createBaseDataStream_ByteHeader(): DataStream_ByteHeader {
  return { $type: "livekit.DataStream.ByteHeader", name: "" };
}

export const DataStream_ByteHeader: MessageFns<
  DataStream_ByteHeader,
  "livekit.DataStream.ByteHeader"
> = {
  $type: "livekit.DataStream.ByteHeader" as const,

  encode(
    message: DataStream_ByteHeader,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DataStream_ByteHeader {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataStream_ByteHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataStream_ByteHeader {
    return {
      $type: DataStream_ByteHeader.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: DataStream_ByteHeader): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataStream_ByteHeader>, I>>(
    base?: I,
  ): DataStream_ByteHeader {
    return DataStream_ByteHeader.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataStream_ByteHeader>, I>>(
    object: I,
  ): DataStream_ByteHeader {
    const message = createBaseDataStream_ByteHeader();
    message.name = object.name ?? "";
    return message;
  },
};

messageTypeRegistry.set(DataStream_ByteHeader.$type, DataStream_ByteHeader);

function createBaseDataStream_Header(): DataStream_Header {
  return {
    $type: "livekit.DataStream.Header",
    streamId: "",
    timestamp: 0n,
    topic: "",
    mimeType: "",
    totalLength: undefined,
    encryptionType: 0,
    attributes: {},
    textHeader: undefined,
    byteHeader: undefined,
  };
}

export const DataStream_Header: MessageFns<
  DataStream_Header,
  "livekit.DataStream.Header"
> = {
  $type: "livekit.DataStream.Header" as const,

  encode(
    message: DataStream_Header,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.streamId !== "") {
      writer.uint32(10).string(message.streamId);
    }
    if (message.timestamp !== 0n) {
      if (BigInt.asIntN(64, message.timestamp) !== message.timestamp) {
        throw new globalThis.Error(
          "value provided for field message.timestamp of type int64 too large",
        );
      }
      writer.uint32(16).int64(message.timestamp);
    }
    if (message.topic !== "") {
      writer.uint32(26).string(message.topic);
    }
    if (message.mimeType !== "") {
      writer.uint32(34).string(message.mimeType);
    }
    if (message.totalLength !== undefined) {
      if (BigInt.asUintN(64, message.totalLength) !== message.totalLength) {
        throw new globalThis.Error(
          "value provided for field message.totalLength of type uint64 too large",
        );
      }
      writer.uint32(40).uint64(message.totalLength);
    }
    if (message.encryptionType !== 0) {
      writer.uint32(56).int32(message.encryptionType);
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      DataStream_Header_AttributesEntry.encode(
        {
          $type: "livekit.DataStream.Header.AttributesEntry",
          key: key as any,
          value,
        },
        writer.uint32(66).fork(),
      ).join();
    });
    if (message.textHeader !== undefined) {
      DataStream_TextHeader.encode(
        message.textHeader,
        writer.uint32(74).fork(),
      ).join();
    }
    if (message.byteHeader !== undefined) {
      DataStream_ByteHeader.encode(
        message.byteHeader,
        writer.uint32(82).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataStream_Header {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataStream_Header();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.streamId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestamp = reader.int64() as bigint;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.topic = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.totalLength = reader.uint64() as bigint;
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.encryptionType = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          const entry8 = DataStream_Header_AttributesEntry.decode(
            reader,
            reader.uint32(),
          );
          if (entry8.value !== undefined) {
            message.attributes[entry8.key] = entry8.value;
          }
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.textHeader = DataStream_TextHeader.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.byteHeader = DataStream_ByteHeader.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataStream_Header {
    return {
      $type: DataStream_Header.$type,
      streamId: isSet(object.streamId)
        ? globalThis.String(object.streamId)
        : "",
      timestamp: isSet(object.timestamp) ? BigInt(object.timestamp) : 0n,
      topic: isSet(object.topic) ? globalThis.String(object.topic) : "",
      mimeType: isSet(object.mimeType)
        ? globalThis.String(object.mimeType)
        : "",
      totalLength: isSet(object.totalLength)
        ? BigInt(object.totalLength)
        : undefined,
      encryptionType: isSet(object.encryptionType)
        ? encryption_TypeFromJSON(object.encryptionType)
        : 0,
      attributes: isObject(object.attributes)
        ? Object.entries(object.attributes).reduce<{ [key: string]: string }>(
            (acc, [key, value]) => {
              acc[key] = String(value);
              return acc;
            },
            {},
          )
        : {},
      textHeader: isSet(object.textHeader)
        ? DataStream_TextHeader.fromJSON(object.textHeader)
        : undefined,
      byteHeader: isSet(object.byteHeader)
        ? DataStream_ByteHeader.fromJSON(object.byteHeader)
        : undefined,
    };
  },

  toJSON(message: DataStream_Header): unknown {
    const obj: any = {};
    if (message.streamId !== "") {
      obj.streamId = message.streamId;
    }
    if (message.timestamp !== 0n) {
      obj.timestamp = message.timestamp.toString();
    }
    if (message.topic !== "") {
      obj.topic = message.topic;
    }
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    if (message.totalLength !== undefined) {
      obj.totalLength = message.totalLength.toString();
    }
    if (message.encryptionType !== 0) {
      obj.encryptionType = encryption_TypeToJSON(message.encryptionType);
    }
    if (message.attributes) {
      const entries = Object.entries(message.attributes);
      if (entries.length > 0) {
        obj.attributes = {};
        entries.forEach(([k, v]) => {
          obj.attributes[k] = v;
        });
      }
    }
    if (message.textHeader !== undefined) {
      obj.textHeader = DataStream_TextHeader.toJSON(message.textHeader);
    }
    if (message.byteHeader !== undefined) {
      obj.byteHeader = DataStream_ByteHeader.toJSON(message.byteHeader);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataStream_Header>, I>>(
    base?: I,
  ): DataStream_Header {
    return DataStream_Header.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataStream_Header>, I>>(
    object: I,
  ): DataStream_Header {
    const message = createBaseDataStream_Header();
    message.streamId = object.streamId ?? "";
    message.timestamp = object.timestamp ?? 0n;
    message.topic = object.topic ?? "";
    message.mimeType = object.mimeType ?? "";
    message.totalLength = object.totalLength ?? undefined;
    message.encryptionType = object.encryptionType ?? 0;
    message.attributes = Object.entries(object.attributes ?? {}).reduce<{
      [key: string]: string;
    }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.textHeader =
      object.textHeader !== undefined && object.textHeader !== null
        ? DataStream_TextHeader.fromPartial(object.textHeader)
        : undefined;
    message.byteHeader =
      object.byteHeader !== undefined && object.byteHeader !== null
        ? DataStream_ByteHeader.fromPartial(object.byteHeader)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(DataStream_Header.$type, DataStream_Header);

function createBaseDataStream_Header_AttributesEntry(): DataStream_Header_AttributesEntry {
  return {
    $type: "livekit.DataStream.Header.AttributesEntry",
    key: "",
    value: "",
  };
}

export const DataStream_Header_AttributesEntry: MessageFns<
  DataStream_Header_AttributesEntry,
  "livekit.DataStream.Header.AttributesEntry"
> = {
  $type: "livekit.DataStream.Header.AttributesEntry" as const,

  encode(
    message: DataStream_Header_AttributesEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DataStream_Header_AttributesEntry {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataStream_Header_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataStream_Header_AttributesEntry {
    return {
      $type: DataStream_Header_AttributesEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: DataStream_Header_AttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataStream_Header_AttributesEntry>, I>>(
    base?: I,
  ): DataStream_Header_AttributesEntry {
    return DataStream_Header_AttributesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<DataStream_Header_AttributesEntry>, I>,
  >(object: I): DataStream_Header_AttributesEntry {
    const message = createBaseDataStream_Header_AttributesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(
  DataStream_Header_AttributesEntry.$type,
  DataStream_Header_AttributesEntry,
);

function createBaseDataStream_Chunk(): DataStream_Chunk {
  return {
    $type: "livekit.DataStream.Chunk",
    streamId: "",
    chunkIndex: 0n,
    content: Buffer.alloc(0),
    version: 0,
    iv: undefined,
  };
}

export const DataStream_Chunk: MessageFns<
  DataStream_Chunk,
  "livekit.DataStream.Chunk"
> = {
  $type: "livekit.DataStream.Chunk" as const,

  encode(
    message: DataStream_Chunk,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.streamId !== "") {
      writer.uint32(10).string(message.streamId);
    }
    if (message.chunkIndex !== 0n) {
      if (BigInt.asUintN(64, message.chunkIndex) !== message.chunkIndex) {
        throw new globalThis.Error(
          "value provided for field message.chunkIndex of type uint64 too large",
        );
      }
      writer.uint32(16).uint64(message.chunkIndex);
    }
    if (message.content.length !== 0) {
      writer.uint32(26).bytes(message.content);
    }
    if (message.version !== 0) {
      writer.uint32(32).int32(message.version);
    }
    if (message.iv !== undefined) {
      writer.uint32(42).bytes(message.iv);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataStream_Chunk {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataStream_Chunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.streamId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.chunkIndex = reader.uint64() as bigint;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.content = Buffer.from(reader.bytes());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.version = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.iv = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataStream_Chunk {
    return {
      $type: DataStream_Chunk.$type,
      streamId: isSet(object.streamId)
        ? globalThis.String(object.streamId)
        : "",
      chunkIndex: isSet(object.chunkIndex) ? BigInt(object.chunkIndex) : 0n,
      content: isSet(object.content)
        ? Buffer.from(bytesFromBase64(object.content))
        : Buffer.alloc(0),
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      iv: isSet(object.iv)
        ? Buffer.from(bytesFromBase64(object.iv))
        : undefined,
    };
  },

  toJSON(message: DataStream_Chunk): unknown {
    const obj: any = {};
    if (message.streamId !== "") {
      obj.streamId = message.streamId;
    }
    if (message.chunkIndex !== 0n) {
      obj.chunkIndex = message.chunkIndex.toString();
    }
    if (message.content.length !== 0) {
      obj.content = base64FromBytes(message.content);
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.iv !== undefined) {
      obj.iv = base64FromBytes(message.iv);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataStream_Chunk>, I>>(
    base?: I,
  ): DataStream_Chunk {
    return DataStream_Chunk.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataStream_Chunk>, I>>(
    object: I,
  ): DataStream_Chunk {
    const message = createBaseDataStream_Chunk();
    message.streamId = object.streamId ?? "";
    message.chunkIndex = object.chunkIndex ?? 0n;
    message.content = object.content ?? Buffer.alloc(0);
    message.version = object.version ?? 0;
    message.iv = object.iv ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(DataStream_Chunk.$type, DataStream_Chunk);

function createBaseDataStream_Trailer(): DataStream_Trailer {
  return {
    $type: "livekit.DataStream.Trailer",
    streamId: "",
    reason: "",
    attributes: {},
  };
}

export const DataStream_Trailer: MessageFns<
  DataStream_Trailer,
  "livekit.DataStream.Trailer"
> = {
  $type: "livekit.DataStream.Trailer" as const,

  encode(
    message: DataStream_Trailer,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.streamId !== "") {
      writer.uint32(10).string(message.streamId);
    }
    if (message.reason !== "") {
      writer.uint32(18).string(message.reason);
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      DataStream_Trailer_AttributesEntry.encode(
        {
          $type: "livekit.DataStream.Trailer.AttributesEntry",
          key: key as any,
          value,
        },
        writer.uint32(26).fork(),
      ).join();
    });
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DataStream_Trailer {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataStream_Trailer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.streamId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = DataStream_Trailer_AttributesEntry.decode(
            reader,
            reader.uint32(),
          );
          if (entry3.value !== undefined) {
            message.attributes[entry3.key] = entry3.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataStream_Trailer {
    return {
      $type: DataStream_Trailer.$type,
      streamId: isSet(object.streamId)
        ? globalThis.String(object.streamId)
        : "",
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
      attributes: isObject(object.attributes)
        ? Object.entries(object.attributes).reduce<{ [key: string]: string }>(
            (acc, [key, value]) => {
              acc[key] = String(value);
              return acc;
            },
            {},
          )
        : {},
    };
  },

  toJSON(message: DataStream_Trailer): unknown {
    const obj: any = {};
    if (message.streamId !== "") {
      obj.streamId = message.streamId;
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    if (message.attributes) {
      const entries = Object.entries(message.attributes);
      if (entries.length > 0) {
        obj.attributes = {};
        entries.forEach(([k, v]) => {
          obj.attributes[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataStream_Trailer>, I>>(
    base?: I,
  ): DataStream_Trailer {
    return DataStream_Trailer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataStream_Trailer>, I>>(
    object: I,
  ): DataStream_Trailer {
    const message = createBaseDataStream_Trailer();
    message.streamId = object.streamId ?? "";
    message.reason = object.reason ?? "";
    message.attributes = Object.entries(object.attributes ?? {}).reduce<{
      [key: string]: string;
    }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

messageTypeRegistry.set(DataStream_Trailer.$type, DataStream_Trailer);

function createBaseDataStream_Trailer_AttributesEntry(): DataStream_Trailer_AttributesEntry {
  return {
    $type: "livekit.DataStream.Trailer.AttributesEntry",
    key: "",
    value: "",
  };
}

export const DataStream_Trailer_AttributesEntry: MessageFns<
  DataStream_Trailer_AttributesEntry,
  "livekit.DataStream.Trailer.AttributesEntry"
> = {
  $type: "livekit.DataStream.Trailer.AttributesEntry" as const,

  encode(
    message: DataStream_Trailer_AttributesEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DataStream_Trailer_AttributesEntry {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataStream_Trailer_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataStream_Trailer_AttributesEntry {
    return {
      $type: DataStream_Trailer_AttributesEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: DataStream_Trailer_AttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataStream_Trailer_AttributesEntry>, I>>(
    base?: I,
  ): DataStream_Trailer_AttributesEntry {
    return DataStream_Trailer_AttributesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<DataStream_Trailer_AttributesEntry>, I>,
  >(object: I): DataStream_Trailer_AttributesEntry {
    const message = createBaseDataStream_Trailer_AttributesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(
  DataStream_Trailer_AttributesEntry.$type,
  DataStream_Trailer_AttributesEntry,
);

type ProtoMetaMessageOptions = {
  options?: { [key: string]: any };
  fields?: { [key: string]: { [key: string]: any } };
  oneof?: { [key: string]: { [key: string]: any } };
  nested?: { [key: string]: ProtoMetaMessageOptions };
};

export interface ProtoMetadata {
  fileDescriptor: FileDescriptorProto1;
  references: { [key: string]: any };
  dependencies?: ProtoMetadata[];
  options?: {
    options?: { [key: string]: any };
    services?: {
      [key: string]: {
        options?: { [key: string]: any };
        methods?: { [key: string]: { [key: string]: any } };
      };
    };
    messages?: { [key: string]: ProtoMetaMessageOptions };
    enums?: {
      [key: string]: {
        options?: { [key: string]: any };
        values?: { [key: string]: { [key: string]: any } };
      };
    };
  };
}

export const protoMetadata = {
  fileDescriptor: {
    name: "livekit_models.proto",
    package: "livekit",
    dependency: ["google/protobuf/timestamp.proto", "livekit_metrics.proto"],
    publicDependency: [],
    weakDependency: [],
    messageType: [
      {
        name: "Pagination",
        field: [
          {
            name: "after_id",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "afterId",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "limit",
            number: 2,
            label: 1,
            type: 5,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "limit",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "Room",
        field: [
          {
            name: "sid",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "sid",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "name",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "name",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "empty_timeout",
            number: 3,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "emptyTimeout",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "departure_timeout",
            number: 14,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "departureTimeout",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "max_participants",
            number: 4,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "maxParticipants",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "creation_time",
            number: 5,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "creationTime",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "creation_time_ms",
            number: 15,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "creationTimeMs",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "turn_password",
            number: 6,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "turnPassword",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "enabled_codecs",
            number: 7,
            label: 3,
            type: 11,
            typeName: ".livekit.Codec",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "enabledCodecs",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "metadata",
            number: 8,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "metadata",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "num_participants",
            number: 9,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "numParticipants",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "num_publishers",
            number: 11,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "numPublishers",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "active_recording",
            number: 10,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "activeRecording",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "version",
            number: 13,
            label: 1,
            type: 11,
            typeName: ".livekit.TimedVersion",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "version",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "Codec",
        field: [
          {
            name: "mime",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "mime",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "fmtp_line",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "fmtpLine",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "PlayoutDelay",
        field: [
          {
            name: "enabled",
            number: 1,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "enabled",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "min",
            number: 2,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "min",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "max",
            number: 3,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "max",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "ParticipantPermission",
        field: [
          {
            name: "can_subscribe",
            number: 1,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "canSubscribe",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "can_publish",
            number: 2,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "canPublish",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "can_publish_data",
            number: 3,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "canPublishData",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "can_publish_sources",
            number: 9,
            label: 3,
            type: 14,
            typeName: ".livekit.TrackSource",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "canPublishSources",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "hidden",
            number: 7,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "hidden",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "recorder",
            number: 8,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "recorder",
            options: {
              ctype: 0,
              packed: false,
              jstype: 0,
              lazy: false,
              deprecated: true,
              weak: false,
              uninterpretedOption: [],
            },
            proto3Optional: false,
          },
          {
            name: "can_update_metadata",
            number: 10,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "canUpdateMetadata",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "agent",
            number: 11,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "agent",
            options: {
              ctype: 0,
              packed: false,
              jstype: 0,
              lazy: false,
              deprecated: true,
              weak: false,
              uninterpretedOption: [],
            },
            proto3Optional: false,
          },
          {
            name: "can_subscribe_metrics",
            number: 12,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "canSubscribeMetrics",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "ParticipantInfo",
        field: [
          {
            name: "sid",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "sid",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "identity",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "identity",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "state",
            number: 3,
            label: 1,
            type: 14,
            typeName: ".livekit.ParticipantInfo.State",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "state",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "tracks",
            number: 4,
            label: 3,
            type: 11,
            typeName: ".livekit.TrackInfo",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "tracks",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "metadata",
            number: 5,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "metadata",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "joined_at",
            number: 6,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "joinedAt",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "joined_at_ms",
            number: 17,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "joinedAtMs",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "name",
            number: 9,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "name",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "version",
            number: 10,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "version",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "permission",
            number: 11,
            label: 1,
            type: 11,
            typeName: ".livekit.ParticipantPermission",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "permission",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "region",
            number: 12,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "region",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "is_publisher",
            number: 13,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "isPublisher",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "kind",
            number: 14,
            label: 1,
            type: 14,
            typeName: ".livekit.ParticipantInfo.Kind",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "kind",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "attributes",
            number: 15,
            label: 3,
            type: 11,
            typeName: ".livekit.ParticipantInfo.AttributesEntry",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "attributes",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "disconnect_reason",
            number: 16,
            label: 1,
            type: 14,
            typeName: ".livekit.DisconnectReason",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "disconnectReason",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [
          {
            name: "AttributesEntry",
            field: [
              {
                name: "key",
                number: 1,
                label: 1,
                type: 9,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "key",
                options: undefined,
                proto3Optional: false,
              },
              {
                name: "value",
                number: 2,
                label: 1,
                type: 9,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "value",
                options: undefined,
                proto3Optional: false,
              },
            ],
            extension: [],
            nestedType: [],
            enumType: [],
            extensionRange: [],
            oneofDecl: [],
            options: {
              messageSetWireFormat: false,
              noStandardDescriptorAccessor: false,
              deprecated: false,
              mapEntry: true,
              uninterpretedOption: [],
            },
            reservedRange: [],
            reservedName: [],
          },
        ],
        enumType: [
          {
            name: "State",
            value: [
              { name: "JOINING", number: 0, options: undefined },
              { name: "JOINED", number: 1, options: undefined },
              { name: "ACTIVE", number: 2, options: undefined },
              { name: "DISCONNECTED", number: 3, options: undefined },
            ],
            options: undefined,
            reservedRange: [],
            reservedName: [],
          },
          {
            name: "Kind",
            value: [
              { name: "STANDARD", number: 0, options: undefined },
              { name: "INGRESS", number: 1, options: undefined },
              { name: "EGRESS", number: 2, options: undefined },
              { name: "SIP", number: 3, options: undefined },
              { name: "AGENT", number: 4, options: undefined },
            ],
            options: undefined,
            reservedRange: [],
            reservedName: [],
          },
        ],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "Encryption",
        field: [],
        extension: [],
        nestedType: [],
        enumType: [
          {
            name: "Type",
            value: [
              { name: "NONE", number: 0, options: undefined },
              {
                name: "GCM",
                number: 1,
                options: undefined,
              },
              { name: "CUSTOM", number: 2, options: undefined },
            ],
            options: undefined,
            reservedRange: [],
            reservedName: [],
          },
        ],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "SimulcastCodecInfo",
        field: [
          {
            name: "mime_type",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "mimeType",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "mid",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "mid",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "cid",
            number: 3,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "cid",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "layers",
            number: 4,
            label: 3,
            type: 11,
            typeName: ".livekit.VideoLayer",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "layers",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "TrackInfo",
        field: [
          {
            name: "sid",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "sid",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "type",
            number: 2,
            label: 1,
            type: 14,
            typeName: ".livekit.TrackType",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "type",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "name",
            number: 3,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "name",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "muted",
            number: 4,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "muted",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "width",
            number: 5,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "width",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "height",
            number: 6,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "height",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "simulcast",
            number: 7,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "simulcast",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "disable_dtx",
            number: 8,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "disableDtx",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "source",
            number: 9,
            label: 1,
            type: 14,
            typeName: ".livekit.TrackSource",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "source",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "layers",
            number: 10,
            label: 3,
            type: 11,
            typeName: ".livekit.VideoLayer",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "layers",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "mime_type",
            number: 11,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "mimeType",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "mid",
            number: 12,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "mid",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "codecs",
            number: 13,
            label: 3,
            type: 11,
            typeName: ".livekit.SimulcastCodecInfo",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "codecs",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "stereo",
            number: 14,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "stereo",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "disable_red",
            number: 15,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "disableRed",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "encryption",
            number: 16,
            label: 1,
            type: 14,
            typeName: ".livekit.Encryption.Type",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "encryption",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "stream",
            number: 17,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "stream",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "version",
            number: 18,
            label: 1,
            type: 11,
            typeName: ".livekit.TimedVersion",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "version",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "audio_features",
            number: 19,
            label: 3,
            type: 14,
            typeName: ".livekit.AudioTrackFeature",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "audioFeatures",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "backup_codec_policy",
            number: 20,
            label: 1,
            type: 14,
            typeName: ".livekit.BackupCodecPolicy",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "backupCodecPolicy",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "VideoLayer",
        field: [
          {
            name: "quality",
            number: 1,
            label: 1,
            type: 14,
            typeName: ".livekit.VideoQuality",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "quality",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "width",
            number: 2,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "width",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "height",
            number: 3,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "height",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "bitrate",
            number: 4,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "bitrate",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "ssrc",
            number: 5,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "ssrc",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "DataPacket",
        field: [
          {
            name: "kind",
            number: 1,
            label: 1,
            type: 14,
            typeName: ".livekit.DataPacket.Kind",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "kind",
            options: {
              ctype: 0,
              packed: false,
              jstype: 0,
              lazy: false,
              deprecated: true,
              weak: false,
              uninterpretedOption: [],
            },
            proto3Optional: false,
          },
          {
            name: "participant_identity",
            number: 4,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "participantIdentity",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "destination_identities",
            number: 5,
            label: 3,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "destinationIdentities",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "user",
            number: 2,
            label: 1,
            type: 11,
            typeName: ".livekit.UserPacket",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "user",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "speaker",
            number: 3,
            label: 1,
            type: 11,
            typeName: ".livekit.ActiveSpeakerUpdate",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "speaker",
            options: {
              ctype: 0,
              packed: false,
              jstype: 0,
              lazy: false,
              deprecated: true,
              weak: false,
              uninterpretedOption: [],
            },
            proto3Optional: false,
          },
          {
            name: "sip_dtmf",
            number: 6,
            label: 1,
            type: 11,
            typeName: ".livekit.SipDTMF",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "sipDtmf",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "transcription",
            number: 7,
            label: 1,
            type: 11,
            typeName: ".livekit.Transcription",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "transcription",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "metrics",
            number: 8,
            label: 1,
            type: 11,
            typeName: ".livekit.MetricsBatch",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "metrics",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "chat_message",
            number: 9,
            label: 1,
            type: 11,
            typeName: ".livekit.ChatMessage",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "chatMessage",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "rpc_request",
            number: 10,
            label: 1,
            type: 11,
            typeName: ".livekit.RpcRequest",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "rpcRequest",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "rpc_ack",
            number: 11,
            label: 1,
            type: 11,
            typeName: ".livekit.RpcAck",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "rpcAck",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "rpc_response",
            number: 12,
            label: 1,
            type: 11,
            typeName: ".livekit.RpcResponse",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "rpcResponse",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "stream_header",
            number: 13,
            label: 1,
            type: 11,
            typeName: ".livekit.DataStream.Header",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "streamHeader",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "stream_chunk",
            number: 14,
            label: 1,
            type: 11,
            typeName: ".livekit.DataStream.Chunk",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "streamChunk",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "stream_trailer",
            number: 15,
            label: 1,
            type: 11,
            typeName: ".livekit.DataStream.Trailer",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "streamTrailer",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [
          {
            name: "Kind",
            value: [
              { name: "RELIABLE", number: 0, options: undefined },
              {
                name: "LOSSY",
                number: 1,
                options: undefined,
              },
            ],
            options: undefined,
            reservedRange: [],
            reservedName: [],
          },
        ],
        extensionRange: [],
        oneofDecl: [{ name: "value", options: undefined }],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "ActiveSpeakerUpdate",
        field: [
          {
            name: "speakers",
            number: 1,
            label: 3,
            type: 11,
            typeName: ".livekit.SpeakerInfo",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "speakers",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "SpeakerInfo",
        field: [
          {
            name: "sid",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "sid",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "level",
            number: 2,
            label: 1,
            type: 2,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "level",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "active",
            number: 3,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "active",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "UserPacket",
        field: [
          {
            name: "participant_sid",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "participantSid",
            options: {
              ctype: 0,
              packed: false,
              jstype: 0,
              lazy: false,
              deprecated: true,
              weak: false,
              uninterpretedOption: [],
            },
            proto3Optional: false,
          },
          {
            name: "participant_identity",
            number: 5,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "participantIdentity",
            options: {
              ctype: 0,
              packed: false,
              jstype: 0,
              lazy: false,
              deprecated: true,
              weak: false,
              uninterpretedOption: [],
            },
            proto3Optional: false,
          },
          {
            name: "payload",
            number: 2,
            label: 1,
            type: 12,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "payload",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "destination_sids",
            number: 3,
            label: 3,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "destinationSids",
            options: {
              ctype: 0,
              packed: false,
              jstype: 0,
              lazy: false,
              deprecated: true,
              weak: false,
              uninterpretedOption: [],
            },
            proto3Optional: false,
          },
          {
            name: "destination_identities",
            number: 6,
            label: 3,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "destinationIdentities",
            options: {
              ctype: 0,
              packed: false,
              jstype: 0,
              lazy: false,
              deprecated: true,
              weak: false,
              uninterpretedOption: [],
            },
            proto3Optional: false,
          },
          {
            name: "topic",
            number: 4,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "topic",
            options: undefined,
            proto3Optional: true,
          },
          {
            name: "id",
            number: 8,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 1,
            jsonName: "id",
            options: undefined,
            proto3Optional: true,
          },
          {
            name: "start_time",
            number: 9,
            label: 1,
            type: 4,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 2,
            jsonName: "startTime",
            options: undefined,
            proto3Optional: true,
          },
          {
            name: "end_time",
            number: 10,
            label: 1,
            type: 4,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 3,
            jsonName: "endTime",
            options: undefined,
            proto3Optional: true,
          },
          {
            name: "nonce",
            number: 11,
            label: 1,
            type: 12,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "nonce",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [
          { name: "_topic", options: undefined },
          { name: "_id", options: undefined },
          {
            name: "_start_time",
            options: undefined,
          },
          { name: "_end_time", options: undefined },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "SipDTMF",
        field: [
          {
            name: "code",
            number: 3,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "code",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "digit",
            number: 4,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "digit",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "Transcription",
        field: [
          {
            name: "transcribed_participant_identity",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "transcribedParticipantIdentity",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "track_id",
            number: 3,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "trackId",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "segments",
            number: 4,
            label: 3,
            type: 11,
            typeName: ".livekit.TranscriptionSegment",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "segments",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "TranscriptionSegment",
        field: [
          {
            name: "id",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "id",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "text",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "text",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "start_time",
            number: 3,
            label: 1,
            type: 4,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "startTime",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "end_time",
            number: 4,
            label: 1,
            type: 4,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "endTime",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "final",
            number: 5,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "final",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "language",
            number: 6,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "language",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "ChatMessage",
        field: [
          {
            name: "id",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "id",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "timestamp",
            number: 2,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "timestamp",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "edit_timestamp",
            number: 3,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "editTimestamp",
            options: undefined,
            proto3Optional: true,
          },
          {
            name: "message",
            number: 4,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "message",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "deleted",
            number: 5,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "deleted",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "generated",
            number: 6,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "generated",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [{ name: "_edit_timestamp", options: undefined }],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "RpcRequest",
        field: [
          {
            name: "id",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "id",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "method",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "method",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "payload",
            number: 3,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "payload",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "response_timeout_ms",
            number: 4,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "responseTimeoutMs",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "version",
            number: 5,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "version",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "RpcAck",
        field: [
          {
            name: "request_id",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "requestId",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "RpcResponse",
        field: [
          {
            name: "request_id",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "requestId",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "payload",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "payload",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "error",
            number: 3,
            label: 1,
            type: 11,
            typeName: ".livekit.RpcError",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "error",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [{ name: "value", options: undefined }],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "RpcError",
        field: [
          {
            name: "code",
            number: 1,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "code",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "message",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "message",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "data",
            number: 3,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "data",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "ParticipantTracks",
        field: [
          {
            name: "participant_sid",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "participantSid",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "track_sids",
            number: 2,
            label: 3,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "trackSids",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "ServerInfo",
        field: [
          {
            name: "edition",
            number: 1,
            label: 1,
            type: 14,
            typeName: ".livekit.ServerInfo.Edition",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "edition",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "version",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "version",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "protocol",
            number: 3,
            label: 1,
            type: 5,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "protocol",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "region",
            number: 4,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "region",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "node_id",
            number: 5,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "nodeId",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "debug_info",
            number: 6,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "debugInfo",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "agent_protocol",
            number: 7,
            label: 1,
            type: 5,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "agentProtocol",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [
          {
            name: "Edition",
            value: [
              { name: "Standard", number: 0, options: undefined },
              {
                name: "Cloud",
                number: 1,
                options: undefined,
              },
            ],
            options: undefined,
            reservedRange: [],
            reservedName: [],
          },
        ],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "ClientInfo",
        field: [
          {
            name: "sdk",
            number: 1,
            label: 1,
            type: 14,
            typeName: ".livekit.ClientInfo.SDK",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "sdk",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "version",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "version",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "protocol",
            number: 3,
            label: 1,
            type: 5,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "protocol",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "os",
            number: 4,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "os",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "os_version",
            number: 5,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "osVersion",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "device_model",
            number: 6,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "deviceModel",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "browser",
            number: 7,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "browser",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "browser_version",
            number: 8,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "browserVersion",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "address",
            number: 9,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "address",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "network",
            number: 10,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "network",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "other_sdks",
            number: 11,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "otherSdks",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [
          {
            name: "SDK",
            value: [
              { name: "UNKNOWN", number: 0, options: undefined },
              { name: "JS", number: 1, options: undefined },
              { name: "SWIFT", number: 2, options: undefined },
              { name: "ANDROID", number: 3, options: undefined },
              { name: "FLUTTER", number: 4, options: undefined },
              { name: "GO", number: 5, options: undefined },
              { name: "UNITY", number: 6, options: undefined },
              { name: "REACT_NATIVE", number: 7, options: undefined },
              { name: "RUST", number: 8, options: undefined },
              { name: "PYTHON", number: 9, options: undefined },
              { name: "CPP", number: 10, options: undefined },
              { name: "UNITY_WEB", number: 11, options: undefined },
              { name: "NODE", number: 12, options: undefined },
            ],
            options: undefined,
            reservedRange: [],
            reservedName: [],
          },
        ],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "ClientConfiguration",
        field: [
          {
            name: "video",
            number: 1,
            label: 1,
            type: 11,
            typeName: ".livekit.VideoConfiguration",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "video",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "screen",
            number: 2,
            label: 1,
            type: 11,
            typeName: ".livekit.VideoConfiguration",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "screen",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "resume_connection",
            number: 3,
            label: 1,
            type: 14,
            typeName: ".livekit.ClientConfigSetting",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "resumeConnection",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "disabled_codecs",
            number: 4,
            label: 1,
            type: 11,
            typeName: ".livekit.DisabledCodecs",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "disabledCodecs",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "force_relay",
            number: 5,
            label: 1,
            type: 14,
            typeName: ".livekit.ClientConfigSetting",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "forceRelay",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "VideoConfiguration",
        field: [
          {
            name: "hardware_encoder",
            number: 1,
            label: 1,
            type: 14,
            typeName: ".livekit.ClientConfigSetting",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "hardwareEncoder",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "DisabledCodecs",
        field: [
          {
            name: "codecs",
            number: 1,
            label: 3,
            type: 11,
            typeName: ".livekit.Codec",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "codecs",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "publish",
            number: 2,
            label: 3,
            type: 11,
            typeName: ".livekit.Codec",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "publish",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "RTPDrift",
        field: [
          {
            name: "start_time",
            number: 1,
            label: 1,
            type: 11,
            typeName: ".google.protobuf.Timestamp",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "startTime",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "end_time",
            number: 2,
            label: 1,
            type: 11,
            typeName: ".google.protobuf.Timestamp",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "endTime",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "duration",
            number: 3,
            label: 1,
            type: 1,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "duration",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "start_timestamp",
            number: 4,
            label: 1,
            type: 4,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "startTimestamp",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "end_timestamp",
            number: 5,
            label: 1,
            type: 4,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "endTimestamp",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "rtp_clock_ticks",
            number: 6,
            label: 1,
            type: 4,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "rtpClockTicks",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "drift_samples",
            number: 7,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "driftSamples",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "drift_ms",
            number: 8,
            label: 1,
            type: 1,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "driftMs",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "clock_rate",
            number: 9,
            label: 1,
            type: 1,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "clockRate",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "RTPStats",
        field: [
          {
            name: "start_time",
            number: 1,
            label: 1,
            type: 11,
            typeName: ".google.protobuf.Timestamp",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "startTime",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "end_time",
            number: 2,
            label: 1,
            type: 11,
            typeName: ".google.protobuf.Timestamp",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "endTime",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "duration",
            number: 3,
            label: 1,
            type: 1,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "duration",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "packets",
            number: 4,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "packets",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "packet_rate",
            number: 5,
            label: 1,
            type: 1,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "packetRate",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "bytes",
            number: 6,
            label: 1,
            type: 4,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "bytes",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "header_bytes",
            number: 39,
            label: 1,
            type: 4,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "headerBytes",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "bitrate",
            number: 7,
            label: 1,
            type: 1,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "bitrate",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "packets_lost",
            number: 8,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "packetsLost",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "packet_loss_rate",
            number: 9,
            label: 1,
            type: 1,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "packetLossRate",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "packet_loss_percentage",
            number: 10,
            label: 1,
            type: 2,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "packetLossPercentage",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "packets_duplicate",
            number: 11,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "packetsDuplicate",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "packet_duplicate_rate",
            number: 12,
            label: 1,
            type: 1,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "packetDuplicateRate",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "bytes_duplicate",
            number: 13,
            label: 1,
            type: 4,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "bytesDuplicate",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "header_bytes_duplicate",
            number: 40,
            label: 1,
            type: 4,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "headerBytesDuplicate",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "bitrate_duplicate",
            number: 14,
            label: 1,
            type: 1,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "bitrateDuplicate",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "packets_padding",
            number: 15,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "packetsPadding",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "packet_padding_rate",
            number: 16,
            label: 1,
            type: 1,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "packetPaddingRate",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "bytes_padding",
            number: 17,
            label: 1,
            type: 4,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "bytesPadding",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "header_bytes_padding",
            number: 41,
            label: 1,
            type: 4,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "headerBytesPadding",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "bitrate_padding",
            number: 18,
            label: 1,
            type: 1,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "bitratePadding",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "packets_out_of_order",
            number: 19,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "packetsOutOfOrder",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "frames",
            number: 20,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "frames",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "frame_rate",
            number: 21,
            label: 1,
            type: 1,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "frameRate",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "jitter_current",
            number: 22,
            label: 1,
            type: 1,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "jitterCurrent",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "jitter_max",
            number: 23,
            label: 1,
            type: 1,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "jitterMax",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "gap_histogram",
            number: 24,
            label: 3,
            type: 11,
            typeName: ".livekit.RTPStats.GapHistogramEntry",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "gapHistogram",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "nacks",
            number: 25,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "nacks",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "nack_acks",
            number: 37,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "nackAcks",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "nack_misses",
            number: 26,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "nackMisses",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "nack_repeated",
            number: 38,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "nackRepeated",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "plis",
            number: 27,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "plis",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "last_pli",
            number: 28,
            label: 1,
            type: 11,
            typeName: ".google.protobuf.Timestamp",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "lastPli",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "firs",
            number: 29,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "firs",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "last_fir",
            number: 30,
            label: 1,
            type: 11,
            typeName: ".google.protobuf.Timestamp",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "lastFir",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "rtt_current",
            number: 31,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "rttCurrent",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "rtt_max",
            number: 32,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "rttMax",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "key_frames",
            number: 33,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "keyFrames",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "last_key_frame",
            number: 34,
            label: 1,
            type: 11,
            typeName: ".google.protobuf.Timestamp",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "lastKeyFrame",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "layer_lock_plis",
            number: 35,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "layerLockPlis",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "last_layer_lock_pli",
            number: 36,
            label: 1,
            type: 11,
            typeName: ".google.protobuf.Timestamp",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "lastLayerLockPli",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "packet_drift",
            number: 44,
            label: 1,
            type: 11,
            typeName: ".livekit.RTPDrift",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "packetDrift",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "ntp_report_drift",
            number: 45,
            label: 1,
            type: 11,
            typeName: ".livekit.RTPDrift",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "ntpReportDrift",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "rebased_report_drift",
            number: 46,
            label: 1,
            type: 11,
            typeName: ".livekit.RTPDrift",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "rebasedReportDrift",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "received_report_drift",
            number: 47,
            label: 1,
            type: 11,
            typeName: ".livekit.RTPDrift",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "receivedReportDrift",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [
          {
            name: "GapHistogramEntry",
            field: [
              {
                name: "key",
                number: 1,
                label: 1,
                type: 5,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "key",
                options: undefined,
                proto3Optional: false,
              },
              {
                name: "value",
                number: 2,
                label: 1,
                type: 13,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "value",
                options: undefined,
                proto3Optional: false,
              },
            ],
            extension: [],
            nestedType: [],
            enumType: [],
            extensionRange: [],
            oneofDecl: [],
            options: {
              messageSetWireFormat: false,
              noStandardDescriptorAccessor: false,
              deprecated: false,
              mapEntry: true,
              uninterpretedOption: [],
            },
            reservedRange: [],
            reservedName: [],
          },
        ],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "RTCPSenderReportState",
        field: [
          {
            name: "rtp_timestamp",
            number: 1,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "rtpTimestamp",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "rtp_timestamp_ext",
            number: 2,
            label: 1,
            type: 4,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "rtpTimestampExt",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "ntp_timestamp",
            number: 3,
            label: 1,
            type: 4,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "ntpTimestamp",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "at",
            number: 4,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "at",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "at_adjusted",
            number: 5,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "atAdjusted",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "packets",
            number: 6,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "packets",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "octets",
            number: 7,
            label: 1,
            type: 4,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "octets",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "RTPForwarderState",
        field: [
          {
            name: "started",
            number: 1,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "started",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "reference_layer_spatial",
            number: 2,
            label: 1,
            type: 5,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "referenceLayerSpatial",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "pre_start_time",
            number: 3,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "preStartTime",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "ext_first_timestamp",
            number: 4,
            label: 1,
            type: 4,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "extFirstTimestamp",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "dummy_start_timestamp_offset",
            number: 5,
            label: 1,
            type: 4,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "dummyStartTimestampOffset",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "rtp_munger",
            number: 6,
            label: 1,
            type: 11,
            typeName: ".livekit.RTPMungerState",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "rtpMunger",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "vp8_munger",
            number: 7,
            label: 1,
            type: 11,
            typeName: ".livekit.VP8MungerState",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "vp8Munger",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "sender_report_state",
            number: 8,
            label: 3,
            type: 11,
            typeName: ".livekit.RTCPSenderReportState",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "senderReportState",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [{ name: "codec_munger", options: undefined }],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "RTPMungerState",
        field: [
          {
            name: "ext_last_sequence_number",
            number: 1,
            label: 1,
            type: 4,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "extLastSequenceNumber",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "ext_second_last_sequence_number",
            number: 2,
            label: 1,
            type: 4,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "extSecondLastSequenceNumber",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "ext_last_timestamp",
            number: 3,
            label: 1,
            type: 4,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "extLastTimestamp",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "ext_second_last_timestamp",
            number: 4,
            label: 1,
            type: 4,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "extSecondLastTimestamp",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "last_marker",
            number: 5,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "lastMarker",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "second_last_marker",
            number: 6,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "secondLastMarker",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "VP8MungerState",
        field: [
          {
            name: "ext_last_picture_id",
            number: 1,
            label: 1,
            type: 5,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "extLastPictureId",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "picture_id_used",
            number: 2,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "pictureIdUsed",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "last_tl0_pic_idx",
            number: 3,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "lastTl0PicIdx",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "tl0_pic_idx_used",
            number: 4,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "tl0PicIdxUsed",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "tid_used",
            number: 5,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "tidUsed",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "last_key_idx",
            number: 6,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "lastKeyIdx",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "key_idx_used",
            number: 7,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "keyIdxUsed",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "TimedVersion",
        field: [
          {
            name: "unix_micro",
            number: 1,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "unixMicro",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "ticks",
            number: 2,
            label: 1,
            type: 5,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "ticks",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "DataStream",
        field: [],
        extension: [],
        nestedType: [
          {
            name: "TextHeader",
            field: [
              {
                name: "operation_type",
                number: 1,
                label: 1,
                type: 14,
                typeName: ".livekit.DataStream.OperationType",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "operationType",
                options: undefined,
                proto3Optional: false,
              },
              {
                name: "version",
                number: 2,
                label: 1,
                type: 5,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "version",
                options: undefined,
                proto3Optional: false,
              },
              {
                name: "reply_to_stream_id",
                number: 3,
                label: 1,
                type: 9,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "replyToStreamId",
                options: undefined,
                proto3Optional: false,
              },
              {
                name: "attached_stream_ids",
                number: 4,
                label: 3,
                type: 9,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "attachedStreamIds",
                options: undefined,
                proto3Optional: false,
              },
              {
                name: "generated",
                number: 5,
                label: 1,
                type: 8,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "generated",
                options: undefined,
                proto3Optional: false,
              },
            ],
            extension: [],
            nestedType: [],
            enumType: [],
            extensionRange: [],
            oneofDecl: [],
            options: undefined,
            reservedRange: [],
            reservedName: [],
          },
          {
            name: "ByteHeader",
            field: [
              {
                name: "name",
                number: 1,
                label: 1,
                type: 9,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "name",
                options: undefined,
                proto3Optional: false,
              },
            ],
            extension: [],
            nestedType: [],
            enumType: [],
            extensionRange: [],
            oneofDecl: [],
            options: undefined,
            reservedRange: [],
            reservedName: [],
          },
          {
            name: "Header",
            field: [
              {
                name: "stream_id",
                number: 1,
                label: 1,
                type: 9,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "streamId",
                options: undefined,
                proto3Optional: false,
              },
              {
                name: "timestamp",
                number: 2,
                label: 1,
                type: 3,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "timestamp",
                options: undefined,
                proto3Optional: false,
              },
              {
                name: "topic",
                number: 3,
                label: 1,
                type: 9,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "topic",
                options: undefined,
                proto3Optional: false,
              },
              {
                name: "mime_type",
                number: 4,
                label: 1,
                type: 9,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "mimeType",
                options: undefined,
                proto3Optional: false,
              },
              {
                name: "total_length",
                number: 5,
                label: 1,
                type: 4,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 1,
                jsonName: "totalLength",
                options: undefined,
                proto3Optional: true,
              },
              {
                name: "encryption_type",
                number: 7,
                label: 1,
                type: 14,
                typeName: ".livekit.Encryption.Type",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "encryptionType",
                options: undefined,
                proto3Optional: false,
              },
              {
                name: "attributes",
                number: 8,
                label: 3,
                type: 11,
                typeName: ".livekit.DataStream.Header.AttributesEntry",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "attributes",
                options: undefined,
                proto3Optional: false,
              },
              {
                name: "text_header",
                number: 9,
                label: 1,
                type: 11,
                typeName: ".livekit.DataStream.TextHeader",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "textHeader",
                options: undefined,
                proto3Optional: false,
              },
              {
                name: "byte_header",
                number: 10,
                label: 1,
                type: 11,
                typeName: ".livekit.DataStream.ByteHeader",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "byteHeader",
                options: undefined,
                proto3Optional: false,
              },
            ],
            extension: [],
            nestedType: [
              {
                name: "AttributesEntry",
                field: [
                  {
                    name: "key",
                    number: 1,
                    label: 1,
                    type: 9,
                    typeName: "",
                    extendee: "",
                    defaultValue: "",
                    oneofIndex: 0,
                    jsonName: "key",
                    options: undefined,
                    proto3Optional: false,
                  },
                  {
                    name: "value",
                    number: 2,
                    label: 1,
                    type: 9,
                    typeName: "",
                    extendee: "",
                    defaultValue: "",
                    oneofIndex: 0,
                    jsonName: "value",
                    options: undefined,
                    proto3Optional: false,
                  },
                ],
                extension: [],
                nestedType: [],
                enumType: [],
                extensionRange: [],
                oneofDecl: [],
                options: {
                  messageSetWireFormat: false,
                  noStandardDescriptorAccessor: false,
                  deprecated: false,
                  mapEntry: true,
                  uninterpretedOption: [],
                },
                reservedRange: [],
                reservedName: [],
              },
            ],
            enumType: [],
            extensionRange: [],
            oneofDecl: [
              { name: "content_header", options: undefined },
              {
                name: "_total_length",
                options: undefined,
              },
            ],
            options: undefined,
            reservedRange: [],
            reservedName: [],
          },
          {
            name: "Chunk",
            field: [
              {
                name: "stream_id",
                number: 1,
                label: 1,
                type: 9,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "streamId",
                options: undefined,
                proto3Optional: false,
              },
              {
                name: "chunk_index",
                number: 2,
                label: 1,
                type: 4,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "chunkIndex",
                options: undefined,
                proto3Optional: false,
              },
              {
                name: "content",
                number: 3,
                label: 1,
                type: 12,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "content",
                options: undefined,
                proto3Optional: false,
              },
              {
                name: "version",
                number: 4,
                label: 1,
                type: 5,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "version",
                options: undefined,
                proto3Optional: false,
              },
              {
                name: "iv",
                number: 5,
                label: 1,
                type: 12,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "iv",
                options: undefined,
                proto3Optional: true,
              },
            ],
            extension: [],
            nestedType: [],
            enumType: [],
            extensionRange: [],
            oneofDecl: [{ name: "_iv", options: undefined }],
            options: undefined,
            reservedRange: [],
            reservedName: [],
          },
          {
            name: "Trailer",
            field: [
              {
                name: "stream_id",
                number: 1,
                label: 1,
                type: 9,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "streamId",
                options: undefined,
                proto3Optional: false,
              },
              {
                name: "reason",
                number: 2,
                label: 1,
                type: 9,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "reason",
                options: undefined,
                proto3Optional: false,
              },
              {
                name: "attributes",
                number: 3,
                label: 3,
                type: 11,
                typeName: ".livekit.DataStream.Trailer.AttributesEntry",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "attributes",
                options: undefined,
                proto3Optional: false,
              },
            ],
            extension: [],
            nestedType: [
              {
                name: "AttributesEntry",
                field: [
                  {
                    name: "key",
                    number: 1,
                    label: 1,
                    type: 9,
                    typeName: "",
                    extendee: "",
                    defaultValue: "",
                    oneofIndex: 0,
                    jsonName: "key",
                    options: undefined,
                    proto3Optional: false,
                  },
                  {
                    name: "value",
                    number: 2,
                    label: 1,
                    type: 9,
                    typeName: "",
                    extendee: "",
                    defaultValue: "",
                    oneofIndex: 0,
                    jsonName: "value",
                    options: undefined,
                    proto3Optional: false,
                  },
                ],
                extension: [],
                nestedType: [],
                enumType: [],
                extensionRange: [],
                oneofDecl: [],
                options: {
                  messageSetWireFormat: false,
                  noStandardDescriptorAccessor: false,
                  deprecated: false,
                  mapEntry: true,
                  uninterpretedOption: [],
                },
                reservedRange: [],
                reservedName: [],
              },
            ],
            enumType: [],
            extensionRange: [],
            oneofDecl: [],
            options: undefined,
            reservedRange: [],
            reservedName: [],
          },
        ],
        enumType: [
          {
            name: "OperationType",
            value: [
              { name: "CREATE", number: 0, options: undefined },
              { name: "UPDATE", number: 1, options: undefined },
              { name: "DELETE", number: 2, options: undefined },
              { name: "REACTION", number: 3, options: undefined },
            ],
            options: undefined,
            reservedRange: [],
            reservedName: [],
          },
        ],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
    ],
    enumType: [
      {
        name: "AudioCodec",
        value: [
          { name: "DEFAULT_AC", number: 0, options: undefined },
          {
            name: "OPUS",
            number: 1,
            options: undefined,
          },
          { name: "AAC", number: 2, options: undefined },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "VideoCodec",
        value: [
          { name: "DEFAULT_VC", number: 0, options: undefined },
          { name: "H264_BASELINE", number: 1, options: undefined },
          { name: "H264_MAIN", number: 2, options: undefined },
          { name: "H264_HIGH", number: 3, options: undefined },
          { name: "VP8", number: 4, options: undefined },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "ImageCodec",
        value: [
          { name: "IC_DEFAULT", number: 0, options: undefined },
          {
            name: "IC_JPEG",
            number: 1,
            options: undefined,
          },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "BackupCodecPolicy",
        value: [
          { name: "REGRESSION", number: 0, options: undefined },
          {
            name: "SIMULCAST",
            number: 1,
            options: undefined,
          },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "TrackType",
        value: [
          { name: "AUDIO", number: 0, options: undefined },
          {
            name: "VIDEO",
            number: 1,
            options: undefined,
          },
          { name: "DATA", number: 2, options: undefined },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "TrackSource",
        value: [
          { name: "UNKNOWN", number: 0, options: undefined },
          { name: "CAMERA", number: 1, options: undefined },
          { name: "MICROPHONE", number: 2, options: undefined },
          { name: "SCREEN_SHARE", number: 3, options: undefined },
          { name: "SCREEN_SHARE_AUDIO", number: 4, options: undefined },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "VideoQuality",
        value: [
          { name: "LOW", number: 0, options: undefined },
          { name: "MEDIUM", number: 1, options: undefined },
          { name: "HIGH", number: 2, options: undefined },
          { name: "OFF", number: 3, options: undefined },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "ConnectionQuality",
        value: [
          { name: "POOR", number: 0, options: undefined },
          { name: "GOOD", number: 1, options: undefined },
          { name: "EXCELLENT", number: 2, options: undefined },
          { name: "LOST", number: 3, options: undefined },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "ClientConfigSetting",
        value: [
          { name: "UNSET", number: 0, options: undefined },
          {
            name: "DISABLED",
            number: 1,
            options: undefined,
          },
          { name: "ENABLED", number: 2, options: undefined },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "DisconnectReason",
        value: [
          { name: "UNKNOWN_REASON", number: 0, options: undefined },
          { name: "CLIENT_INITIATED", number: 1, options: undefined },
          { name: "DUPLICATE_IDENTITY", number: 2, options: undefined },
          { name: "SERVER_SHUTDOWN", number: 3, options: undefined },
          { name: "PARTICIPANT_REMOVED", number: 4, options: undefined },
          { name: "ROOM_DELETED", number: 5, options: undefined },
          { name: "STATE_MISMATCH", number: 6, options: undefined },
          { name: "JOIN_FAILURE", number: 7, options: undefined },
          { name: "MIGRATION", number: 8, options: undefined },
          { name: "SIGNAL_CLOSE", number: 9, options: undefined },
          { name: "ROOM_CLOSED", number: 10, options: undefined },
          { name: "USER_UNAVAILABLE", number: 11, options: undefined },
          { name: "USER_REJECTED", number: 12, options: undefined },
          { name: "SIP_TRUNK_FAILURE", number: 13, options: undefined },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "ReconnectReason",
        value: [
          { name: "RR_UNKNOWN", number: 0, options: undefined },
          { name: "RR_SIGNAL_DISCONNECTED", number: 1, options: undefined },
          { name: "RR_PUBLISHER_FAILED", number: 2, options: undefined },
          { name: "RR_SUBSCRIBER_FAILED", number: 3, options: undefined },
          { name: "RR_SWITCH_CANDIDATE", number: 4, options: undefined },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "SubscriptionError",
        value: [
          { name: "SE_UNKNOWN", number: 0, options: undefined },
          {
            name: "SE_CODEC_UNSUPPORTED",
            number: 1,
            options: undefined,
          },
          { name: "SE_TRACK_NOTFOUND", number: 2, options: undefined },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "AudioTrackFeature",
        value: [
          { name: "TF_STEREO", number: 0, options: undefined },
          { name: "TF_NO_DTX", number: 1, options: undefined },
          { name: "TF_AUTO_GAIN_CONTROL", number: 2, options: undefined },
          { name: "TF_ECHO_CANCELLATION", number: 3, options: undefined },
          { name: "TF_NOISE_SUPPRESSION", number: 4, options: undefined },
          {
            name: "TF_ENHANCED_NOISE_CANCELLATION",
            number: 5,
            options: undefined,
          },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
    ],
    service: [],
    extension: [],
    options: {
      javaPackage: "",
      javaOuterClassname: "",
      javaMultipleFiles: false,
      javaGenerateEqualsAndHash: false,
      javaStringCheckUtf8: false,
      optimizeFor: 1,
      goPackage: "github.com/livekit/protocol/livekit",
      ccGenericServices: false,
      javaGenericServices: false,
      pyGenericServices: false,
      phpGenericServices: false,
      deprecated: false,
      ccEnableArenas: true,
      objcClassPrefix: "",
      csharpNamespace: "LiveKit.Proto",
      swiftPrefix: "",
      phpClassPrefix: "",
      phpNamespace: "",
      phpMetadataNamespace: "",
      rubyPackage: "LiveKit::Proto",
      uninterpretedOption: [],
    },
    sourceCodeInfo: {
      location: [
        {
          path: [4, 0, 2, 0],
          span: [26, 2, 22],
          leadingComments: "",
          trailingComments: " list entities which IDs are greater\n",
          leadingDetachedComments: [],
        },
        {
          path: [5, 3],
          span: [74, 0, 79, 1],
          leadingComments:
            " Policy for publisher to handle subscribers that are unable to support the primary codec of a track\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [5, 3, 2, 0],
          span: [76, 2, 17],
          leadingComments:
            " default behavior, regress to backup codec and all subscribers will receive the backup codec\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [5, 3, 2, 1],
          span: [78, 2, 16],
          leadingComments:
            " encoding/send the primary and backup codec simultaneously\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 4, 2, 0],
          span: [89, 2, 25],
          leadingComments:
            " allow participant to subscribe to other tracks in the room\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 4, 2, 1],
          span: [91, 2, 23],
          leadingComments: " allow participant to publish new tracks to room\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 4, 2, 2],
          span: [93, 2, 28],
          leadingComments: " allow participant to publish data\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 4, 2, 3],
          span: [95, 2, 47],
          leadingComments: " sources that are allowed to be published\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 4, 2, 4],
          span: [97, 2, 18],
          leadingComments: " indicates that it's hidden to others\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 4, 2, 5],
          span: [100, 2, 38],
          leadingComments:
            " indicates it's a recorder instance\n deprecated: use ParticipantInfo.kind instead\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 4, 2, 6],
          span: [102, 2, 32],
          leadingComments:
            " indicates that participant can update own metadata and attributes\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 4, 2, 7],
          span: [105, 2, 36],
          leadingComments:
            " indicates that participant is an agent\n deprecated: use ParticipantInfo.kind instead\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 4, 2, 8],
          span: [107, 2, 34],
          leadingComments: " if a participant can subscribe to metrics\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 5, 4, 0, 2, 0],
          span: [115, 4, 16],
          leadingComments: " websocket' connected, but not offered yet\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 5, 4, 0, 2, 1],
          span: [117, 4, 15],
          leadingComments: " server received client offer\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 5, 4, 0, 2, 2],
          span: [119, 4, 15],
          leadingComments: " ICE connectivity established\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 5, 4, 0, 2, 3],
          span: [121, 4, 21],
          leadingComments: " WS disconnected\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 5, 4, 1, 2, 0],
          span: [125, 4, 17],
          leadingComments: " standard participants, e.g. web clients\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 5, 4, 1, 2, 1],
          span: [127, 4, 16],
          leadingComments: " only ingests streams\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 5, 4, 1, 2, 2],
          span: [129, 4, 15],
          leadingComments: " only consumes streams\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 5, 4, 1, 2, 3],
          span: [131, 4, 12],
          leadingComments: " SIP participants\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 5, 4, 1, 2, 4],
          span: [133, 4, 14],
          leadingComments: " LiveKit agents\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 5, 2, 5],
          span: [141, 2, 22],
          leadingComments:
            " timestamp when participant joined room, in seconds\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 5, 2, 6],
          span: [143, 2, 26],
          leadingComments:
            " timestamp when participant joined room, in milliseconds\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 5, 2, 11],
          span: [150, 2, 25],
          leadingComments:
            " indicates the participant has an active publisher connection\n and can publish to the server\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 8, 2, 4],
          span: [194, 2, 19],
          leadingComments:
            " original width of video (unset for audio)\n clients may receive a lower resolution version with simulcast\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 8, 2, 5],
          span: [196, 2, 20],
          leadingComments: " original height of video (unset for audio)\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 8, 2, 6],
          span: [198, 2, 21],
          leadingComments: " true if track is simulcasted\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 8, 2, 7],
          span: [200, 2, 23],
          leadingComments:
            " true if DTX (Discontinuous Transmission) is disabled for audio\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 8, 2, 8],
          span: [202, 2, 25],
          leadingComments: " source of media\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 8, 2, 10],
          span: [205, 2, 24],
          leadingComments: " mime type of codec\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 8, 2, 14],
          span: [210, 2, 24],
          leadingComments:
            " true if RED (Redundant Encoding) is disabled for audio\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 9],
          span: [226, 0, 234, 1],
          leadingComments:
            " provide information about available spatial layers\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 9, 2, 0],
          span: [228, 2, 27],
          leadingComments:
            " for tracks with a single layer, this should be HIGH\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 9, 2, 3],
          span: [232, 2, 21],
          leadingComments:
            " target bitrate in bit per second (bps), server will measure actual\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 10],
          span: [237, 0, 262, 1],
          leadingComments: " new DataPacket API\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 10, 2, 1],
          span: [244, 2, 34],
          leadingComments:
            " participant identity of user that sent the message\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 10, 2, 2],
          span: [246, 2, 45],
          leadingComments:
            " identities of participants who will receive the message (sent to all by default)\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 12, 2, 1],
          span: [271, 2, 18],
          leadingComments: " audio level, 0-1.0, 1 is loudest\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 12, 2, 2],
          span: [273, 2, 18],
          leadingComments: " true if speaker is currently active\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 13, 2, 0],
          span: [278, 2, 47],
          leadingComments: " participant ID of user that sent the message\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 13, 2, 2],
          span: [281, 2, 20],
          leadingComments: " user defined payload\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 13, 2, 3],
          span: [283, 2, 57],
          leadingComments:
            " the ID of the participants who will receive the message (sent to all by default)\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 13, 2, 4],
          span: [285, 2, 63],
          leadingComments:
            " identities of participants who will receive the message (sent to all by default)\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 13, 2, 5],
          span: [287, 2, 28],
          leadingComments: " topic under which the message was published\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 13, 2, 6],
          span: [289, 2, 25],
          leadingComments: " Unique ID to indentify the message\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 13, 2, 7],
          span: [291, 2, 33],
          leadingComments:
            " start and end time allow relating the message to specific media time\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 13, 2, 9],
          span: [294, 2, 19],
          leadingComments:
            " added by SDK to enable de-duping of messages, for INTERNAL USE ONLY\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 15, 2, 0],
          span: [306, 2, 46],
          leadingComments: " Participant that got its speech transcribed\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 17, 2, 0],
          span: [323, 2, 16],
          leadingComments: "",
          trailingComments: " uuid\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 17, 2, 2],
          span: [325, 2, 36],
          leadingComments: "",
          trailingComments:
            " populated only if the intent is to edit/update an existing message\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 17, 2, 4],
          span: [327, 2, 19],
          leadingComments: "",
          trailingComments: " true to remove message\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 17, 2, 5],
          span: [328, 2, 21],
          leadingComments: "",
          trailingComments:
            " true if the chat message has been generated by an agent from a participant's audio transcription\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 22, 2, 0],
          span: [366, 2, 29],
          leadingComments:
            " participant ID of participant to whom the tracks belong\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 23],
          span: [371, 0, 384, 1],
          leadingComments: " details about the server\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 23, 2, 5],
          span: [382, 2, 24],
          leadingComments:
            " additional debugging information. sent only if server is in development mode\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 24],
          span: [387, 0, 418, 1],
          leadingComments: " details about the client\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 24, 2, 9],
          span: [414, 2, 22],
          leadingComments: " wifi, wired, cellular, vpn, empty if not known\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 24, 2, 10],
          span: [417, 2, 25],
          leadingComments:
            ' comma separated list of additional LiveKit SDKs in use of this client, with versions\n e.g. "components-js:1.2.3,track-processors-js:1.2.3"\n',
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 25],
          span: [421, 0, 428, 1],
          leadingComments: " server provided client configuration\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 27, 2, 0],
          span: [442, 2, 28],
          leadingComments: " disabled for both publish and subscribe\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 27, 2, 1],
          span: [444, 2, 29],
          leadingComments: " only disable for publish\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [5, 9, 2, 1],
          span: [450, 2, 23],
          leadingComments: " the client initiated the disconnect\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [5, 9, 2, 2],
          span: [452, 2, 25],
          leadingComments:
            " another participant with the same identity has joined the room\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [5, 9, 2, 3],
          span: [454, 2, 22],
          leadingComments: " the server instance is shutting down\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [5, 9, 2, 4],
          span: [456, 2, 26],
          leadingComments: " RoomService.RemoveParticipant was called\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [5, 9, 2, 5],
          span: [458, 2, 19],
          leadingComments: " RoomService.DeleteRoom was called\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [5, 9, 2, 6],
          span: [460, 2, 21],
          leadingComments:
            " the client is attempting to resume a session, but server is not aware of it\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [5, 9, 2, 7],
          span: [462, 2, 19],
          leadingComments: " client was unable to connect fully\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [5, 9, 2, 8],
          span: [464, 2, 16],
          leadingComments:
            " Cloud-only, the server requested Participant to migrate the connection elsewhere\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [5, 9, 2, 9],
          span: [466, 2, 19],
          leadingComments: " the signal websocket was closed unexpectedly\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [5, 9, 2, 10],
          span: [468, 2, 19],
          leadingComments:
            " the room was closed, due to all Standard and Ingress participants having left\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [5, 9, 2, 11],
          span: [470, 2, 24],
          leadingComments: " SIP callee did not respond in time\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [5, 9, 2, 12],
          span: [472, 2, 21],
          leadingComments: " SIP callee rejected the call (busy)\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [5, 9, 2, 13],
          span: [474, 2, 25],
          leadingComments: " SIP protocol failure or unexpected response\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 29, 2, 44],
          span: [553, 2, 38],
          leadingComments: "",
          trailingComments: " NEXT_ID: 48\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 30, 2, 3],
          span: [561, 2, 15],
          leadingComments: "",
          trailingComments: " time at which this happened\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 35, 4, 0],
          span: [630, 2, 635, 3],
          leadingComments:
            " enum for operation types (specific to TextHeader)\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 35, 3, 0],
          span: [638, 2, 645, 3],
          leadingComments: " header properties specific to text streams\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 35, 3, 0, 2, 1],
          span: [640, 4, 22],
          leadingComments: "",
          trailingComments: " Optional: Version for updates/edits\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 35, 3, 0, 2, 2],
          span: [641, 4, 34],
          leadingComments: "",
          trailingComments: " Optional: Reply to specific message\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 35, 3, 0, 2, 3],
          span: [642, 4, 44],
          leadingComments: "",
          trailingComments: " file attachments for text streams\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 35, 3, 0, 2, 4],
          span: [643, 4, 23],
          leadingComments: "",
          trailingComments:
            " true if the text has been generated by an agent from a participant's audio transcription\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 35, 3, 1],
          span: [648, 2, 650, 3],
          leadingComments:
            " header properties specific to byte or file streams\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 35, 3, 2],
          span: [653, 2, 667, 3],
          leadingComments:
            " main DataStream.Header that contains a oneof for specific headers\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 35, 3, 2, 2, 0],
          span: [654, 4, 25],
          leadingComments: "",
          trailingComments: " unique identifier for this data stream\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 35, 3, 2, 2, 1],
          span: [655, 4, 24],
          leadingComments: "",
          trailingComments: " using int64 for Unix timestamp\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 35, 3, 2, 2, 4],
          span: [658, 4, 37],
          leadingComments: "",
          trailingComments:
            " only populated for finite streams, if it's a stream of unknown size this stays empty\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 35, 3, 2, 2, 5],
          span: [659, 4, 40],
          leadingComments: "",
          trailingComments: " defaults to NONE\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 35, 3, 2, 2, 6],
          span: [660, 4, 39],
          leadingComments: "",
          trailingComments:
            " user defined attributes map that can carry additional info\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 35, 3, 2, 8, 0],
          span: [663, 4, 666, 5],
          leadingComments: " oneof to choose between specific header types\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 35, 3, 3, 2, 0],
          span: [670, 4, 25],
          leadingComments: "",
          trailingComments:
            " unique identifier for this data stream to map it to the correct header\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 35, 3, 3, 2, 2],
          span: [672, 4, 22],
          leadingComments: "",
          trailingComments: " content as binary (bytes)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 35, 3, 3, 2, 3],
          span: [673, 4, 22],
          leadingComments: "",
          trailingComments:
            " a version indicating that this chunk_index has been retroactively modified and the original one needs to be replaced\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 35, 3, 3, 2, 4],
          span: [674, 4, 26],
          leadingComments: "",
          trailingComments:
            " optional, initialization vector for AES-GCM encryption\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 35, 3, 4, 2, 0],
          span: [678, 4, 25],
          leadingComments: "",
          trailingComments: " unique identifier for this data stream\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 35, 3, 4, 2, 1],
          span: [679, 4, 22],
          leadingComments: "",
          trailingComments:
            ' reason why the stream was closed (could contain "error" / "interrupted" / empty for expected end)\n',
          leadingDetachedComments: [],
        },
        {
          path: [4, 35, 3, 4, 2, 2],
          span: [680, 4, 39],
          leadingComments: "",
          trailingComments:
            " finalizing updates for the stream, can also include additional insights for errors or endTime for transcription\n",
          leadingDetachedComments: [],
        },
      ],
    },
    syntax: "proto3",
  },
  references: {
    ".livekit.AudioCodec": AudioCodec,
    ".livekit.VideoCodec": VideoCodec,
    ".livekit.ImageCodec": ImageCodec,
    ".livekit.BackupCodecPolicy": BackupCodecPolicy,
    ".livekit.TrackType": TrackType,
    ".livekit.TrackSource": TrackSource,
    ".livekit.VideoQuality": VideoQuality,
    ".livekit.ConnectionQuality": ConnectionQuality,
    ".livekit.ClientConfigSetting": ClientConfigSetting,
    ".livekit.DisconnectReason": DisconnectReason,
    ".livekit.ReconnectReason": ReconnectReason,
    ".livekit.SubscriptionError": SubscriptionError,
    ".livekit.AudioTrackFeature": AudioTrackFeature,
    ".livekit.Pagination": Pagination,
    ".livekit.Room": Room,
    ".livekit.Codec": Codec,
    ".livekit.PlayoutDelay": PlayoutDelay,
    ".livekit.ParticipantPermission": ParticipantPermission,
    ".livekit.ParticipantInfo": ParticipantInfo,
    ".livekit.ParticipantInfo.State": ParticipantInfo_State,
    ".livekit.ParticipantInfo.Kind": ParticipantInfo_Kind,
    ".livekit.ParticipantInfo.AttributesEntry": ParticipantInfo_AttributesEntry,
    ".livekit.Encryption": Encryption,
    ".livekit.Encryption.Type": Encryption_Type,
    ".livekit.SimulcastCodecInfo": SimulcastCodecInfo,
    ".livekit.TrackInfo": TrackInfo,
    ".livekit.VideoLayer": VideoLayer,
    ".livekit.DataPacket": DataPacket,
    ".livekit.DataPacket.Kind": DataPacket_Kind,
    ".livekit.ActiveSpeakerUpdate": ActiveSpeakerUpdate,
    ".livekit.SpeakerInfo": SpeakerInfo,
    ".livekit.UserPacket": UserPacket,
    ".livekit.SipDTMF": SipDTMF,
    ".livekit.Transcription": Transcription,
    ".livekit.TranscriptionSegment": TranscriptionSegment,
    ".livekit.ChatMessage": ChatMessage,
    ".livekit.RpcRequest": RpcRequest,
    ".livekit.RpcAck": RpcAck,
    ".livekit.RpcResponse": RpcResponse,
    ".livekit.RpcError": RpcError,
    ".livekit.ParticipantTracks": ParticipantTracks,
    ".livekit.ServerInfo": ServerInfo,
    ".livekit.ServerInfo.Edition": ServerInfo_Edition,
    ".livekit.ClientInfo": ClientInfo,
    ".livekit.ClientInfo.SDK": ClientInfo_SDK,
    ".livekit.ClientConfiguration": ClientConfiguration,
    ".livekit.VideoConfiguration": VideoConfiguration,
    ".livekit.DisabledCodecs": DisabledCodecs,
    ".livekit.RTPDrift": RTPDrift,
    ".livekit.RTPStats": RTPStats,
    ".livekit.RTPStats.GapHistogramEntry": RTPStats_GapHistogramEntry,
    ".livekit.RTCPSenderReportState": RTCPSenderReportState,
    ".livekit.RTPForwarderState": RTPForwarderState,
    ".livekit.RTPMungerState": RTPMungerState,
    ".livekit.VP8MungerState": VP8MungerState,
    ".livekit.TimedVersion": TimedVersion,
    ".livekit.DataStream": DataStream,
    ".livekit.DataStream.OperationType": DataStream_OperationType,
    ".livekit.DataStream.TextHeader": DataStream_TextHeader,
    ".livekit.DataStream.ByteHeader": DataStream_ByteHeader,
    ".livekit.DataStream.Header": DataStream_Header,
    ".livekit.DataStream.Header.AttributesEntry":
      DataStream_Header_AttributesEntry,
    ".livekit.DataStream.Chunk": DataStream_Chunk,
    ".livekit.DataStream.Trailer": DataStream_Trailer,
    ".livekit.DataStream.Trailer.AttributesEntry":
      DataStream_Trailer_AttributesEntry,
  },
  dependencies: [protoMetadata1, protoMetadata2],
} as const satisfies ProtoMetadata;

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | bigint
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never;
    };

function toTimestamp(date: Date): Timestamp {
  const seconds = BigInt(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { $type: "google.protobuf.Timestamp", seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds.toString()) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
