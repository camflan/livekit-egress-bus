// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: rpc/io.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FileDescriptorProto as FileDescriptorProto1 } from "ts-proto-descriptors";
import { Duration, protoMetadata as protoMetadata6 } from "../google/protobuf/duration";
import { protoMetadata as protoMetadata5 } from "../google/protobuf/empty";
import { EgressInfo, protoMetadata as protoMetadata1 } from "../livekit_egress";
import { IngressInfo, IngressState, protoMetadata as protoMetadata2 } from "../livekit_ingress";
import { protoMetadata as protoMetadata4, RoomConfiguration } from "../livekit_room";
import {
  protoMetadata as protoMetadata3,
  SIPCallInfo,
  SIPFeature,
  sIPFeatureFromJSON,
  sIPFeatureToJSON,
  SIPHeaderOptions,
  sIPHeaderOptionsFromJSON,
  sIPHeaderOptionsToJSON,
  SIPMediaEncryption,
  sIPMediaEncryptionFromJSON,
  sIPMediaEncryptionToJSON,
  SIPUri,
} from "../livekit_sip";
import { messageTypeRegistry } from "../typeRegistry";

export const protobufPackage = "rpc";

export const SIPDispatchResult = {
  /** LEGACY_ACCEPT_OR_PIN - check request_pin field */
  LEGACY_ACCEPT_OR_PIN: 0,
  ACCEPT: 1,
  REQUEST_PIN: 2,
  REJECT: 3,
  DROP: 4,
  UNRECOGNIZED: -1,
} as const;

export type SIPDispatchResult = typeof SIPDispatchResult[keyof typeof SIPDispatchResult];

export namespace SIPDispatchResult {
  export type LEGACY_ACCEPT_OR_PIN = typeof SIPDispatchResult.LEGACY_ACCEPT_OR_PIN;
  export type ACCEPT = typeof SIPDispatchResult.ACCEPT;
  export type REQUEST_PIN = typeof SIPDispatchResult.REQUEST_PIN;
  export type REJECT = typeof SIPDispatchResult.REJECT;
  export type DROP = typeof SIPDispatchResult.DROP;
  export type UNRECOGNIZED = typeof SIPDispatchResult.UNRECOGNIZED;
}

export function sIPDispatchResultFromJSON(object: any): SIPDispatchResult {
  switch (object) {
    case 0:
    case "LEGACY_ACCEPT_OR_PIN":
      return SIPDispatchResult.LEGACY_ACCEPT_OR_PIN;
    case 1:
    case "ACCEPT":
      return SIPDispatchResult.ACCEPT;
    case 2:
    case "REQUEST_PIN":
      return SIPDispatchResult.REQUEST_PIN;
    case 3:
    case "REJECT":
      return SIPDispatchResult.REJECT;
    case 4:
    case "DROP":
      return SIPDispatchResult.DROP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SIPDispatchResult.UNRECOGNIZED;
  }
}

export function sIPDispatchResultToJSON(object: SIPDispatchResult): string {
  switch (object) {
    case SIPDispatchResult.LEGACY_ACCEPT_OR_PIN:
      return "LEGACY_ACCEPT_OR_PIN";
    case SIPDispatchResult.ACCEPT:
      return "ACCEPT";
    case SIPDispatchResult.REQUEST_PIN:
      return "REQUEST_PIN";
    case SIPDispatchResult.REJECT:
      return "REJECT";
    case SIPDispatchResult.DROP:
      return "DROP";
    case SIPDispatchResult.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface GetEgressRequest {
  $type: "rpc.GetEgressRequest";
  egressId: string;
}

export interface UpdateMetricsRequest {
  $type: "rpc.UpdateMetricsRequest";
  info: EgressInfo | undefined;
  avgCpuUsage: number;
  maxCpuUsage: number;
}

/** Query an ingress info from an ingress ID or stream key */
export interface GetIngressInfoRequest {
  $type: "rpc.GetIngressInfoRequest";
  ingressId: string;
  streamKey: string;
}

export interface GetIngressInfoResponse {
  $type: "rpc.GetIngressInfoResponse";
  info: IngressInfo | undefined;
  token: string;
  wsUrl: string;
  loggingFields: { [key: string]: string };
}

export interface GetIngressInfoResponse_LoggingFieldsEntry {
  $type: "rpc.GetIngressInfoResponse.LoggingFieldsEntry";
  key: string;
  value: string;
}

/** Request to store an update to the ingress state ingress -> service */
export interface UpdateIngressStateRequest {
  $type: "rpc.UpdateIngressStateRequest";
  ingressId: string;
  state: IngressState | undefined;
}

export interface GetSIPTrunkAuthenticationRequest {
  $type: "rpc.GetSIPTrunkAuthenticationRequest";
  /** @deprecated */
  sipCallId: string;
  /**
   * What Number is calling
   *
   * @deprecated
   */
  from: string;
  /**
   * What Host is calling
   *
   * @deprecated
   */
  fromHost: string;
  /**
   * What Number was called
   *
   * @deprecated
   */
  to: string;
  /**
   * What Host was called
   *
   * @deprecated
   */
  toHost: string;
  /**
   * What is the IP address of the called number
   *
   * @deprecated
   */
  srcAddress: string;
  call: SIPCall | undefined;
}

export interface GetSIPTrunkAuthenticationResponse {
  $type: "rpc.GetSIPTrunkAuthenticationResponse";
  /** Expected username and password */
  username: string;
  password: string;
  drop: boolean;
  /** Trunk used to fulfill this request */
  sipTrunkId: string;
  /** Used in Cloud only */
  projectId: string;
}

export interface EvaluateSIPDispatchRulesRequest {
  $type: "rpc.EvaluateSIPDispatchRulesRequest";
  /** @deprecated */
  sipCallId: string;
  /** @deprecated */
  sipParticipantId: string;
  /** Trunk from the auth response, if any */
  sipTrunkId: string;
  /**
   * What Number is calling
   *
   * @deprecated
   */
  callingNumber: string;
  /**
   * What Host is calling
   *
   * @deprecated
   */
  callingHost: string;
  /**
   * What Number was called
   *
   * @deprecated
   */
  calledNumber: string;
  /**
   * What is the IP address of the called number
   *
   * @deprecated
   */
  srcAddress: string;
  /** What pin has been entered if any */
  pin: string;
  /** Caller rejected pin prompt, only try public rooms */
  noPin: boolean;
  /**
   * What Host was called
   *
   * @deprecated
   */
  calledHost: string;
  /**
   * Extra participant attributes added for this call.
   * Usually include provider-specific metadata.
   */
  extraAttributes: { [key: string]: string };
  call: SIPCall | undefined;
}

export interface EvaluateSIPDispatchRulesRequest_ExtraAttributesEntry {
  $type: "rpc.EvaluateSIPDispatchRulesRequest.ExtraAttributesEntry";
  key: string;
  value: string;
}

export interface EvaluateSIPDispatchRulesResponse {
  $type: "rpc.EvaluateSIPDispatchRulesResponse";
  /** non-empty string if SIPParticipant should be placed a room */
  roomName: string;
  /** What should be used for the LiveKit participant identity */
  participantIdentity: string;
  /** What should be used for the LiveKit participant name */
  participantName: string;
  /** What should be used for the LiveKit participant metadata */
  participantMetadata: string;
  /** What should be used for the LiveKit participant attributes */
  participantAttributes: { [key: string]: string };
  /**
   * see result
   *
   * @deprecated
   */
  requestPin: boolean;
  /** optional token that should be used when creating LiveKit participant */
  token: string;
  /** optional websocket url that should be used when creating LiveKit participant */
  wsUrl: string;
  result: SIPDispatchResult;
  /** Trunk used to fulfill this request */
  sipTrunkId: string;
  /** Dispatch Rule used to fulfill this request */
  sipDispatchRuleId: string;
  /** Used in Cloud only */
  projectId: string;
  /**
   * Include these SIP X-* headers in 200 OK response to INVITE.
   * These headers are included as-is and may help identify triggered LiveKit Dispatch Rule for the other SIP endpoint.
   */
  headers: { [key: string]: string };
  /**
   * Map SIP X-* headers from INVITE to SIP participant attributes.
   * Keys are the names of X-* headers and values are the names of attributes they will be mapped to.
   */
  headersToAttributes: { [key: string]: string };
  /**
   * Map LiveKit attributes to SIP X-* headers when sending BYE or REFER requests.
   * Keys are the names of attributes and values are the names of X-* headers they will be mapped to.
   */
  attributesToHeaders: { [key: string]: string };
  /**
   * Map SIP headers from INVITE to sip.h.* participant attributes automatically.
   *
   * When the names of required headers is known, using headers_to_attributes is strongly recommended.
   *
   * When mapping INVITE headers to response headers with attributes_to_headers map,
   * lowercase header names should be used, for example: sip.h.x-custom-header.
   */
  includeHeaders: SIPHeaderOptions;
  enabledFeatures: SIPFeature[];
  /** Max time for the caller to wait for track subscription. */
  ringingTimeout:
    | Duration
    | undefined;
  /** Max call duration. */
  maxCallDuration:
    | Duration
    | undefined;
  /**
   * Room preset and config are used only to generate tokens
   * once tokens are returned by this response consistently, it will no longer
   * be needed
   */
  roomPreset: string;
  roomConfig: RoomConfiguration | undefined;
  mediaEncryption: SIPMediaEncryption;
}

export interface EvaluateSIPDispatchRulesResponse_ParticipantAttributesEntry {
  $type: "rpc.EvaluateSIPDispatchRulesResponse.ParticipantAttributesEntry";
  key: string;
  value: string;
}

export interface EvaluateSIPDispatchRulesResponse_HeadersEntry {
  $type: "rpc.EvaluateSIPDispatchRulesResponse.HeadersEntry";
  key: string;
  value: string;
}

export interface EvaluateSIPDispatchRulesResponse_HeadersToAttributesEntry {
  $type: "rpc.EvaluateSIPDispatchRulesResponse.HeadersToAttributesEntry";
  key: string;
  value: string;
}

export interface EvaluateSIPDispatchRulesResponse_AttributesToHeadersEntry {
  $type: "rpc.EvaluateSIPDispatchRulesResponse.AttributesToHeadersEntry";
  key: string;
  value: string;
}

export interface UpdateSIPCallStateRequest {
  $type: "rpc.UpdateSIPCallStateRequest";
  callInfo: SIPCallInfo | undefined;
}

export interface SIPCall {
  $type: "rpc.SIPCall";
  lkCallId: string;
  /** source ip (without port) */
  sourceIp: string;
  /** address in the request line (INVITE) */
  address:
    | SIPUri
    | undefined;
  /** From header */
  from:
    | SIPUri
    | undefined;
  /** To header */
  to:
    | SIPUri
    | undefined;
  /** Via headers */
  via: SIPUri[];
}

function createBaseGetEgressRequest(): GetEgressRequest {
  return { $type: "rpc.GetEgressRequest", egressId: "" };
}

export const GetEgressRequest: MessageFns<GetEgressRequest, "rpc.GetEgressRequest"> = {
  $type: "rpc.GetEgressRequest" as const,

  encode(message: GetEgressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.egressId !== "") {
      writer.uint32(10).string(message.egressId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEgressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEgressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.egressId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEgressRequest {
    return {
      $type: GetEgressRequest.$type,
      egressId: isSet(object.egressId) ? globalThis.String(object.egressId) : "",
    };
  },

  toJSON(message: GetEgressRequest): unknown {
    const obj: any = {};
    if (message.egressId !== "") {
      obj.egressId = message.egressId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetEgressRequest>, I>>(base?: I): GetEgressRequest {
    return GetEgressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetEgressRequest>, I>>(object: I): GetEgressRequest {
    const message = createBaseGetEgressRequest();
    message.egressId = object.egressId ?? "";
    return message;
  },
};

messageTypeRegistry.set(GetEgressRequest.$type, GetEgressRequest);

function createBaseUpdateMetricsRequest(): UpdateMetricsRequest {
  return { $type: "rpc.UpdateMetricsRequest", info: undefined, avgCpuUsage: 0, maxCpuUsage: 0 };
}

export const UpdateMetricsRequest: MessageFns<UpdateMetricsRequest, "rpc.UpdateMetricsRequest"> = {
  $type: "rpc.UpdateMetricsRequest" as const,

  encode(message: UpdateMetricsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.info !== undefined) {
      EgressInfo.encode(message.info, writer.uint32(10).fork()).join();
    }
    if (message.avgCpuUsage !== 0) {
      writer.uint32(29).float(message.avgCpuUsage);
    }
    if (message.maxCpuUsage !== 0) {
      writer.uint32(37).float(message.maxCpuUsage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateMetricsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMetricsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.info = EgressInfo.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.avgCpuUsage = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.maxCpuUsage = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMetricsRequest {
    return {
      $type: UpdateMetricsRequest.$type,
      info: isSet(object.info) ? EgressInfo.fromJSON(object.info) : undefined,
      avgCpuUsage: isSet(object.avgCpuUsage) ? globalThis.Number(object.avgCpuUsage) : 0,
      maxCpuUsage: isSet(object.maxCpuUsage) ? globalThis.Number(object.maxCpuUsage) : 0,
    };
  },

  toJSON(message: UpdateMetricsRequest): unknown {
    const obj: any = {};
    if (message.info !== undefined) {
      obj.info = EgressInfo.toJSON(message.info);
    }
    if (message.avgCpuUsage !== 0) {
      obj.avgCpuUsage = message.avgCpuUsage;
    }
    if (message.maxCpuUsage !== 0) {
      obj.maxCpuUsage = message.maxCpuUsage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateMetricsRequest>, I>>(base?: I): UpdateMetricsRequest {
    return UpdateMetricsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateMetricsRequest>, I>>(object: I): UpdateMetricsRequest {
    const message = createBaseUpdateMetricsRequest();
    message.info = (object.info !== undefined && object.info !== null)
      ? EgressInfo.fromPartial(object.info)
      : undefined;
    message.avgCpuUsage = object.avgCpuUsage ?? 0;
    message.maxCpuUsage = object.maxCpuUsage ?? 0;
    return message;
  },
};

messageTypeRegistry.set(UpdateMetricsRequest.$type, UpdateMetricsRequest);

function createBaseGetIngressInfoRequest(): GetIngressInfoRequest {
  return { $type: "rpc.GetIngressInfoRequest", ingressId: "", streamKey: "" };
}

export const GetIngressInfoRequest: MessageFns<GetIngressInfoRequest, "rpc.GetIngressInfoRequest"> = {
  $type: "rpc.GetIngressInfoRequest" as const,

  encode(message: GetIngressInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ingressId !== "") {
      writer.uint32(10).string(message.ingressId);
    }
    if (message.streamKey !== "") {
      writer.uint32(18).string(message.streamKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIngressInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIngressInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ingressId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.streamKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIngressInfoRequest {
    return {
      $type: GetIngressInfoRequest.$type,
      ingressId: isSet(object.ingressId) ? globalThis.String(object.ingressId) : "",
      streamKey: isSet(object.streamKey) ? globalThis.String(object.streamKey) : "",
    };
  },

  toJSON(message: GetIngressInfoRequest): unknown {
    const obj: any = {};
    if (message.ingressId !== "") {
      obj.ingressId = message.ingressId;
    }
    if (message.streamKey !== "") {
      obj.streamKey = message.streamKey;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetIngressInfoRequest>, I>>(base?: I): GetIngressInfoRequest {
    return GetIngressInfoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetIngressInfoRequest>, I>>(object: I): GetIngressInfoRequest {
    const message = createBaseGetIngressInfoRequest();
    message.ingressId = object.ingressId ?? "";
    message.streamKey = object.streamKey ?? "";
    return message;
  },
};

messageTypeRegistry.set(GetIngressInfoRequest.$type, GetIngressInfoRequest);

function createBaseGetIngressInfoResponse(): GetIngressInfoResponse {
  return { $type: "rpc.GetIngressInfoResponse", info: undefined, token: "", wsUrl: "", loggingFields: {} };
}

export const GetIngressInfoResponse: MessageFns<GetIngressInfoResponse, "rpc.GetIngressInfoResponse"> = {
  $type: "rpc.GetIngressInfoResponse" as const,

  encode(message: GetIngressInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.info !== undefined) {
      IngressInfo.encode(message.info, writer.uint32(10).fork()).join();
    }
    if (message.token !== "") {
      writer.uint32(18).string(message.token);
    }
    if (message.wsUrl !== "") {
      writer.uint32(26).string(message.wsUrl);
    }
    Object.entries(message.loggingFields).forEach(([key, value]) => {
      GetIngressInfoResponse_LoggingFieldsEntry.encode({
        $type: "rpc.GetIngressInfoResponse.LoggingFieldsEntry",
        key: key as any,
        value,
      }, writer.uint32(34).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIngressInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIngressInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.info = IngressInfo.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.wsUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = GetIngressInfoResponse_LoggingFieldsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.loggingFields[entry4.key] = entry4.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIngressInfoResponse {
    return {
      $type: GetIngressInfoResponse.$type,
      info: isSet(object.info) ? IngressInfo.fromJSON(object.info) : undefined,
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      wsUrl: isSet(object.wsUrl) ? globalThis.String(object.wsUrl) : "",
      loggingFields: isObject(object.loggingFields)
        ? Object.entries(object.loggingFields).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: GetIngressInfoResponse): unknown {
    const obj: any = {};
    if (message.info !== undefined) {
      obj.info = IngressInfo.toJSON(message.info);
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.wsUrl !== "") {
      obj.wsUrl = message.wsUrl;
    }
    if (message.loggingFields) {
      const entries = Object.entries(message.loggingFields);
      if (entries.length > 0) {
        obj.loggingFields = {};
        entries.forEach(([k, v]) => {
          obj.loggingFields[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetIngressInfoResponse>, I>>(base?: I): GetIngressInfoResponse {
    return GetIngressInfoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetIngressInfoResponse>, I>>(object: I): GetIngressInfoResponse {
    const message = createBaseGetIngressInfoResponse();
    message.info = (object.info !== undefined && object.info !== null)
      ? IngressInfo.fromPartial(object.info)
      : undefined;
    message.token = object.token ?? "";
    message.wsUrl = object.wsUrl ?? "";
    message.loggingFields = Object.entries(object.loggingFields ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

messageTypeRegistry.set(GetIngressInfoResponse.$type, GetIngressInfoResponse);

function createBaseGetIngressInfoResponse_LoggingFieldsEntry(): GetIngressInfoResponse_LoggingFieldsEntry {
  return { $type: "rpc.GetIngressInfoResponse.LoggingFieldsEntry", key: "", value: "" };
}

export const GetIngressInfoResponse_LoggingFieldsEntry: MessageFns<
  GetIngressInfoResponse_LoggingFieldsEntry,
  "rpc.GetIngressInfoResponse.LoggingFieldsEntry"
> = {
  $type: "rpc.GetIngressInfoResponse.LoggingFieldsEntry" as const,

  encode(message: GetIngressInfoResponse_LoggingFieldsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIngressInfoResponse_LoggingFieldsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIngressInfoResponse_LoggingFieldsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIngressInfoResponse_LoggingFieldsEntry {
    return {
      $type: GetIngressInfoResponse_LoggingFieldsEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: GetIngressInfoResponse_LoggingFieldsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetIngressInfoResponse_LoggingFieldsEntry>, I>>(
    base?: I,
  ): GetIngressInfoResponse_LoggingFieldsEntry {
    return GetIngressInfoResponse_LoggingFieldsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetIngressInfoResponse_LoggingFieldsEntry>, I>>(
    object: I,
  ): GetIngressInfoResponse_LoggingFieldsEntry {
    const message = createBaseGetIngressInfoResponse_LoggingFieldsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(GetIngressInfoResponse_LoggingFieldsEntry.$type, GetIngressInfoResponse_LoggingFieldsEntry);

function createBaseUpdateIngressStateRequest(): UpdateIngressStateRequest {
  return { $type: "rpc.UpdateIngressStateRequest", ingressId: "", state: undefined };
}

export const UpdateIngressStateRequest: MessageFns<UpdateIngressStateRequest, "rpc.UpdateIngressStateRequest"> = {
  $type: "rpc.UpdateIngressStateRequest" as const,

  encode(message: UpdateIngressStateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ingressId !== "") {
      writer.uint32(10).string(message.ingressId);
    }
    if (message.state !== undefined) {
      IngressState.encode(message.state, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateIngressStateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIngressStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ingressId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.state = IngressState.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIngressStateRequest {
    return {
      $type: UpdateIngressStateRequest.$type,
      ingressId: isSet(object.ingressId) ? globalThis.String(object.ingressId) : "",
      state: isSet(object.state) ? IngressState.fromJSON(object.state) : undefined,
    };
  },

  toJSON(message: UpdateIngressStateRequest): unknown {
    const obj: any = {};
    if (message.ingressId !== "") {
      obj.ingressId = message.ingressId;
    }
    if (message.state !== undefined) {
      obj.state = IngressState.toJSON(message.state);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateIngressStateRequest>, I>>(base?: I): UpdateIngressStateRequest {
    return UpdateIngressStateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateIngressStateRequest>, I>>(object: I): UpdateIngressStateRequest {
    const message = createBaseUpdateIngressStateRequest();
    message.ingressId = object.ingressId ?? "";
    message.state = (object.state !== undefined && object.state !== null)
      ? IngressState.fromPartial(object.state)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(UpdateIngressStateRequest.$type, UpdateIngressStateRequest);

function createBaseGetSIPTrunkAuthenticationRequest(): GetSIPTrunkAuthenticationRequest {
  return {
    $type: "rpc.GetSIPTrunkAuthenticationRequest",
    sipCallId: "",
    from: "",
    fromHost: "",
    to: "",
    toHost: "",
    srcAddress: "",
    call: undefined,
  };
}

export const GetSIPTrunkAuthenticationRequest: MessageFns<
  GetSIPTrunkAuthenticationRequest,
  "rpc.GetSIPTrunkAuthenticationRequest"
> = {
  $type: "rpc.GetSIPTrunkAuthenticationRequest" as const,

  encode(message: GetSIPTrunkAuthenticationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sipCallId !== "") {
      writer.uint32(50).string(message.sipCallId);
    }
    if (message.from !== "") {
      writer.uint32(18).string(message.from);
    }
    if (message.fromHost !== "") {
      writer.uint32(58).string(message.fromHost);
    }
    if (message.to !== "") {
      writer.uint32(26).string(message.to);
    }
    if (message.toHost !== "") {
      writer.uint32(42).string(message.toHost);
    }
    if (message.srcAddress !== "") {
      writer.uint32(34).string(message.srcAddress);
    }
    if (message.call !== undefined) {
      SIPCall.encode(message.call, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSIPTrunkAuthenticationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSIPTrunkAuthenticationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.sipCallId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.from = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.fromHost = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.to = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.toHost = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.srcAddress = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.call = SIPCall.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSIPTrunkAuthenticationRequest {
    return {
      $type: GetSIPTrunkAuthenticationRequest.$type,
      sipCallId: isSet(object.sipCallId) ? globalThis.String(object.sipCallId) : "",
      from: isSet(object.from) ? globalThis.String(object.from) : "",
      fromHost: isSet(object.fromHost) ? globalThis.String(object.fromHost) : "",
      to: isSet(object.to) ? globalThis.String(object.to) : "",
      toHost: isSet(object.toHost) ? globalThis.String(object.toHost) : "",
      srcAddress: isSet(object.srcAddress) ? globalThis.String(object.srcAddress) : "",
      call: isSet(object.call) ? SIPCall.fromJSON(object.call) : undefined,
    };
  },

  toJSON(message: GetSIPTrunkAuthenticationRequest): unknown {
    const obj: any = {};
    if (message.sipCallId !== "") {
      obj.sipCallId = message.sipCallId;
    }
    if (message.from !== "") {
      obj.from = message.from;
    }
    if (message.fromHost !== "") {
      obj.fromHost = message.fromHost;
    }
    if (message.to !== "") {
      obj.to = message.to;
    }
    if (message.toHost !== "") {
      obj.toHost = message.toHost;
    }
    if (message.srcAddress !== "") {
      obj.srcAddress = message.srcAddress;
    }
    if (message.call !== undefined) {
      obj.call = SIPCall.toJSON(message.call);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSIPTrunkAuthenticationRequest>, I>>(
    base?: I,
  ): GetSIPTrunkAuthenticationRequest {
    return GetSIPTrunkAuthenticationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSIPTrunkAuthenticationRequest>, I>>(
    object: I,
  ): GetSIPTrunkAuthenticationRequest {
    const message = createBaseGetSIPTrunkAuthenticationRequest();
    message.sipCallId = object.sipCallId ?? "";
    message.from = object.from ?? "";
    message.fromHost = object.fromHost ?? "";
    message.to = object.to ?? "";
    message.toHost = object.toHost ?? "";
    message.srcAddress = object.srcAddress ?? "";
    message.call = (object.call !== undefined && object.call !== null) ? SIPCall.fromPartial(object.call) : undefined;
    return message;
  },
};

messageTypeRegistry.set(GetSIPTrunkAuthenticationRequest.$type, GetSIPTrunkAuthenticationRequest);

function createBaseGetSIPTrunkAuthenticationResponse(): GetSIPTrunkAuthenticationResponse {
  return {
    $type: "rpc.GetSIPTrunkAuthenticationResponse",
    username: "",
    password: "",
    drop: false,
    sipTrunkId: "",
    projectId: "",
  };
}

export const GetSIPTrunkAuthenticationResponse: MessageFns<
  GetSIPTrunkAuthenticationResponse,
  "rpc.GetSIPTrunkAuthenticationResponse"
> = {
  $type: "rpc.GetSIPTrunkAuthenticationResponse" as const,

  encode(message: GetSIPTrunkAuthenticationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    if (message.drop !== false) {
      writer.uint32(24).bool(message.drop);
    }
    if (message.sipTrunkId !== "") {
      writer.uint32(34).string(message.sipTrunkId);
    }
    if (message.projectId !== "") {
      writer.uint32(42).string(message.projectId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSIPTrunkAuthenticationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSIPTrunkAuthenticationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.drop = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sipTrunkId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSIPTrunkAuthenticationResponse {
    return {
      $type: GetSIPTrunkAuthenticationResponse.$type,
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      drop: isSet(object.drop) ? globalThis.Boolean(object.drop) : false,
      sipTrunkId: isSet(object.sipTrunkId) ? globalThis.String(object.sipTrunkId) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
    };
  },

  toJSON(message: GetSIPTrunkAuthenticationResponse): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.drop !== false) {
      obj.drop = message.drop;
    }
    if (message.sipTrunkId !== "") {
      obj.sipTrunkId = message.sipTrunkId;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSIPTrunkAuthenticationResponse>, I>>(
    base?: I,
  ): GetSIPTrunkAuthenticationResponse {
    return GetSIPTrunkAuthenticationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSIPTrunkAuthenticationResponse>, I>>(
    object: I,
  ): GetSIPTrunkAuthenticationResponse {
    const message = createBaseGetSIPTrunkAuthenticationResponse();
    message.username = object.username ?? "";
    message.password = object.password ?? "";
    message.drop = object.drop ?? false;
    message.sipTrunkId = object.sipTrunkId ?? "";
    message.projectId = object.projectId ?? "";
    return message;
  },
};

messageTypeRegistry.set(GetSIPTrunkAuthenticationResponse.$type, GetSIPTrunkAuthenticationResponse);

function createBaseEvaluateSIPDispatchRulesRequest(): EvaluateSIPDispatchRulesRequest {
  return {
    $type: "rpc.EvaluateSIPDispatchRulesRequest",
    sipCallId: "",
    sipParticipantId: "",
    sipTrunkId: "",
    callingNumber: "",
    callingHost: "",
    calledNumber: "",
    srcAddress: "",
    pin: "",
    noPin: false,
    calledHost: "",
    extraAttributes: {},
    call: undefined,
  };
}

export const EvaluateSIPDispatchRulesRequest: MessageFns<
  EvaluateSIPDispatchRulesRequest,
  "rpc.EvaluateSIPDispatchRulesRequest"
> = {
  $type: "rpc.EvaluateSIPDispatchRulesRequest" as const,

  encode(message: EvaluateSIPDispatchRulesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sipCallId !== "") {
      writer.uint32(66).string(message.sipCallId);
    }
    if (message.sipParticipantId !== "") {
      writer.uint32(10).string(message.sipParticipantId);
    }
    if (message.sipTrunkId !== "") {
      writer.uint32(82).string(message.sipTrunkId);
    }
    if (message.callingNumber !== "") {
      writer.uint32(18).string(message.callingNumber);
    }
    if (message.callingHost !== "") {
      writer.uint32(90).string(message.callingHost);
    }
    if (message.calledNumber !== "") {
      writer.uint32(26).string(message.calledNumber);
    }
    if (message.srcAddress !== "") {
      writer.uint32(34).string(message.srcAddress);
    }
    if (message.pin !== "") {
      writer.uint32(42).string(message.pin);
    }
    if (message.noPin !== false) {
      writer.uint32(48).bool(message.noPin);
    }
    if (message.calledHost !== "") {
      writer.uint32(58).string(message.calledHost);
    }
    Object.entries(message.extraAttributes).forEach(([key, value]) => {
      EvaluateSIPDispatchRulesRequest_ExtraAttributesEntry.encode({
        $type: "rpc.EvaluateSIPDispatchRulesRequest.ExtraAttributesEntry",
        key: key as any,
        value,
      }, writer.uint32(74).fork()).join();
    });
    if (message.call !== undefined) {
      SIPCall.encode(message.call, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EvaluateSIPDispatchRulesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluateSIPDispatchRulesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.sipCallId = reader.string();
          continue;
        }
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sipParticipantId = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.sipTrunkId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.callingNumber = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.callingHost = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.calledNumber = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.srcAddress = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.pin = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.noPin = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.calledHost = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          const entry9 = EvaluateSIPDispatchRulesRequest_ExtraAttributesEntry.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.extraAttributes[entry9.key] = entry9.value;
          }
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.call = SIPCall.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluateSIPDispatchRulesRequest {
    return {
      $type: EvaluateSIPDispatchRulesRequest.$type,
      sipCallId: isSet(object.sipCallId) ? globalThis.String(object.sipCallId) : "",
      sipParticipantId: isSet(object.sipParticipantId) ? globalThis.String(object.sipParticipantId) : "",
      sipTrunkId: isSet(object.sipTrunkId) ? globalThis.String(object.sipTrunkId) : "",
      callingNumber: isSet(object.callingNumber) ? globalThis.String(object.callingNumber) : "",
      callingHost: isSet(object.callingHost) ? globalThis.String(object.callingHost) : "",
      calledNumber: isSet(object.calledNumber) ? globalThis.String(object.calledNumber) : "",
      srcAddress: isSet(object.srcAddress) ? globalThis.String(object.srcAddress) : "",
      pin: isSet(object.pin) ? globalThis.String(object.pin) : "",
      noPin: isSet(object.noPin) ? globalThis.Boolean(object.noPin) : false,
      calledHost: isSet(object.calledHost) ? globalThis.String(object.calledHost) : "",
      extraAttributes: isObject(object.extraAttributes)
        ? Object.entries(object.extraAttributes).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      call: isSet(object.call) ? SIPCall.fromJSON(object.call) : undefined,
    };
  },

  toJSON(message: EvaluateSIPDispatchRulesRequest): unknown {
    const obj: any = {};
    if (message.sipCallId !== "") {
      obj.sipCallId = message.sipCallId;
    }
    if (message.sipParticipantId !== "") {
      obj.sipParticipantId = message.sipParticipantId;
    }
    if (message.sipTrunkId !== "") {
      obj.sipTrunkId = message.sipTrunkId;
    }
    if (message.callingNumber !== "") {
      obj.callingNumber = message.callingNumber;
    }
    if (message.callingHost !== "") {
      obj.callingHost = message.callingHost;
    }
    if (message.calledNumber !== "") {
      obj.calledNumber = message.calledNumber;
    }
    if (message.srcAddress !== "") {
      obj.srcAddress = message.srcAddress;
    }
    if (message.pin !== "") {
      obj.pin = message.pin;
    }
    if (message.noPin !== false) {
      obj.noPin = message.noPin;
    }
    if (message.calledHost !== "") {
      obj.calledHost = message.calledHost;
    }
    if (message.extraAttributes) {
      const entries = Object.entries(message.extraAttributes);
      if (entries.length > 0) {
        obj.extraAttributes = {};
        entries.forEach(([k, v]) => {
          obj.extraAttributes[k] = v;
        });
      }
    }
    if (message.call !== undefined) {
      obj.call = SIPCall.toJSON(message.call);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EvaluateSIPDispatchRulesRequest>, I>>(base?: I): EvaluateSIPDispatchRulesRequest {
    return EvaluateSIPDispatchRulesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EvaluateSIPDispatchRulesRequest>, I>>(
    object: I,
  ): EvaluateSIPDispatchRulesRequest {
    const message = createBaseEvaluateSIPDispatchRulesRequest();
    message.sipCallId = object.sipCallId ?? "";
    message.sipParticipantId = object.sipParticipantId ?? "";
    message.sipTrunkId = object.sipTrunkId ?? "";
    message.callingNumber = object.callingNumber ?? "";
    message.callingHost = object.callingHost ?? "";
    message.calledNumber = object.calledNumber ?? "";
    message.srcAddress = object.srcAddress ?? "";
    message.pin = object.pin ?? "";
    message.noPin = object.noPin ?? false;
    message.calledHost = object.calledHost ?? "";
    message.extraAttributes = Object.entries(object.extraAttributes ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.call = (object.call !== undefined && object.call !== null) ? SIPCall.fromPartial(object.call) : undefined;
    return message;
  },
};

messageTypeRegistry.set(EvaluateSIPDispatchRulesRequest.$type, EvaluateSIPDispatchRulesRequest);

function createBaseEvaluateSIPDispatchRulesRequest_ExtraAttributesEntry(): EvaluateSIPDispatchRulesRequest_ExtraAttributesEntry {
  return { $type: "rpc.EvaluateSIPDispatchRulesRequest.ExtraAttributesEntry", key: "", value: "" };
}

export const EvaluateSIPDispatchRulesRequest_ExtraAttributesEntry: MessageFns<
  EvaluateSIPDispatchRulesRequest_ExtraAttributesEntry,
  "rpc.EvaluateSIPDispatchRulesRequest.ExtraAttributesEntry"
> = {
  $type: "rpc.EvaluateSIPDispatchRulesRequest.ExtraAttributesEntry" as const,

  encode(
    message: EvaluateSIPDispatchRulesRequest_ExtraAttributesEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EvaluateSIPDispatchRulesRequest_ExtraAttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluateSIPDispatchRulesRequest_ExtraAttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluateSIPDispatchRulesRequest_ExtraAttributesEntry {
    return {
      $type: EvaluateSIPDispatchRulesRequest_ExtraAttributesEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: EvaluateSIPDispatchRulesRequest_ExtraAttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EvaluateSIPDispatchRulesRequest_ExtraAttributesEntry>, I>>(
    base?: I,
  ): EvaluateSIPDispatchRulesRequest_ExtraAttributesEntry {
    return EvaluateSIPDispatchRulesRequest_ExtraAttributesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EvaluateSIPDispatchRulesRequest_ExtraAttributesEntry>, I>>(
    object: I,
  ): EvaluateSIPDispatchRulesRequest_ExtraAttributesEntry {
    const message = createBaseEvaluateSIPDispatchRulesRequest_ExtraAttributesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(
  EvaluateSIPDispatchRulesRequest_ExtraAttributesEntry.$type,
  EvaluateSIPDispatchRulesRequest_ExtraAttributesEntry,
);

function createBaseEvaluateSIPDispatchRulesResponse(): EvaluateSIPDispatchRulesResponse {
  return {
    $type: "rpc.EvaluateSIPDispatchRulesResponse",
    roomName: "",
    participantIdentity: "",
    participantName: "",
    participantMetadata: "",
    participantAttributes: {},
    requestPin: false,
    token: "",
    wsUrl: "",
    result: 0,
    sipTrunkId: "",
    sipDispatchRuleId: "",
    projectId: "",
    headers: {},
    headersToAttributes: {},
    attributesToHeaders: {},
    includeHeaders: 0,
    enabledFeatures: [],
    ringingTimeout: undefined,
    maxCallDuration: undefined,
    roomPreset: "",
    roomConfig: undefined,
    mediaEncryption: 0,
  };
}

export const EvaluateSIPDispatchRulesResponse: MessageFns<
  EvaluateSIPDispatchRulesResponse,
  "rpc.EvaluateSIPDispatchRulesResponse"
> = {
  $type: "rpc.EvaluateSIPDispatchRulesResponse" as const,

  encode(message: EvaluateSIPDispatchRulesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomName !== "") {
      writer.uint32(10).string(message.roomName);
    }
    if (message.participantIdentity !== "") {
      writer.uint32(18).string(message.participantIdentity);
    }
    if (message.participantName !== "") {
      writer.uint32(58).string(message.participantName);
    }
    if (message.participantMetadata !== "") {
      writer.uint32(66).string(message.participantMetadata);
    }
    Object.entries(message.participantAttributes).forEach(([key, value]) => {
      EvaluateSIPDispatchRulesResponse_ParticipantAttributesEntry.encode({
        $type: "rpc.EvaluateSIPDispatchRulesResponse.ParticipantAttributesEntry",
        key: key as any,
        value,
      }, writer.uint32(90).fork()).join();
    });
    if (message.requestPin !== false) {
      writer.uint32(24).bool(message.requestPin);
    }
    if (message.token !== "") {
      writer.uint32(34).string(message.token);
    }
    if (message.wsUrl !== "") {
      writer.uint32(42).string(message.wsUrl);
    }
    if (message.result !== 0) {
      writer.uint32(48).int32(message.result);
    }
    if (message.sipTrunkId !== "") {
      writer.uint32(74).string(message.sipTrunkId);
    }
    if (message.sipDispatchRuleId !== "") {
      writer.uint32(82).string(message.sipDispatchRuleId);
    }
    if (message.projectId !== "") {
      writer.uint32(98).string(message.projectId);
    }
    Object.entries(message.headers).forEach(([key, value]) => {
      EvaluateSIPDispatchRulesResponse_HeadersEntry.encode({
        $type: "rpc.EvaluateSIPDispatchRulesResponse.HeadersEntry",
        key: key as any,
        value,
      }, writer.uint32(106).fork()).join();
    });
    Object.entries(message.headersToAttributes).forEach(([key, value]) => {
      EvaluateSIPDispatchRulesResponse_HeadersToAttributesEntry.encode({
        $type: "rpc.EvaluateSIPDispatchRulesResponse.HeadersToAttributesEntry",
        key: key as any,
        value,
      }, writer.uint32(114).fork()).join();
    });
    Object.entries(message.attributesToHeaders).forEach(([key, value]) => {
      EvaluateSIPDispatchRulesResponse_AttributesToHeadersEntry.encode({
        $type: "rpc.EvaluateSIPDispatchRulesResponse.AttributesToHeadersEntry",
        key: key as any,
        value,
      }, writer.uint32(146).fork()).join();
    });
    if (message.includeHeaders !== 0) {
      writer.uint32(152).int32(message.includeHeaders);
    }
    writer.uint32(122).fork();
    for (const v of message.enabledFeatures) {
      writer.int32(v);
    }
    writer.join();
    if (message.ringingTimeout !== undefined) {
      Duration.encode(message.ringingTimeout, writer.uint32(130).fork()).join();
    }
    if (message.maxCallDuration !== undefined) {
      Duration.encode(message.maxCallDuration, writer.uint32(138).fork()).join();
    }
    if (message.roomPreset !== "") {
      writer.uint32(162).string(message.roomPreset);
    }
    if (message.roomConfig !== undefined) {
      RoomConfiguration.encode(message.roomConfig, writer.uint32(170).fork()).join();
    }
    if (message.mediaEncryption !== 0) {
      writer.uint32(176).int32(message.mediaEncryption);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EvaluateSIPDispatchRulesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluateSIPDispatchRulesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roomName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.participantIdentity = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.participantName = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.participantMetadata = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          const entry11 = EvaluateSIPDispatchRulesResponse_ParticipantAttributesEntry.decode(reader, reader.uint32());
          if (entry11.value !== undefined) {
            message.participantAttributes[entry11.key] = entry11.value;
          }
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.requestPin = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.wsUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.result = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.sipTrunkId = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.sipDispatchRuleId = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          const entry13 = EvaluateSIPDispatchRulesResponse_HeadersEntry.decode(reader, reader.uint32());
          if (entry13.value !== undefined) {
            message.headers[entry13.key] = entry13.value;
          }
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          const entry14 = EvaluateSIPDispatchRulesResponse_HeadersToAttributesEntry.decode(reader, reader.uint32());
          if (entry14.value !== undefined) {
            message.headersToAttributes[entry14.key] = entry14.value;
          }
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          const entry18 = EvaluateSIPDispatchRulesResponse_AttributesToHeadersEntry.decode(reader, reader.uint32());
          if (entry18.value !== undefined) {
            message.attributesToHeaders[entry18.key] = entry18.value;
          }
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.includeHeaders = reader.int32() as any;
          continue;
        }
        case 15: {
          if (tag === 120) {
            message.enabledFeatures.push(reader.int32() as any);

            continue;
          }

          if (tag === 122) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.enabledFeatures.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.ringingTimeout = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.maxCallDuration = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.roomPreset = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.roomConfig = RoomConfiguration.decode(reader, reader.uint32());
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.mediaEncryption = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluateSIPDispatchRulesResponse {
    return {
      $type: EvaluateSIPDispatchRulesResponse.$type,
      roomName: isSet(object.roomName) ? globalThis.String(object.roomName) : "",
      participantIdentity: isSet(object.participantIdentity) ? globalThis.String(object.participantIdentity) : "",
      participantName: isSet(object.participantName) ? globalThis.String(object.participantName) : "",
      participantMetadata: isSet(object.participantMetadata) ? globalThis.String(object.participantMetadata) : "",
      participantAttributes: isObject(object.participantAttributes)
        ? Object.entries(object.participantAttributes).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      requestPin: isSet(object.requestPin) ? globalThis.Boolean(object.requestPin) : false,
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      wsUrl: isSet(object.wsUrl) ? globalThis.String(object.wsUrl) : "",
      result: isSet(object.result) ? sIPDispatchResultFromJSON(object.result) : 0,
      sipTrunkId: isSet(object.sipTrunkId) ? globalThis.String(object.sipTrunkId) : "",
      sipDispatchRuleId: isSet(object.sipDispatchRuleId) ? globalThis.String(object.sipDispatchRuleId) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      headers: isObject(object.headers)
        ? Object.entries(object.headers).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      headersToAttributes: isObject(object.headersToAttributes)
        ? Object.entries(object.headersToAttributes).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      attributesToHeaders: isObject(object.attributesToHeaders)
        ? Object.entries(object.attributesToHeaders).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      includeHeaders: isSet(object.includeHeaders) ? sIPHeaderOptionsFromJSON(object.includeHeaders) : 0,
      enabledFeatures: globalThis.Array.isArray(object?.enabledFeatures)
        ? object.enabledFeatures.map((e: any) => sIPFeatureFromJSON(e))
        : [],
      ringingTimeout: isSet(object.ringingTimeout) ? Duration.fromJSON(object.ringingTimeout) : undefined,
      maxCallDuration: isSet(object.maxCallDuration) ? Duration.fromJSON(object.maxCallDuration) : undefined,
      roomPreset: isSet(object.roomPreset) ? globalThis.String(object.roomPreset) : "",
      roomConfig: isSet(object.roomConfig) ? RoomConfiguration.fromJSON(object.roomConfig) : undefined,
      mediaEncryption: isSet(object.mediaEncryption) ? sIPMediaEncryptionFromJSON(object.mediaEncryption) : 0,
    };
  },

  toJSON(message: EvaluateSIPDispatchRulesResponse): unknown {
    const obj: any = {};
    if (message.roomName !== "") {
      obj.roomName = message.roomName;
    }
    if (message.participantIdentity !== "") {
      obj.participantIdentity = message.participantIdentity;
    }
    if (message.participantName !== "") {
      obj.participantName = message.participantName;
    }
    if (message.participantMetadata !== "") {
      obj.participantMetadata = message.participantMetadata;
    }
    if (message.participantAttributes) {
      const entries = Object.entries(message.participantAttributes);
      if (entries.length > 0) {
        obj.participantAttributes = {};
        entries.forEach(([k, v]) => {
          obj.participantAttributes[k] = v;
        });
      }
    }
    if (message.requestPin !== false) {
      obj.requestPin = message.requestPin;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.wsUrl !== "") {
      obj.wsUrl = message.wsUrl;
    }
    if (message.result !== 0) {
      obj.result = sIPDispatchResultToJSON(message.result);
    }
    if (message.sipTrunkId !== "") {
      obj.sipTrunkId = message.sipTrunkId;
    }
    if (message.sipDispatchRuleId !== "") {
      obj.sipDispatchRuleId = message.sipDispatchRuleId;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.headers) {
      const entries = Object.entries(message.headers);
      if (entries.length > 0) {
        obj.headers = {};
        entries.forEach(([k, v]) => {
          obj.headers[k] = v;
        });
      }
    }
    if (message.headersToAttributes) {
      const entries = Object.entries(message.headersToAttributes);
      if (entries.length > 0) {
        obj.headersToAttributes = {};
        entries.forEach(([k, v]) => {
          obj.headersToAttributes[k] = v;
        });
      }
    }
    if (message.attributesToHeaders) {
      const entries = Object.entries(message.attributesToHeaders);
      if (entries.length > 0) {
        obj.attributesToHeaders = {};
        entries.forEach(([k, v]) => {
          obj.attributesToHeaders[k] = v;
        });
      }
    }
    if (message.includeHeaders !== 0) {
      obj.includeHeaders = sIPHeaderOptionsToJSON(message.includeHeaders);
    }
    if (message.enabledFeatures?.length) {
      obj.enabledFeatures = message.enabledFeatures.map((e) => sIPFeatureToJSON(e));
    }
    if (message.ringingTimeout !== undefined) {
      obj.ringingTimeout = Duration.toJSON(message.ringingTimeout);
    }
    if (message.maxCallDuration !== undefined) {
      obj.maxCallDuration = Duration.toJSON(message.maxCallDuration);
    }
    if (message.roomPreset !== "") {
      obj.roomPreset = message.roomPreset;
    }
    if (message.roomConfig !== undefined) {
      obj.roomConfig = RoomConfiguration.toJSON(message.roomConfig);
    }
    if (message.mediaEncryption !== 0) {
      obj.mediaEncryption = sIPMediaEncryptionToJSON(message.mediaEncryption);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EvaluateSIPDispatchRulesResponse>, I>>(
    base?: I,
  ): EvaluateSIPDispatchRulesResponse {
    return EvaluateSIPDispatchRulesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EvaluateSIPDispatchRulesResponse>, I>>(
    object: I,
  ): EvaluateSIPDispatchRulesResponse {
    const message = createBaseEvaluateSIPDispatchRulesResponse();
    message.roomName = object.roomName ?? "";
    message.participantIdentity = object.participantIdentity ?? "";
    message.participantName = object.participantName ?? "";
    message.participantMetadata = object.participantMetadata ?? "";
    message.participantAttributes = Object.entries(object.participantAttributes ?? {}).reduce<
      { [key: string]: string }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.requestPin = object.requestPin ?? false;
    message.token = object.token ?? "";
    message.wsUrl = object.wsUrl ?? "";
    message.result = object.result ?? 0;
    message.sipTrunkId = object.sipTrunkId ?? "";
    message.sipDispatchRuleId = object.sipDispatchRuleId ?? "";
    message.projectId = object.projectId ?? "";
    message.headers = Object.entries(object.headers ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.headersToAttributes = Object.entries(object.headersToAttributes ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.attributesToHeaders = Object.entries(object.attributesToHeaders ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.includeHeaders = object.includeHeaders ?? 0;
    message.enabledFeatures = object.enabledFeatures?.map((e) => e) || [];
    message.ringingTimeout = (object.ringingTimeout !== undefined && object.ringingTimeout !== null)
      ? Duration.fromPartial(object.ringingTimeout)
      : undefined;
    message.maxCallDuration = (object.maxCallDuration !== undefined && object.maxCallDuration !== null)
      ? Duration.fromPartial(object.maxCallDuration)
      : undefined;
    message.roomPreset = object.roomPreset ?? "";
    message.roomConfig = (object.roomConfig !== undefined && object.roomConfig !== null)
      ? RoomConfiguration.fromPartial(object.roomConfig)
      : undefined;
    message.mediaEncryption = object.mediaEncryption ?? 0;
    return message;
  },
};

messageTypeRegistry.set(EvaluateSIPDispatchRulesResponse.$type, EvaluateSIPDispatchRulesResponse);

function createBaseEvaluateSIPDispatchRulesResponse_ParticipantAttributesEntry(): EvaluateSIPDispatchRulesResponse_ParticipantAttributesEntry {
  return { $type: "rpc.EvaluateSIPDispatchRulesResponse.ParticipantAttributesEntry", key: "", value: "" };
}

export const EvaluateSIPDispatchRulesResponse_ParticipantAttributesEntry: MessageFns<
  EvaluateSIPDispatchRulesResponse_ParticipantAttributesEntry,
  "rpc.EvaluateSIPDispatchRulesResponse.ParticipantAttributesEntry"
> = {
  $type: "rpc.EvaluateSIPDispatchRulesResponse.ParticipantAttributesEntry" as const,

  encode(
    message: EvaluateSIPDispatchRulesResponse_ParticipantAttributesEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): EvaluateSIPDispatchRulesResponse_ParticipantAttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluateSIPDispatchRulesResponse_ParticipantAttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluateSIPDispatchRulesResponse_ParticipantAttributesEntry {
    return {
      $type: EvaluateSIPDispatchRulesResponse_ParticipantAttributesEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: EvaluateSIPDispatchRulesResponse_ParticipantAttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EvaluateSIPDispatchRulesResponse_ParticipantAttributesEntry>, I>>(
    base?: I,
  ): EvaluateSIPDispatchRulesResponse_ParticipantAttributesEntry {
    return EvaluateSIPDispatchRulesResponse_ParticipantAttributesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EvaluateSIPDispatchRulesResponse_ParticipantAttributesEntry>, I>>(
    object: I,
  ): EvaluateSIPDispatchRulesResponse_ParticipantAttributesEntry {
    const message = createBaseEvaluateSIPDispatchRulesResponse_ParticipantAttributesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(
  EvaluateSIPDispatchRulesResponse_ParticipantAttributesEntry.$type,
  EvaluateSIPDispatchRulesResponse_ParticipantAttributesEntry,
);

function createBaseEvaluateSIPDispatchRulesResponse_HeadersEntry(): EvaluateSIPDispatchRulesResponse_HeadersEntry {
  return { $type: "rpc.EvaluateSIPDispatchRulesResponse.HeadersEntry", key: "", value: "" };
}

export const EvaluateSIPDispatchRulesResponse_HeadersEntry: MessageFns<
  EvaluateSIPDispatchRulesResponse_HeadersEntry,
  "rpc.EvaluateSIPDispatchRulesResponse.HeadersEntry"
> = {
  $type: "rpc.EvaluateSIPDispatchRulesResponse.HeadersEntry" as const,

  encode(
    message: EvaluateSIPDispatchRulesResponse_HeadersEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EvaluateSIPDispatchRulesResponse_HeadersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluateSIPDispatchRulesResponse_HeadersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluateSIPDispatchRulesResponse_HeadersEntry {
    return {
      $type: EvaluateSIPDispatchRulesResponse_HeadersEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: EvaluateSIPDispatchRulesResponse_HeadersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EvaluateSIPDispatchRulesResponse_HeadersEntry>, I>>(
    base?: I,
  ): EvaluateSIPDispatchRulesResponse_HeadersEntry {
    return EvaluateSIPDispatchRulesResponse_HeadersEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EvaluateSIPDispatchRulesResponse_HeadersEntry>, I>>(
    object: I,
  ): EvaluateSIPDispatchRulesResponse_HeadersEntry {
    const message = createBaseEvaluateSIPDispatchRulesResponse_HeadersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(
  EvaluateSIPDispatchRulesResponse_HeadersEntry.$type,
  EvaluateSIPDispatchRulesResponse_HeadersEntry,
);

function createBaseEvaluateSIPDispatchRulesResponse_HeadersToAttributesEntry(): EvaluateSIPDispatchRulesResponse_HeadersToAttributesEntry {
  return { $type: "rpc.EvaluateSIPDispatchRulesResponse.HeadersToAttributesEntry", key: "", value: "" };
}

export const EvaluateSIPDispatchRulesResponse_HeadersToAttributesEntry: MessageFns<
  EvaluateSIPDispatchRulesResponse_HeadersToAttributesEntry,
  "rpc.EvaluateSIPDispatchRulesResponse.HeadersToAttributesEntry"
> = {
  $type: "rpc.EvaluateSIPDispatchRulesResponse.HeadersToAttributesEntry" as const,

  encode(
    message: EvaluateSIPDispatchRulesResponse_HeadersToAttributesEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EvaluateSIPDispatchRulesResponse_HeadersToAttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluateSIPDispatchRulesResponse_HeadersToAttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluateSIPDispatchRulesResponse_HeadersToAttributesEntry {
    return {
      $type: EvaluateSIPDispatchRulesResponse_HeadersToAttributesEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: EvaluateSIPDispatchRulesResponse_HeadersToAttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EvaluateSIPDispatchRulesResponse_HeadersToAttributesEntry>, I>>(
    base?: I,
  ): EvaluateSIPDispatchRulesResponse_HeadersToAttributesEntry {
    return EvaluateSIPDispatchRulesResponse_HeadersToAttributesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EvaluateSIPDispatchRulesResponse_HeadersToAttributesEntry>, I>>(
    object: I,
  ): EvaluateSIPDispatchRulesResponse_HeadersToAttributesEntry {
    const message = createBaseEvaluateSIPDispatchRulesResponse_HeadersToAttributesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(
  EvaluateSIPDispatchRulesResponse_HeadersToAttributesEntry.$type,
  EvaluateSIPDispatchRulesResponse_HeadersToAttributesEntry,
);

function createBaseEvaluateSIPDispatchRulesResponse_AttributesToHeadersEntry(): EvaluateSIPDispatchRulesResponse_AttributesToHeadersEntry {
  return { $type: "rpc.EvaluateSIPDispatchRulesResponse.AttributesToHeadersEntry", key: "", value: "" };
}

export const EvaluateSIPDispatchRulesResponse_AttributesToHeadersEntry: MessageFns<
  EvaluateSIPDispatchRulesResponse_AttributesToHeadersEntry,
  "rpc.EvaluateSIPDispatchRulesResponse.AttributesToHeadersEntry"
> = {
  $type: "rpc.EvaluateSIPDispatchRulesResponse.AttributesToHeadersEntry" as const,

  encode(
    message: EvaluateSIPDispatchRulesResponse_AttributesToHeadersEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EvaluateSIPDispatchRulesResponse_AttributesToHeadersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluateSIPDispatchRulesResponse_AttributesToHeadersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluateSIPDispatchRulesResponse_AttributesToHeadersEntry {
    return {
      $type: EvaluateSIPDispatchRulesResponse_AttributesToHeadersEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: EvaluateSIPDispatchRulesResponse_AttributesToHeadersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EvaluateSIPDispatchRulesResponse_AttributesToHeadersEntry>, I>>(
    base?: I,
  ): EvaluateSIPDispatchRulesResponse_AttributesToHeadersEntry {
    return EvaluateSIPDispatchRulesResponse_AttributesToHeadersEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EvaluateSIPDispatchRulesResponse_AttributesToHeadersEntry>, I>>(
    object: I,
  ): EvaluateSIPDispatchRulesResponse_AttributesToHeadersEntry {
    const message = createBaseEvaluateSIPDispatchRulesResponse_AttributesToHeadersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(
  EvaluateSIPDispatchRulesResponse_AttributesToHeadersEntry.$type,
  EvaluateSIPDispatchRulesResponse_AttributesToHeadersEntry,
);

function createBaseUpdateSIPCallStateRequest(): UpdateSIPCallStateRequest {
  return { $type: "rpc.UpdateSIPCallStateRequest", callInfo: undefined };
}

export const UpdateSIPCallStateRequest: MessageFns<UpdateSIPCallStateRequest, "rpc.UpdateSIPCallStateRequest"> = {
  $type: "rpc.UpdateSIPCallStateRequest" as const,

  encode(message: UpdateSIPCallStateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.callInfo !== undefined) {
      SIPCallInfo.encode(message.callInfo, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSIPCallStateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSIPCallStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.callInfo = SIPCallInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSIPCallStateRequest {
    return {
      $type: UpdateSIPCallStateRequest.$type,
      callInfo: isSet(object.callInfo) ? SIPCallInfo.fromJSON(object.callInfo) : undefined,
    };
  },

  toJSON(message: UpdateSIPCallStateRequest): unknown {
    const obj: any = {};
    if (message.callInfo !== undefined) {
      obj.callInfo = SIPCallInfo.toJSON(message.callInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSIPCallStateRequest>, I>>(base?: I): UpdateSIPCallStateRequest {
    return UpdateSIPCallStateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSIPCallStateRequest>, I>>(object: I): UpdateSIPCallStateRequest {
    const message = createBaseUpdateSIPCallStateRequest();
    message.callInfo = (object.callInfo !== undefined && object.callInfo !== null)
      ? SIPCallInfo.fromPartial(object.callInfo)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(UpdateSIPCallStateRequest.$type, UpdateSIPCallStateRequest);

function createBaseSIPCall(): SIPCall {
  return {
    $type: "rpc.SIPCall",
    lkCallId: "",
    sourceIp: "",
    address: undefined,
    from: undefined,
    to: undefined,
    via: [],
  };
}

export const SIPCall: MessageFns<SIPCall, "rpc.SIPCall"> = {
  $type: "rpc.SIPCall" as const,

  encode(message: SIPCall, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lkCallId !== "") {
      writer.uint32(10).string(message.lkCallId);
    }
    if (message.sourceIp !== "") {
      writer.uint32(18).string(message.sourceIp);
    }
    if (message.address !== undefined) {
      SIPUri.encode(message.address, writer.uint32(26).fork()).join();
    }
    if (message.from !== undefined) {
      SIPUri.encode(message.from, writer.uint32(34).fork()).join();
    }
    if (message.to !== undefined) {
      SIPUri.encode(message.to, writer.uint32(42).fork()).join();
    }
    for (const v of message.via) {
      SIPUri.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SIPCall {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSIPCall();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lkCallId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sourceIp = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.address = SIPUri.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.from = SIPUri.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.to = SIPUri.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.via.push(SIPUri.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SIPCall {
    return {
      $type: SIPCall.$type,
      lkCallId: isSet(object.lkCallId) ? globalThis.String(object.lkCallId) : "",
      sourceIp: isSet(object.sourceIp) ? globalThis.String(object.sourceIp) : "",
      address: isSet(object.address) ? SIPUri.fromJSON(object.address) : undefined,
      from: isSet(object.from) ? SIPUri.fromJSON(object.from) : undefined,
      to: isSet(object.to) ? SIPUri.fromJSON(object.to) : undefined,
      via: globalThis.Array.isArray(object?.via) ? object.via.map((e: any) => SIPUri.fromJSON(e)) : [],
    };
  },

  toJSON(message: SIPCall): unknown {
    const obj: any = {};
    if (message.lkCallId !== "") {
      obj.lkCallId = message.lkCallId;
    }
    if (message.sourceIp !== "") {
      obj.sourceIp = message.sourceIp;
    }
    if (message.address !== undefined) {
      obj.address = SIPUri.toJSON(message.address);
    }
    if (message.from !== undefined) {
      obj.from = SIPUri.toJSON(message.from);
    }
    if (message.to !== undefined) {
      obj.to = SIPUri.toJSON(message.to);
    }
    if (message.via?.length) {
      obj.via = message.via.map((e) => SIPUri.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SIPCall>, I>>(base?: I): SIPCall {
    return SIPCall.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SIPCall>, I>>(object: I): SIPCall {
    const message = createBaseSIPCall();
    message.lkCallId = object.lkCallId ?? "";
    message.sourceIp = object.sourceIp ?? "";
    message.address = (object.address !== undefined && object.address !== null)
      ? SIPUri.fromPartial(object.address)
      : undefined;
    message.from = (object.from !== undefined && object.from !== null) ? SIPUri.fromPartial(object.from) : undefined;
    message.to = (object.to !== undefined && object.to !== null) ? SIPUri.fromPartial(object.to) : undefined;
    message.via = object.via?.map((e) => SIPUri.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(SIPCall.$type, SIPCall);

type ProtoMetaMessageOptions = {
  options?: { [key: string]: any };
  fields?: { [key: string]: { [key: string]: any } };
  oneof?: { [key: string]: { [key: string]: any } };
  nested?: { [key: string]: ProtoMetaMessageOptions };
};

export interface ProtoMetadata {
  fileDescriptor: FileDescriptorProto1;
  references: { [key: string]: any };
  dependencies?: ProtoMetadata[];
  options?: {
    options?: { [key: string]: any };
    services?: {
      [key: string]: { options?: { [key: string]: any }; methods?: { [key: string]: { [key: string]: any } } };
    };
    messages?: { [key: string]: ProtoMetaMessageOptions };
    enums?: { [key: string]: { options?: { [key: string]: any }; values?: { [key: string]: { [key: string]: any } } } };
  };
}

export const protoMetadata = {
  fileDescriptor: {
    "name": "rpc/io.proto",
    "package": "rpc",
    "dependency": [
      "livekit_egress.proto",
      "livekit_ingress.proto",
      "livekit_sip.proto",
      "livekit_room.proto",
      "google/protobuf/empty.proto",
      "google/protobuf/duration.proto",
    ],
    "publicDependency": [],
    "weakDependency": [],
    "messageType": [{
      "name": "GetEgressRequest",
      "field": [{
        "name": "egress_id",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "egressId",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "UpdateMetricsRequest",
      "field": [{
        "name": "info",
        "number": 1,
        "label": 1,
        "type": 11,
        "typeName": ".livekit.EgressInfo",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "info",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "avg_cpu_usage",
        "number": 3,
        "label": 1,
        "type": 2,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "avgCpuUsage",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "max_cpu_usage",
        "number": 4,
        "label": 1,
        "type": 2,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "maxCpuUsage",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "GetIngressInfoRequest",
      "field": [{
        "name": "ingress_id",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "ingressId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "stream_key",
        "number": 2,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "streamKey",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "GetIngressInfoResponse",
      "field": [{
        "name": "info",
        "number": 1,
        "label": 1,
        "type": 11,
        "typeName": ".livekit.IngressInfo",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "info",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "token",
        "number": 2,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "token",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "ws_url",
        "number": 3,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "wsUrl",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "logging_fields",
        "number": 4,
        "label": 3,
        "type": 11,
        "typeName": ".rpc.GetIngressInfoResponse.LoggingFieldsEntry",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "loggingFields",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [{
        "name": "LoggingFieldsEntry",
        "field": [{
          "name": "key",
          "number": 1,
          "label": 1,
          "type": 9,
          "typeName": "",
          "extendee": "",
          "defaultValue": "",
          "oneofIndex": 0,
          "jsonName": "key",
          "options": undefined,
          "proto3Optional": false,
        }, {
          "name": "value",
          "number": 2,
          "label": 1,
          "type": 9,
          "typeName": "",
          "extendee": "",
          "defaultValue": "",
          "oneofIndex": 0,
          "jsonName": "value",
          "options": undefined,
          "proto3Optional": false,
        }],
        "extension": [],
        "nestedType": [],
        "enumType": [],
        "extensionRange": [],
        "oneofDecl": [],
        "options": {
          "messageSetWireFormat": false,
          "noStandardDescriptorAccessor": false,
          "deprecated": false,
          "mapEntry": true,
          "uninterpretedOption": [],
        },
        "reservedRange": [],
        "reservedName": [],
      }],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "UpdateIngressStateRequest",
      "field": [{
        "name": "ingress_id",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "ingressId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "state",
        "number": 2,
        "label": 1,
        "type": 11,
        "typeName": ".livekit.IngressState",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "state",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "GetSIPTrunkAuthenticationRequest",
      "field": [{
        "name": "sip_call_id",
        "number": 6,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "sipCallId",
        "options": {
          "ctype": 0,
          "packed": false,
          "jstype": 0,
          "lazy": false,
          "deprecated": true,
          "weak": false,
          "uninterpretedOption": [],
        },
        "proto3Optional": false,
      }, {
        "name": "from",
        "number": 2,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "from",
        "options": {
          "ctype": 0,
          "packed": false,
          "jstype": 0,
          "lazy": false,
          "deprecated": true,
          "weak": false,
          "uninterpretedOption": [],
        },
        "proto3Optional": false,
      }, {
        "name": "from_host",
        "number": 7,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "fromHost",
        "options": {
          "ctype": 0,
          "packed": false,
          "jstype": 0,
          "lazy": false,
          "deprecated": true,
          "weak": false,
          "uninterpretedOption": [],
        },
        "proto3Optional": false,
      }, {
        "name": "to",
        "number": 3,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "to",
        "options": {
          "ctype": 0,
          "packed": false,
          "jstype": 0,
          "lazy": false,
          "deprecated": true,
          "weak": false,
          "uninterpretedOption": [],
        },
        "proto3Optional": false,
      }, {
        "name": "to_host",
        "number": 5,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "toHost",
        "options": {
          "ctype": 0,
          "packed": false,
          "jstype": 0,
          "lazy": false,
          "deprecated": true,
          "weak": false,
          "uninterpretedOption": [],
        },
        "proto3Optional": false,
      }, {
        "name": "src_address",
        "number": 4,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "srcAddress",
        "options": {
          "ctype": 0,
          "packed": false,
          "jstype": 0,
          "lazy": false,
          "deprecated": true,
          "weak": false,
          "uninterpretedOption": [],
        },
        "proto3Optional": false,
      }, {
        "name": "call",
        "number": 8,
        "label": 1,
        "type": 11,
        "typeName": ".rpc.SIPCall",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "call",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "GetSIPTrunkAuthenticationResponse",
      "field": [{
        "name": "username",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "username",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "password",
        "number": 2,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "password",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "drop",
        "number": 3,
        "label": 1,
        "type": 8,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "drop",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "sip_trunk_id",
        "number": 4,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "sipTrunkId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "project_id",
        "number": 5,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "projectId",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "EvaluateSIPDispatchRulesRequest",
      "field": [{
        "name": "sip_call_id",
        "number": 8,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "sipCallId",
        "options": {
          "ctype": 0,
          "packed": false,
          "jstype": 0,
          "lazy": false,
          "deprecated": true,
          "weak": false,
          "uninterpretedOption": [],
        },
        "proto3Optional": false,
      }, {
        "name": "sip_participant_id",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "sipParticipantId",
        "options": {
          "ctype": 0,
          "packed": false,
          "jstype": 0,
          "lazy": false,
          "deprecated": true,
          "weak": false,
          "uninterpretedOption": [],
        },
        "proto3Optional": false,
      }, {
        "name": "sip_trunk_id",
        "number": 10,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "sipTrunkId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "calling_number",
        "number": 2,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "callingNumber",
        "options": {
          "ctype": 0,
          "packed": false,
          "jstype": 0,
          "lazy": false,
          "deprecated": true,
          "weak": false,
          "uninterpretedOption": [],
        },
        "proto3Optional": false,
      }, {
        "name": "calling_host",
        "number": 11,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "callingHost",
        "options": {
          "ctype": 0,
          "packed": false,
          "jstype": 0,
          "lazy": false,
          "deprecated": true,
          "weak": false,
          "uninterpretedOption": [],
        },
        "proto3Optional": false,
      }, {
        "name": "called_number",
        "number": 3,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "calledNumber",
        "options": {
          "ctype": 0,
          "packed": false,
          "jstype": 0,
          "lazy": false,
          "deprecated": true,
          "weak": false,
          "uninterpretedOption": [],
        },
        "proto3Optional": false,
      }, {
        "name": "src_address",
        "number": 4,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "srcAddress",
        "options": {
          "ctype": 0,
          "packed": false,
          "jstype": 0,
          "lazy": false,
          "deprecated": true,
          "weak": false,
          "uninterpretedOption": [],
        },
        "proto3Optional": false,
      }, {
        "name": "pin",
        "number": 5,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "pin",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "no_pin",
        "number": 6,
        "label": 1,
        "type": 8,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "noPin",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "called_host",
        "number": 7,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "calledHost",
        "options": {
          "ctype": 0,
          "packed": false,
          "jstype": 0,
          "lazy": false,
          "deprecated": true,
          "weak": false,
          "uninterpretedOption": [],
        },
        "proto3Optional": false,
      }, {
        "name": "extra_attributes",
        "number": 9,
        "label": 3,
        "type": 11,
        "typeName": ".rpc.EvaluateSIPDispatchRulesRequest.ExtraAttributesEntry",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "extraAttributes",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "call",
        "number": 12,
        "label": 1,
        "type": 11,
        "typeName": ".rpc.SIPCall",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "call",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [{
        "name": "ExtraAttributesEntry",
        "field": [{
          "name": "key",
          "number": 1,
          "label": 1,
          "type": 9,
          "typeName": "",
          "extendee": "",
          "defaultValue": "",
          "oneofIndex": 0,
          "jsonName": "key",
          "options": undefined,
          "proto3Optional": false,
        }, {
          "name": "value",
          "number": 2,
          "label": 1,
          "type": 9,
          "typeName": "",
          "extendee": "",
          "defaultValue": "",
          "oneofIndex": 0,
          "jsonName": "value",
          "options": undefined,
          "proto3Optional": false,
        }],
        "extension": [],
        "nestedType": [],
        "enumType": [],
        "extensionRange": [],
        "oneofDecl": [],
        "options": {
          "messageSetWireFormat": false,
          "noStandardDescriptorAccessor": false,
          "deprecated": false,
          "mapEntry": true,
          "uninterpretedOption": [],
        },
        "reservedRange": [],
        "reservedName": [],
      }],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "EvaluateSIPDispatchRulesResponse",
      "field": [{
        "name": "room_name",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "roomName",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "participant_identity",
        "number": 2,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "participantIdentity",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "participant_name",
        "number": 7,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "participantName",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "participant_metadata",
        "number": 8,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "participantMetadata",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "participant_attributes",
        "number": 11,
        "label": 3,
        "type": 11,
        "typeName": ".rpc.EvaluateSIPDispatchRulesResponse.ParticipantAttributesEntry",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "participantAttributes",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "request_pin",
        "number": 3,
        "label": 1,
        "type": 8,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "requestPin",
        "options": {
          "ctype": 0,
          "packed": false,
          "jstype": 0,
          "lazy": false,
          "deprecated": true,
          "weak": false,
          "uninterpretedOption": [],
        },
        "proto3Optional": false,
      }, {
        "name": "token",
        "number": 4,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "token",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "ws_url",
        "number": 5,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "wsUrl",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "result",
        "number": 6,
        "label": 1,
        "type": 14,
        "typeName": ".rpc.SIPDispatchResult",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "result",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "sip_trunk_id",
        "number": 9,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "sipTrunkId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "sip_dispatch_rule_id",
        "number": 10,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "sipDispatchRuleId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "project_id",
        "number": 12,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "projectId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "headers",
        "number": 13,
        "label": 3,
        "type": 11,
        "typeName": ".rpc.EvaluateSIPDispatchRulesResponse.HeadersEntry",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "headers",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "headers_to_attributes",
        "number": 14,
        "label": 3,
        "type": 11,
        "typeName": ".rpc.EvaluateSIPDispatchRulesResponse.HeadersToAttributesEntry",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "headersToAttributes",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "attributes_to_headers",
        "number": 18,
        "label": 3,
        "type": 11,
        "typeName": ".rpc.EvaluateSIPDispatchRulesResponse.AttributesToHeadersEntry",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "attributesToHeaders",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "include_headers",
        "number": 19,
        "label": 1,
        "type": 14,
        "typeName": ".livekit.SIPHeaderOptions",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "includeHeaders",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "enabled_features",
        "number": 15,
        "label": 3,
        "type": 14,
        "typeName": ".livekit.SIPFeature",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "enabledFeatures",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "ringing_timeout",
        "number": 16,
        "label": 1,
        "type": 11,
        "typeName": ".google.protobuf.Duration",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "ringingTimeout",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "max_call_duration",
        "number": 17,
        "label": 1,
        "type": 11,
        "typeName": ".google.protobuf.Duration",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "maxCallDuration",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "room_preset",
        "number": 20,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "roomPreset",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "room_config",
        "number": 21,
        "label": 1,
        "type": 11,
        "typeName": ".livekit.RoomConfiguration",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "roomConfig",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "media_encryption",
        "number": 22,
        "label": 1,
        "type": 14,
        "typeName": ".livekit.SIPMediaEncryption",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "mediaEncryption",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [{
        "name": "ParticipantAttributesEntry",
        "field": [{
          "name": "key",
          "number": 1,
          "label": 1,
          "type": 9,
          "typeName": "",
          "extendee": "",
          "defaultValue": "",
          "oneofIndex": 0,
          "jsonName": "key",
          "options": undefined,
          "proto3Optional": false,
        }, {
          "name": "value",
          "number": 2,
          "label": 1,
          "type": 9,
          "typeName": "",
          "extendee": "",
          "defaultValue": "",
          "oneofIndex": 0,
          "jsonName": "value",
          "options": undefined,
          "proto3Optional": false,
        }],
        "extension": [],
        "nestedType": [],
        "enumType": [],
        "extensionRange": [],
        "oneofDecl": [],
        "options": {
          "messageSetWireFormat": false,
          "noStandardDescriptorAccessor": false,
          "deprecated": false,
          "mapEntry": true,
          "uninterpretedOption": [],
        },
        "reservedRange": [],
        "reservedName": [],
      }, {
        "name": "HeadersEntry",
        "field": [{
          "name": "key",
          "number": 1,
          "label": 1,
          "type": 9,
          "typeName": "",
          "extendee": "",
          "defaultValue": "",
          "oneofIndex": 0,
          "jsonName": "key",
          "options": undefined,
          "proto3Optional": false,
        }, {
          "name": "value",
          "number": 2,
          "label": 1,
          "type": 9,
          "typeName": "",
          "extendee": "",
          "defaultValue": "",
          "oneofIndex": 0,
          "jsonName": "value",
          "options": undefined,
          "proto3Optional": false,
        }],
        "extension": [],
        "nestedType": [],
        "enumType": [],
        "extensionRange": [],
        "oneofDecl": [],
        "options": {
          "messageSetWireFormat": false,
          "noStandardDescriptorAccessor": false,
          "deprecated": false,
          "mapEntry": true,
          "uninterpretedOption": [],
        },
        "reservedRange": [],
        "reservedName": [],
      }, {
        "name": "HeadersToAttributesEntry",
        "field": [{
          "name": "key",
          "number": 1,
          "label": 1,
          "type": 9,
          "typeName": "",
          "extendee": "",
          "defaultValue": "",
          "oneofIndex": 0,
          "jsonName": "key",
          "options": undefined,
          "proto3Optional": false,
        }, {
          "name": "value",
          "number": 2,
          "label": 1,
          "type": 9,
          "typeName": "",
          "extendee": "",
          "defaultValue": "",
          "oneofIndex": 0,
          "jsonName": "value",
          "options": undefined,
          "proto3Optional": false,
        }],
        "extension": [],
        "nestedType": [],
        "enumType": [],
        "extensionRange": [],
        "oneofDecl": [],
        "options": {
          "messageSetWireFormat": false,
          "noStandardDescriptorAccessor": false,
          "deprecated": false,
          "mapEntry": true,
          "uninterpretedOption": [],
        },
        "reservedRange": [],
        "reservedName": [],
      }, {
        "name": "AttributesToHeadersEntry",
        "field": [{
          "name": "key",
          "number": 1,
          "label": 1,
          "type": 9,
          "typeName": "",
          "extendee": "",
          "defaultValue": "",
          "oneofIndex": 0,
          "jsonName": "key",
          "options": undefined,
          "proto3Optional": false,
        }, {
          "name": "value",
          "number": 2,
          "label": 1,
          "type": 9,
          "typeName": "",
          "extendee": "",
          "defaultValue": "",
          "oneofIndex": 0,
          "jsonName": "value",
          "options": undefined,
          "proto3Optional": false,
        }],
        "extension": [],
        "nestedType": [],
        "enumType": [],
        "extensionRange": [],
        "oneofDecl": [],
        "options": {
          "messageSetWireFormat": false,
          "noStandardDescriptorAccessor": false,
          "deprecated": false,
          "mapEntry": true,
          "uninterpretedOption": [],
        },
        "reservedRange": [],
        "reservedName": [],
      }],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "UpdateSIPCallStateRequest",
      "field": [{
        "name": "call_info",
        "number": 1,
        "label": 1,
        "type": 11,
        "typeName": ".livekit.SIPCallInfo",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "callInfo",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "SIPCall",
      "field": [{
        "name": "lk_call_id",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "lkCallId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "source_ip",
        "number": 2,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "sourceIp",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "address",
        "number": 3,
        "label": 1,
        "type": 11,
        "typeName": ".livekit.SIPUri",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "address",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "from",
        "number": 4,
        "label": 1,
        "type": 11,
        "typeName": ".livekit.SIPUri",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "from",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "to",
        "number": 5,
        "label": 1,
        "type": 11,
        "typeName": ".livekit.SIPUri",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "to",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "via",
        "number": 6,
        "label": 3,
        "type": 11,
        "typeName": ".livekit.SIPUri",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "via",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }],
    "enumType": [{
      "name": "SIPDispatchResult",
      "value": [
        { "name": "LEGACY_ACCEPT_OR_PIN", "number": 0, "options": undefined },
        { "name": "ACCEPT", "number": 1, "options": undefined },
        { "name": "REQUEST_PIN", "number": 2, "options": undefined },
        { "name": "REJECT", "number": 3, "options": undefined },
        { "name": "DROP", "number": 4, "options": undefined },
      ],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }],
    "service": [{
      "name": "IOInfo",
      "method": [{
        "name": "CreateEgress",
        "inputType": ".livekit.EgressInfo",
        "outputType": ".google.protobuf.Empty",
        "options": undefined,
        "clientStreaming": false,
        "serverStreaming": false,
      }, {
        "name": "UpdateEgress",
        "inputType": ".livekit.EgressInfo",
        "outputType": ".google.protobuf.Empty",
        "options": undefined,
        "clientStreaming": false,
        "serverStreaming": false,
      }, {
        "name": "GetEgress",
        "inputType": ".rpc.GetEgressRequest",
        "outputType": ".livekit.EgressInfo",
        "options": undefined,
        "clientStreaming": false,
        "serverStreaming": false,
      }, {
        "name": "ListEgress",
        "inputType": ".livekit.ListEgressRequest",
        "outputType": ".livekit.ListEgressResponse",
        "options": undefined,
        "clientStreaming": false,
        "serverStreaming": false,
      }, {
        "name": "UpdateMetrics",
        "inputType": ".rpc.UpdateMetricsRequest",
        "outputType": ".google.protobuf.Empty",
        "options": undefined,
        "clientStreaming": false,
        "serverStreaming": false,
      }, {
        "name": "CreateIngress",
        "inputType": ".livekit.IngressInfo",
        "outputType": ".google.protobuf.Empty",
        "options": undefined,
        "clientStreaming": false,
        "serverStreaming": false,
      }, {
        "name": "GetIngressInfo",
        "inputType": ".rpc.GetIngressInfoRequest",
        "outputType": ".rpc.GetIngressInfoResponse",
        "options": undefined,
        "clientStreaming": false,
        "serverStreaming": false,
      }, {
        "name": "UpdateIngressState",
        "inputType": ".rpc.UpdateIngressStateRequest",
        "outputType": ".google.protobuf.Empty",
        "options": undefined,
        "clientStreaming": false,
        "serverStreaming": false,
      }, {
        "name": "GetSIPTrunkAuthentication",
        "inputType": ".rpc.GetSIPTrunkAuthenticationRequest",
        "outputType": ".rpc.GetSIPTrunkAuthenticationResponse",
        "options": undefined,
        "clientStreaming": false,
        "serverStreaming": false,
      }, {
        "name": "EvaluateSIPDispatchRules",
        "inputType": ".rpc.EvaluateSIPDispatchRulesRequest",
        "outputType": ".rpc.EvaluateSIPDispatchRulesResponse",
        "options": undefined,
        "clientStreaming": false,
        "serverStreaming": false,
      }, {
        "name": "UpdateSIPCallState",
        "inputType": ".rpc.UpdateSIPCallStateRequest",
        "outputType": ".google.protobuf.Empty",
        "options": undefined,
        "clientStreaming": false,
        "serverStreaming": false,
      }],
      "options": undefined,
    }],
    "extension": [],
    "options": {
      "javaPackage": "",
      "javaOuterClassname": "",
      "javaMultipleFiles": false,
      "javaGenerateEqualsAndHash": false,
      "javaStringCheckUtf8": false,
      "optimizeFor": 1,
      "goPackage": "github.com/livekit/protocol/rpc",
      "ccGenericServices": false,
      "javaGenericServices": false,
      "pyGenericServices": false,
      "phpGenericServices": false,
      "deprecated": false,
      "ccEnableArenas": true,
      "objcClassPrefix": "",
      "csharpNamespace": "",
      "swiftPrefix": "",
      "phpClassPrefix": "",
      "phpNamespace": "",
      "phpMetadataNamespace": "",
      "rubyPackage": "",
      "uninterpretedOption": [],
    },
    "sourceCodeInfo": {
      "location": [{
        "path": [6, 0, 2, 0],
        "span": [29, 2, 71],
        "leadingComments": " egress\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [6, 0, 2, 5],
        "span": [36, 2, 73],
        "leadingComments": " ingress\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [6, 0, 2, 8],
        "span": [41, 2, 110],
        "leadingComments": " sip\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 2],
        "span": [57, 0, 60, 1],
        "leadingComments": " Query an ingress info from an ingress ID or stream key\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 4],
        "span": [70, 0, 73, 1],
        "leadingComments": " Request to store an update to the ingress state ingress -> service\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 5, 2, 1],
        "span": [79, 2, 36],
        "leadingComments": " What Number is calling\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 5, 2, 2],
        "span": [81, 2, 41],
        "leadingComments": " What Host is calling\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 5, 2, 3],
        "span": [84, 2, 34],
        "leadingComments": " What Number was called\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 5, 2, 4],
        "span": [86, 2, 39],
        "leadingComments": " What Host was called\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 5, 2, 5],
        "span": [89, 2, 43],
        "leadingComments": " What is the IP address of the called number\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 6, 2, 0],
        "span": [98, 2, 22],
        "leadingComments": " Expected username and password\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 6, 2, 3],
        "span": [102, 2, 26],
        "leadingComments": " Trunk used to fulfill this request\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 6, 2, 4],
        "span": [104, 2, 24],
        "leadingComments": " Used in Cloud only\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 7, 2, 2],
        "span": [111, 2, 27],
        "leadingComments": " Trunk from the auth response, if any\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 7, 2, 3],
        "span": [114, 2, 46],
        "leadingComments": " What Number is calling\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 7, 2, 4],
        "span": [117, 2, 45],
        "leadingComments": " What Host is calling\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 7, 2, 5],
        "span": [120, 2, 45],
        "leadingComments": " What Number was called\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 7, 2, 6],
        "span": [123, 2, 43],
        "leadingComments": " What is the IP address of the called number\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 7, 2, 7],
        "span": [126, 2, 17],
        "leadingComments": " What pin has been entered if any\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 7, 2, 8],
        "span": [129, 2, 18],
        "leadingComments": " Caller rejected pin prompt, only try public rooms\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 7, 2, 9],
        "span": [132, 2, 43],
        "leadingComments": " What Host was called\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 7, 2, 10],
        "span": [136, 2, 43],
        "leadingComments":
          " Extra participant attributes added for this call.\n Usually include provider-specific metadata.\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 8, 2, 0],
        "span": [145, 2, 23],
        "leadingComments": " non-empty string if SIPParticipant should be placed a room\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 8, 2, 1],
        "span": [148, 2, 34],
        "leadingComments": " What should be used for the LiveKit participant identity\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 8, 2, 2],
        "span": [150, 2, 30],
        "leadingComments": " What should be used for the LiveKit participant name\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 8, 2, 3],
        "span": [152, 2, 34],
        "leadingComments": " What should be used for the LiveKit participant metadata\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 8, 2, 4],
        "span": [154, 2, 50],
        "leadingComments": " What should be used for the LiveKit participant attributes\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 8, 2, 5],
        "span": [156, 2, 41],
        "leadingComments": "",
        "trailingComments": " see result\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 8, 2, 6],
        "span": [159, 2, 19],
        "leadingComments": " optional token that should be used when creating LiveKit participant\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 8, 2, 7],
        "span": [162, 2, 20],
        "leadingComments": " optional websocket url that should be used when creating LiveKit participant\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 8, 2, 9],
        "span": [167, 2, 26],
        "leadingComments": " Trunk used to fulfill this request\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 8, 2, 10],
        "span": [169, 2, 35],
        "leadingComments": " Dispatch Rule used to fulfill this request\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 8, 2, 11],
        "span": [172, 2, 25],
        "leadingComments": " Used in Cloud only\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 8, 2, 12],
        "span": [176, 2, 35],
        "leadingComments":
          " Include these SIP X-* headers in 200 OK response to INVITE.\n These headers are included as-is and may help identify triggered LiveKit Dispatch Rule for the other SIP endpoint.\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 8, 2, 13],
        "span": [179, 2, 49],
        "leadingComments":
          " Map SIP X-* headers from INVITE to SIP participant attributes.\n Keys are the names of X-* headers and values are the names of attributes they will be mapped to.\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 8, 2, 14],
        "span": [182, 2, 49],
        "leadingComments":
          " Map LiveKit attributes to SIP X-* headers when sending BYE or REFER requests.\n Keys are the names of attributes and values are the names of X-* headers they will be mapped to.\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 8, 2, 15],
        "span": [189, 2, 48],
        "leadingComments":
          " Map SIP headers from INVITE to sip.h.* participant attributes automatically.\n\n When the names of required headers is known, using headers_to_attributes is strongly recommended.\n\n When mapping INVITE headers to response headers with attributes_to_headers map,\n lowercase header names should be used, for example: sip.h.x-custom-header.\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 8, 2, 17],
        "span": [194, 2, 48],
        "leadingComments": " Max time for the caller to wait for track subscription.\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 8, 2, 18],
        "span": [196, 2, 50],
        "leadingComments": " Max call duration.\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 8, 2, 19],
        "span": [201, 2, 26],
        "leadingComments":
          " Room preset and config are used only to generate tokens\n once tokens are returned by this response consistently, it will no longer\n be needed\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [5, 0, 2, 0],
        "span": [216, 2, 27],
        "leadingComments": "",
        "trailingComments": " check request_pin field\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 10, 2, 1],
        "span": [225, 2, 23],
        "leadingComments": "",
        "trailingComments": " source ip (without port)\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 10, 2, 2],
        "span": [226, 2, 29],
        "leadingComments": "",
        "trailingComments": " address in the request line (INVITE)\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 10, 2, 3],
        "span": [227, 2, 26],
        "leadingComments": "",
        "trailingComments": " From header\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 10, 2, 4],
        "span": [228, 2, 24],
        "leadingComments": "",
        "trailingComments": " To header\n",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 10, 2, 5],
        "span": [229, 2, 34],
        "leadingComments": "",
        "trailingComments": " Via headers\n",
        "leadingDetachedComments": [],
      }],
    },
    "syntax": "proto3",
  },
  references: {
    ".rpc.SIPDispatchResult": SIPDispatchResult,
    ".rpc.GetEgressRequest": GetEgressRequest,
    ".rpc.UpdateMetricsRequest": UpdateMetricsRequest,
    ".rpc.GetIngressInfoRequest": GetIngressInfoRequest,
    ".rpc.GetIngressInfoResponse": GetIngressInfoResponse,
    ".rpc.GetIngressInfoResponse.LoggingFieldsEntry": GetIngressInfoResponse_LoggingFieldsEntry,
    ".rpc.UpdateIngressStateRequest": UpdateIngressStateRequest,
    ".rpc.GetSIPTrunkAuthenticationRequest": GetSIPTrunkAuthenticationRequest,
    ".rpc.GetSIPTrunkAuthenticationResponse": GetSIPTrunkAuthenticationResponse,
    ".rpc.EvaluateSIPDispatchRulesRequest": EvaluateSIPDispatchRulesRequest,
    ".rpc.EvaluateSIPDispatchRulesRequest.ExtraAttributesEntry": EvaluateSIPDispatchRulesRequest_ExtraAttributesEntry,
    ".rpc.EvaluateSIPDispatchRulesResponse": EvaluateSIPDispatchRulesResponse,
    ".rpc.EvaluateSIPDispatchRulesResponse.ParticipantAttributesEntry":
      EvaluateSIPDispatchRulesResponse_ParticipantAttributesEntry,
    ".rpc.EvaluateSIPDispatchRulesResponse.HeadersEntry": EvaluateSIPDispatchRulesResponse_HeadersEntry,
    ".rpc.EvaluateSIPDispatchRulesResponse.HeadersToAttributesEntry":
      EvaluateSIPDispatchRulesResponse_HeadersToAttributesEntry,
    ".rpc.EvaluateSIPDispatchRulesResponse.AttributesToHeadersEntry":
      EvaluateSIPDispatchRulesResponse_AttributesToHeadersEntry,
    ".rpc.UpdateSIPCallStateRequest": UpdateSIPCallStateRequest,
    ".rpc.SIPCall": SIPCall,
  },
  dependencies: [protoMetadata1, protoMetadata2, protoMetadata3, protoMetadata4, protoMetadata5, protoMetadata6],
} as const satisfies ProtoMetadata;

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
