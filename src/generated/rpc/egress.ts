// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: rpc/egress.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { FileDescriptorProto as FileDescriptorProto1 } from "ts-proto-descriptors";
import {
  ParticipantEgressRequest,
  protoMetadata as protoMetadata2,
  RoomCompositeEgressRequest,
  TrackCompositeEgressRequest,
  TrackEgressRequest,
  WebEgressRequest,
} from "../livekit_egress";
import { Options, protoMetadata as protoMetadata1 } from "../options";
import { messageTypeRegistry } from "../typeRegistry";

export const protobufPackage = "rpc";

export interface StartEgressRequest {
  $type: "rpc.StartEgressRequest";
  /** request metadata */
  egressId: string;
  roomComposite?: RoomCompositeEgressRequest | undefined;
  web?: WebEgressRequest | undefined;
  participant?: ParticipantEgressRequest | undefined;
  trackComposite?: TrackCompositeEgressRequest | undefined;
  track?:
    | TrackEgressRequest
    | undefined;
  /** connection info */
  roomId: string;
  token: string;
  wsUrl: string;
  /** cloud only */
  cloudBackupEnabled: boolean;
  estimatedCpu: number;
}

export interface ListActiveEgressRequest {
  $type: "rpc.ListActiveEgressRequest";
}

export interface ListActiveEgressResponse {
  $type: "rpc.ListActiveEgressResponse";
  egressIds: string[];
}

function createBaseStartEgressRequest(): StartEgressRequest {
  return {
    $type: "rpc.StartEgressRequest",
    egressId: "",
    roomComposite: undefined,
    web: undefined,
    participant: undefined,
    trackComposite: undefined,
    track: undefined,
    roomId: "",
    token: "",
    wsUrl: "",
    cloudBackupEnabled: false,
    estimatedCpu: 0,
  };
}

export const StartEgressRequest: MessageFns<StartEgressRequest, "rpc.StartEgressRequest"> = {
  $type: "rpc.StartEgressRequest" as const,

  encode(message: StartEgressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.egressId !== "") {
      writer.uint32(10).string(message.egressId);
    }
    if (message.roomComposite !== undefined) {
      RoomCompositeEgressRequest.encode(message.roomComposite, writer.uint32(42).fork()).join();
    }
    if (message.web !== undefined) {
      WebEgressRequest.encode(message.web, writer.uint32(90).fork()).join();
    }
    if (message.participant !== undefined) {
      ParticipantEgressRequest.encode(message.participant, writer.uint32(106).fork()).join();
    }
    if (message.trackComposite !== undefined) {
      TrackCompositeEgressRequest.encode(message.trackComposite, writer.uint32(50).fork()).join();
    }
    if (message.track !== undefined) {
      TrackEgressRequest.encode(message.track, writer.uint32(58).fork()).join();
    }
    if (message.roomId !== "") {
      writer.uint32(26).string(message.roomId);
    }
    if (message.token !== "") {
      writer.uint32(66).string(message.token);
    }
    if (message.wsUrl !== "") {
      writer.uint32(74).string(message.wsUrl);
    }
    if (message.cloudBackupEnabled !== false) {
      writer.uint32(80).bool(message.cloudBackupEnabled);
    }
    if (message.estimatedCpu !== 0) {
      writer.uint32(113).double(message.estimatedCpu);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartEgressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartEgressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.egressId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.roomComposite = RoomCompositeEgressRequest.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.web = WebEgressRequest.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.participant = ParticipantEgressRequest.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.trackComposite = TrackCompositeEgressRequest.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.track = TrackEgressRequest.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.roomId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.wsUrl = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.cloudBackupEnabled = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 113) {
            break;
          }

          message.estimatedCpu = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartEgressRequest {
    return {
      $type: StartEgressRequest.$type,
      egressId: isSet(object.egressId) ? globalThis.String(object.egressId) : "",
      roomComposite: isSet(object.roomComposite)
        ? RoomCompositeEgressRequest.fromJSON(object.roomComposite)
        : undefined,
      web: isSet(object.web) ? WebEgressRequest.fromJSON(object.web) : undefined,
      participant: isSet(object.participant) ? ParticipantEgressRequest.fromJSON(object.participant) : undefined,
      trackComposite: isSet(object.trackComposite)
        ? TrackCompositeEgressRequest.fromJSON(object.trackComposite)
        : undefined,
      track: isSet(object.track) ? TrackEgressRequest.fromJSON(object.track) : undefined,
      roomId: isSet(object.roomId) ? globalThis.String(object.roomId) : "",
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      wsUrl: isSet(object.wsUrl) ? globalThis.String(object.wsUrl) : "",
      cloudBackupEnabled: isSet(object.cloudBackupEnabled) ? globalThis.Boolean(object.cloudBackupEnabled) : false,
      estimatedCpu: isSet(object.estimatedCpu) ? globalThis.Number(object.estimatedCpu) : 0,
    };
  },

  toJSON(message: StartEgressRequest): unknown {
    const obj: any = {};
    if (message.egressId !== "") {
      obj.egressId = message.egressId;
    }
    if (message.roomComposite !== undefined) {
      obj.roomComposite = RoomCompositeEgressRequest.toJSON(message.roomComposite);
    }
    if (message.web !== undefined) {
      obj.web = WebEgressRequest.toJSON(message.web);
    }
    if (message.participant !== undefined) {
      obj.participant = ParticipantEgressRequest.toJSON(message.participant);
    }
    if (message.trackComposite !== undefined) {
      obj.trackComposite = TrackCompositeEgressRequest.toJSON(message.trackComposite);
    }
    if (message.track !== undefined) {
      obj.track = TrackEgressRequest.toJSON(message.track);
    }
    if (message.roomId !== "") {
      obj.roomId = message.roomId;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.wsUrl !== "") {
      obj.wsUrl = message.wsUrl;
    }
    if (message.cloudBackupEnabled !== false) {
      obj.cloudBackupEnabled = message.cloudBackupEnabled;
    }
    if (message.estimatedCpu !== 0) {
      obj.estimatedCpu = message.estimatedCpu;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StartEgressRequest>, I>>(base?: I): StartEgressRequest {
    return StartEgressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartEgressRequest>, I>>(object: I): StartEgressRequest {
    const message = createBaseStartEgressRequest();
    message.egressId = object.egressId ?? "";
    message.roomComposite = (object.roomComposite !== undefined && object.roomComposite !== null)
      ? RoomCompositeEgressRequest.fromPartial(object.roomComposite)
      : undefined;
    message.web = (object.web !== undefined && object.web !== null)
      ? WebEgressRequest.fromPartial(object.web)
      : undefined;
    message.participant = (object.participant !== undefined && object.participant !== null)
      ? ParticipantEgressRequest.fromPartial(object.participant)
      : undefined;
    message.trackComposite = (object.trackComposite !== undefined && object.trackComposite !== null)
      ? TrackCompositeEgressRequest.fromPartial(object.trackComposite)
      : undefined;
    message.track = (object.track !== undefined && object.track !== null)
      ? TrackEgressRequest.fromPartial(object.track)
      : undefined;
    message.roomId = object.roomId ?? "";
    message.token = object.token ?? "";
    message.wsUrl = object.wsUrl ?? "";
    message.cloudBackupEnabled = object.cloudBackupEnabled ?? false;
    message.estimatedCpu = object.estimatedCpu ?? 0;
    return message;
  },
};

messageTypeRegistry.set(StartEgressRequest.$type, StartEgressRequest);

function createBaseListActiveEgressRequest(): ListActiveEgressRequest {
  return { $type: "rpc.ListActiveEgressRequest" };
}

export const ListActiveEgressRequest: MessageFns<ListActiveEgressRequest, "rpc.ListActiveEgressRequest"> = {
  $type: "rpc.ListActiveEgressRequest" as const,

  encode(_: ListActiveEgressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListActiveEgressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListActiveEgressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListActiveEgressRequest {
    return { $type: ListActiveEgressRequest.$type };
  },

  toJSON(_: ListActiveEgressRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListActiveEgressRequest>, I>>(base?: I): ListActiveEgressRequest {
    return ListActiveEgressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListActiveEgressRequest>, I>>(_: I): ListActiveEgressRequest {
    const message = createBaseListActiveEgressRequest();
    return message;
  },
};

messageTypeRegistry.set(ListActiveEgressRequest.$type, ListActiveEgressRequest);

function createBaseListActiveEgressResponse(): ListActiveEgressResponse {
  return { $type: "rpc.ListActiveEgressResponse", egressIds: [] };
}

export const ListActiveEgressResponse: MessageFns<ListActiveEgressResponse, "rpc.ListActiveEgressResponse"> = {
  $type: "rpc.ListActiveEgressResponse" as const,

  encode(message: ListActiveEgressResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.egressIds) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListActiveEgressResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListActiveEgressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.egressIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListActiveEgressResponse {
    return {
      $type: ListActiveEgressResponse.$type,
      egressIds: globalThis.Array.isArray(object?.egressIds)
        ? object.egressIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListActiveEgressResponse): unknown {
    const obj: any = {};
    if (message.egressIds?.length) {
      obj.egressIds = message.egressIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListActiveEgressResponse>, I>>(base?: I): ListActiveEgressResponse {
    return ListActiveEgressResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListActiveEgressResponse>, I>>(object: I): ListActiveEgressResponse {
    const message = createBaseListActiveEgressResponse();
    message.egressIds = object.egressIds?.map((e) => e) || [];
    return message;
  },
};

messageTypeRegistry.set(ListActiveEgressResponse.$type, ListActiveEgressResponse);

type ProtoMetaMessageOptions = {
  options?: { [key: string]: any };
  fields?: { [key: string]: { [key: string]: any } };
  oneof?: { [key: string]: { [key: string]: any } };
  nested?: { [key: string]: ProtoMetaMessageOptions };
};

export interface ProtoMetadata {
  fileDescriptor: FileDescriptorProto1;
  references: { [key: string]: any };
  dependencies?: ProtoMetadata[];
  options?: {
    options?: { [key: string]: any };
    services?: {
      [key: string]: { options?: { [key: string]: any }; methods?: { [key: string]: { [key: string]: any } } };
    };
    messages?: { [key: string]: ProtoMetaMessageOptions };
    enums?: { [key: string]: { options?: { [key: string]: any }; values?: { [key: string]: { [key: string]: any } } } };
  };
}

export const protoMetadata = {
  fileDescriptor: {
    "name": "rpc/egress.proto",
    "package": "rpc",
    "dependency": ["options.proto", "livekit_egress.proto"],
    "publicDependency": [],
    "weakDependency": [],
    "messageType": [{
      "name": "StartEgressRequest",
      "field": [{
        "name": "egress_id",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "egressId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "room_composite",
        "number": 5,
        "label": 1,
        "type": 11,
        "typeName": ".livekit.RoomCompositeEgressRequest",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "roomComposite",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "web",
        "number": 11,
        "label": 1,
        "type": 11,
        "typeName": ".livekit.WebEgressRequest",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "web",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "participant",
        "number": 13,
        "label": 1,
        "type": 11,
        "typeName": ".livekit.ParticipantEgressRequest",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "participant",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "track_composite",
        "number": 6,
        "label": 1,
        "type": 11,
        "typeName": ".livekit.TrackCompositeEgressRequest",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "trackComposite",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "track",
        "number": 7,
        "label": 1,
        "type": 11,
        "typeName": ".livekit.TrackEgressRequest",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "track",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "room_id",
        "number": 3,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "roomId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "token",
        "number": 8,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "token",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "ws_url",
        "number": 9,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "wsUrl",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "cloud_backup_enabled",
        "number": 10,
        "label": 1,
        "type": 8,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "cloudBackupEnabled",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "estimated_cpu",
        "number": 14,
        "label": 1,
        "type": 1,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "estimatedCpu",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [{ "name": "request", "options": undefined }],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "ListActiveEgressRequest",
      "field": [],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "ListActiveEgressResponse",
      "field": [{
        "name": "egress_ids",
        "number": 1,
        "label": 3,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "egressIds",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }],
    "enumType": [],
    "service": [{
      "name": "EgressInternal",
      "method": [{
        "name": "StartEgress",
        "inputType": ".rpc.StartEgressRequest",
        "outputType": ".livekit.EgressInfo",
        "options": { "deprecated": false, "idempotencyLevel": 0, "uninterpretedOption": [] },
        "clientStreaming": false,
        "serverStreaming": false,
      }, {
        "name": "ListActiveEgress",
        "inputType": ".rpc.ListActiveEgressRequest",
        "outputType": ".rpc.ListActiveEgressResponse",
        "options": { "deprecated": false, "idempotencyLevel": 0, "uninterpretedOption": [] },
        "clientStreaming": false,
        "serverStreaming": false,
      }],
      "options": undefined,
    }, {
      "name": "EgressHandler",
      "method": [{
        "name": "UpdateStream",
        "inputType": ".livekit.UpdateStreamRequest",
        "outputType": ".livekit.EgressInfo",
        "options": { "deprecated": false, "idempotencyLevel": 0, "uninterpretedOption": [] },
        "clientStreaming": false,
        "serverStreaming": false,
      }, {
        "name": "StopEgress",
        "inputType": ".livekit.StopEgressRequest",
        "outputType": ".livekit.EgressInfo",
        "options": { "deprecated": false, "idempotencyLevel": 0, "uninterpretedOption": [] },
        "clientStreaming": false,
        "serverStreaming": false,
      }],
      "options": undefined,
    }],
    "extension": [],
    "options": {
      "javaPackage": "",
      "javaOuterClassname": "",
      "javaMultipleFiles": false,
      "javaGenerateEqualsAndHash": false,
      "javaStringCheckUtf8": false,
      "optimizeFor": 1,
      "goPackage": "github.com/livekit/protocol/rpc",
      "ccGenericServices": false,
      "javaGenericServices": false,
      "pyGenericServices": false,
      "phpGenericServices": false,
      "deprecated": false,
      "ccEnableArenas": true,
      "objcClassPrefix": "",
      "csharpNamespace": "",
      "swiftPrefix": "",
      "phpClassPrefix": "",
      "phpNamespace": "",
      "phpMetadataNamespace": "",
      "rubyPackage": "",
      "uninterpretedOption": [],
    },
    "sourceCodeInfo": {
      "location": [{
        "path": [4, 0, 2, 0],
        "span": [45, 2, 23],
        "leadingComments": " request metadata\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 0, 8, 0],
        "span": [48, 2, 54, 3],
        "leadingComments": " request\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 0, 2, 6],
        "span": [57, 2, 21],
        "leadingComments": " connection info\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }, {
        "path": [4, 0, 2, 9],
        "span": [62, 2, 33],
        "leadingComments": " cloud only\n",
        "trailingComments": "",
        "leadingDetachedComments": [],
      }],
    },
    "syntax": "proto3",
  },
  references: {
    ".rpc.StartEgressRequest": StartEgressRequest,
    ".rpc.ListActiveEgressRequest": ListActiveEgressRequest,
    ".rpc.ListActiveEgressResponse": ListActiveEgressResponse,
  },
  dependencies: [protoMetadata1, protoMetadata2],
  options: {
    services: {
      "EgressInternal": {
        methods: {
          "StartEgress": { "options": Options.decode(Buffer.from("EAEwAQ==", "base64")) },
          "ListActiveEgress": { "options": Options.decode(Buffer.from("EAEoAQ==", "base64")) },
        },
      },
      "EgressHandler": {
        methods: {
          "UpdateStream": { "options": Options.decode(Buffer.from("EAE=", "base64")) },
          "StopEgress": { "options": Options.decode(Buffer.from("EAE=", "base64")) },
        },
      },
    },
  },
} as const satisfies ProtoMetadata;

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
