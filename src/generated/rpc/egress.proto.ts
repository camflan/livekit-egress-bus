// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v4.25.6
// source: rpc/egress.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  EgressInfo,
  ParticipantEgressRequest,
  RoomCompositeEgressRequest,
  StopEgressRequest,
  TrackCompositeEgressRequest,
  TrackEgressRequest,
  UpdateStreamRequest,
  WebEgressRequest,
} from "../livekit_egress.proto";

export const protobufPackage = "rpc";

export interface StartEgressRequest {
  /** request metadata */
  egressId: string;
  roomComposite?: RoomCompositeEgressRequest | undefined;
  web?: WebEgressRequest | undefined;
  participant?: ParticipantEgressRequest | undefined;
  trackComposite?: TrackCompositeEgressRequest | undefined;
  track?:
    | TrackEgressRequest
    | undefined;
  /** connection info */
  roomId: string;
  token: string;
  wsUrl: string;
  /** cloud only */
  cloudBackupEnabled: boolean;
  estimatedCpu: number;
}

export interface ListActiveEgressRequest {
}

export interface ListActiveEgressResponse {
  egressIds: string[];
}

function createBaseStartEgressRequest(): StartEgressRequest {
  return {
    egressId: "",
    roomComposite: undefined,
    web: undefined,
    participant: undefined,
    trackComposite: undefined,
    track: undefined,
    roomId: "",
    token: "",
    wsUrl: "",
    cloudBackupEnabled: false,
    estimatedCpu: 0,
  };
}

export const StartEgressRequest: MessageFns<StartEgressRequest> = {
  encode(message: StartEgressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.egressId !== "") {
      writer.uint32(10).string(message.egressId);
    }
    if (message.roomComposite !== undefined) {
      RoomCompositeEgressRequest.encode(message.roomComposite, writer.uint32(42).fork()).join();
    }
    if (message.web !== undefined) {
      WebEgressRequest.encode(message.web, writer.uint32(90).fork()).join();
    }
    if (message.participant !== undefined) {
      ParticipantEgressRequest.encode(message.participant, writer.uint32(106).fork()).join();
    }
    if (message.trackComposite !== undefined) {
      TrackCompositeEgressRequest.encode(message.trackComposite, writer.uint32(50).fork()).join();
    }
    if (message.track !== undefined) {
      TrackEgressRequest.encode(message.track, writer.uint32(58).fork()).join();
    }
    if (message.roomId !== "") {
      writer.uint32(26).string(message.roomId);
    }
    if (message.token !== "") {
      writer.uint32(66).string(message.token);
    }
    if (message.wsUrl !== "") {
      writer.uint32(74).string(message.wsUrl);
    }
    if (message.cloudBackupEnabled !== false) {
      writer.uint32(80).bool(message.cloudBackupEnabled);
    }
    if (message.estimatedCpu !== 0) {
      writer.uint32(113).double(message.estimatedCpu);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartEgressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartEgressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.egressId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.roomComposite = RoomCompositeEgressRequest.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.web = WebEgressRequest.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.participant = ParticipantEgressRequest.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.trackComposite = TrackCompositeEgressRequest.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.track = TrackEgressRequest.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.roomId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.wsUrl = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.cloudBackupEnabled = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 113) {
            break;
          }

          message.estimatedCpu = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartEgressRequest {
    return {
      egressId: isSet(object.egressId) ? globalThis.String(object.egressId) : "",
      roomComposite: isSet(object.roomComposite)
        ? RoomCompositeEgressRequest.fromJSON(object.roomComposite)
        : undefined,
      web: isSet(object.web) ? WebEgressRequest.fromJSON(object.web) : undefined,
      participant: isSet(object.participant) ? ParticipantEgressRequest.fromJSON(object.participant) : undefined,
      trackComposite: isSet(object.trackComposite)
        ? TrackCompositeEgressRequest.fromJSON(object.trackComposite)
        : undefined,
      track: isSet(object.track) ? TrackEgressRequest.fromJSON(object.track) : undefined,
      roomId: isSet(object.roomId) ? globalThis.String(object.roomId) : "",
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      wsUrl: isSet(object.wsUrl) ? globalThis.String(object.wsUrl) : "",
      cloudBackupEnabled: isSet(object.cloudBackupEnabled) ? globalThis.Boolean(object.cloudBackupEnabled) : false,
      estimatedCpu: isSet(object.estimatedCpu) ? globalThis.Number(object.estimatedCpu) : 0,
    };
  },

  toJSON(message: StartEgressRequest): unknown {
    const obj: any = {};
    if (message.egressId !== "") {
      obj.egressId = message.egressId;
    }
    if (message.roomComposite !== undefined) {
      obj.roomComposite = RoomCompositeEgressRequest.toJSON(message.roomComposite);
    }
    if (message.web !== undefined) {
      obj.web = WebEgressRequest.toJSON(message.web);
    }
    if (message.participant !== undefined) {
      obj.participant = ParticipantEgressRequest.toJSON(message.participant);
    }
    if (message.trackComposite !== undefined) {
      obj.trackComposite = TrackCompositeEgressRequest.toJSON(message.trackComposite);
    }
    if (message.track !== undefined) {
      obj.track = TrackEgressRequest.toJSON(message.track);
    }
    if (message.roomId !== "") {
      obj.roomId = message.roomId;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.wsUrl !== "") {
      obj.wsUrl = message.wsUrl;
    }
    if (message.cloudBackupEnabled !== false) {
      obj.cloudBackupEnabled = message.cloudBackupEnabled;
    }
    if (message.estimatedCpu !== 0) {
      obj.estimatedCpu = message.estimatedCpu;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StartEgressRequest>, I>>(base?: I): StartEgressRequest {
    return StartEgressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartEgressRequest>, I>>(object: I): StartEgressRequest {
    const message = createBaseStartEgressRequest();
    message.egressId = object.egressId ?? "";
    message.roomComposite = (object.roomComposite !== undefined && object.roomComposite !== null)
      ? RoomCompositeEgressRequest.fromPartial(object.roomComposite)
      : undefined;
    message.web = (object.web !== undefined && object.web !== null)
      ? WebEgressRequest.fromPartial(object.web)
      : undefined;
    message.participant = (object.participant !== undefined && object.participant !== null)
      ? ParticipantEgressRequest.fromPartial(object.participant)
      : undefined;
    message.trackComposite = (object.trackComposite !== undefined && object.trackComposite !== null)
      ? TrackCompositeEgressRequest.fromPartial(object.trackComposite)
      : undefined;
    message.track = (object.track !== undefined && object.track !== null)
      ? TrackEgressRequest.fromPartial(object.track)
      : undefined;
    message.roomId = object.roomId ?? "";
    message.token = object.token ?? "";
    message.wsUrl = object.wsUrl ?? "";
    message.cloudBackupEnabled = object.cloudBackupEnabled ?? false;
    message.estimatedCpu = object.estimatedCpu ?? 0;
    return message;
  },
};

function createBaseListActiveEgressRequest(): ListActiveEgressRequest {
  return {};
}

export const ListActiveEgressRequest: MessageFns<ListActiveEgressRequest> = {
  encode(_: ListActiveEgressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListActiveEgressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListActiveEgressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListActiveEgressRequest {
    return {};
  },

  toJSON(_: ListActiveEgressRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListActiveEgressRequest>, I>>(base?: I): ListActiveEgressRequest {
    return ListActiveEgressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListActiveEgressRequest>, I>>(_: I): ListActiveEgressRequest {
    const message = createBaseListActiveEgressRequest();
    return message;
  },
};

function createBaseListActiveEgressResponse(): ListActiveEgressResponse {
  return { egressIds: [] };
}

export const ListActiveEgressResponse: MessageFns<ListActiveEgressResponse> = {
  encode(message: ListActiveEgressResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.egressIds) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListActiveEgressResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListActiveEgressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.egressIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListActiveEgressResponse {
    return {
      egressIds: globalThis.Array.isArray(object?.egressIds)
        ? object.egressIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ListActiveEgressResponse): unknown {
    const obj: any = {};
    if (message.egressIds?.length) {
      obj.egressIds = message.egressIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListActiveEgressResponse>, I>>(base?: I): ListActiveEgressResponse {
    return ListActiveEgressResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListActiveEgressResponse>, I>>(object: I): ListActiveEgressResponse {
    const message = createBaseListActiveEgressResponse();
    message.egressIds = object.egressIds?.map((e) => e) || [];
    return message;
  },
};

export interface EgressInternal {
  StartEgress(request: StartEgressRequest): Promise<EgressInfo>;
  ListActiveEgress(request: ListActiveEgressRequest): Promise<ListActiveEgressResponse>;
}

export const EgressInternalServiceName = "rpc.EgressInternal";
export class EgressInternalClientImpl implements EgressInternal {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || EgressInternalServiceName;
    this.rpc = rpc;
    this.StartEgress = this.StartEgress.bind(this);
    this.ListActiveEgress = this.ListActiveEgress.bind(this);
  }
  StartEgress(request: StartEgressRequest): Promise<EgressInfo> {
    const data = StartEgressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "StartEgress", data);
    return promise.then((data) => EgressInfo.decode(new BinaryReader(data)));
  }

  ListActiveEgress(request: ListActiveEgressRequest): Promise<ListActiveEgressResponse> {
    const data = ListActiveEgressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListActiveEgress", data);
    return promise.then((data) => ListActiveEgressResponse.decode(new BinaryReader(data)));
  }
}

export interface EgressHandler {
  UpdateStream(request: UpdateStreamRequest): Promise<EgressInfo>;
  StopEgress(request: StopEgressRequest): Promise<EgressInfo>;
}

export const EgressHandlerServiceName = "rpc.EgressHandler";
export class EgressHandlerClientImpl implements EgressHandler {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || EgressHandlerServiceName;
    this.rpc = rpc;
    this.UpdateStream = this.UpdateStream.bind(this);
    this.StopEgress = this.StopEgress.bind(this);
  }
  UpdateStream(request: UpdateStreamRequest): Promise<EgressInfo> {
    const data = UpdateStreamRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateStream", data);
    return promise.then((data) => EgressInfo.decode(new BinaryReader(data)));
  }

  StopEgress(request: StopEgressRequest): Promise<EgressInfo> {
    const data = StopEgressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "StopEgress", data);
    return promise.then((data) => EgressInfo.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
