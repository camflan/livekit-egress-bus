// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v4.25.6
// source: livekit_egress.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FileDescriptorProto as FileDescriptorProto1 } from "ts-proto-descriptors";
import {
  AudioCodec,
  audioCodecFromJSON,
  audioCodecToJSON,
  ImageCodec,
  imageCodecFromJSON,
  imageCodecToJSON,
  protoMetadata as protoMetadata1,
  VideoCodec,
  videoCodecFromJSON,
  videoCodecToJSON,
} from "./livekit_models";
import { messageTypeRegistry } from "./typeRegistry";

export const protobufPackage = "livekit";

export const EncodedFileType = {
  /** DEFAULT_FILETYPE - file type chosen based on codecs */
  DEFAULT_FILETYPE: 0,
  MP4: 1,
  OGG: 2,
  UNRECOGNIZED: -1,
} as const;

export type EncodedFileType =
  (typeof EncodedFileType)[keyof typeof EncodedFileType];

export namespace EncodedFileType {
  export type DEFAULT_FILETYPE = typeof EncodedFileType.DEFAULT_FILETYPE;
  export type MP4 = typeof EncodedFileType.MP4;
  export type OGG = typeof EncodedFileType.OGG;
  export type UNRECOGNIZED = typeof EncodedFileType.UNRECOGNIZED;
}

export function encodedFileTypeFromJSON(object: any): EncodedFileType {
  switch (object) {
    case 0:
    case "DEFAULT_FILETYPE":
      return EncodedFileType.DEFAULT_FILETYPE;
    case 1:
    case "MP4":
      return EncodedFileType.MP4;
    case 2:
    case "OGG":
      return EncodedFileType.OGG;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EncodedFileType.UNRECOGNIZED;
  }
}

export function encodedFileTypeToJSON(object: EncodedFileType): string {
  switch (object) {
    case EncodedFileType.DEFAULT_FILETYPE:
      return "DEFAULT_FILETYPE";
    case EncodedFileType.MP4:
      return "MP4";
    case EncodedFileType.OGG:
      return "OGG";
    case EncodedFileType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export const SegmentedFileProtocol = {
  DEFAULT_SEGMENTED_FILE_PROTOCOL: 0,
  HLS_PROTOCOL: 1,
  UNRECOGNIZED: -1,
} as const;

export type SegmentedFileProtocol =
  (typeof SegmentedFileProtocol)[keyof typeof SegmentedFileProtocol];

export namespace SegmentedFileProtocol {
  export type DEFAULT_SEGMENTED_FILE_PROTOCOL =
    typeof SegmentedFileProtocol.DEFAULT_SEGMENTED_FILE_PROTOCOL;
  export type HLS_PROTOCOL = typeof SegmentedFileProtocol.HLS_PROTOCOL;
  export type UNRECOGNIZED = typeof SegmentedFileProtocol.UNRECOGNIZED;
}

export function segmentedFileProtocolFromJSON(
  object: any,
): SegmentedFileProtocol {
  switch (object) {
    case 0:
    case "DEFAULT_SEGMENTED_FILE_PROTOCOL":
      return SegmentedFileProtocol.DEFAULT_SEGMENTED_FILE_PROTOCOL;
    case 1:
    case "HLS_PROTOCOL":
      return SegmentedFileProtocol.HLS_PROTOCOL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SegmentedFileProtocol.UNRECOGNIZED;
  }
}

export function segmentedFileProtocolToJSON(
  object: SegmentedFileProtocol,
): string {
  switch (object) {
    case SegmentedFileProtocol.DEFAULT_SEGMENTED_FILE_PROTOCOL:
      return "DEFAULT_SEGMENTED_FILE_PROTOCOL";
    case SegmentedFileProtocol.HLS_PROTOCOL:
      return "HLS_PROTOCOL";
    case SegmentedFileProtocol.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export const SegmentedFileSuffix = {
  INDEX: 0,
  TIMESTAMP: 1,
  UNRECOGNIZED: -1,
} as const;

export type SegmentedFileSuffix =
  (typeof SegmentedFileSuffix)[keyof typeof SegmentedFileSuffix];

export namespace SegmentedFileSuffix {
  export type INDEX = typeof SegmentedFileSuffix.INDEX;
  export type TIMESTAMP = typeof SegmentedFileSuffix.TIMESTAMP;
  export type UNRECOGNIZED = typeof SegmentedFileSuffix.UNRECOGNIZED;
}

export function segmentedFileSuffixFromJSON(object: any): SegmentedFileSuffix {
  switch (object) {
    case 0:
    case "INDEX":
      return SegmentedFileSuffix.INDEX;
    case 1:
    case "TIMESTAMP":
      return SegmentedFileSuffix.TIMESTAMP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SegmentedFileSuffix.UNRECOGNIZED;
  }
}

export function segmentedFileSuffixToJSON(object: SegmentedFileSuffix): string {
  switch (object) {
    case SegmentedFileSuffix.INDEX:
      return "INDEX";
    case SegmentedFileSuffix.TIMESTAMP:
      return "TIMESTAMP";
    case SegmentedFileSuffix.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export const ImageFileSuffix = {
  IMAGE_SUFFIX_INDEX: 0,
  IMAGE_SUFFIX_TIMESTAMP: 1,
  UNRECOGNIZED: -1,
} as const;

export type ImageFileSuffix =
  (typeof ImageFileSuffix)[keyof typeof ImageFileSuffix];

export namespace ImageFileSuffix {
  export type IMAGE_SUFFIX_INDEX = typeof ImageFileSuffix.IMAGE_SUFFIX_INDEX;
  export type IMAGE_SUFFIX_TIMESTAMP =
    typeof ImageFileSuffix.IMAGE_SUFFIX_TIMESTAMP;
  export type UNRECOGNIZED = typeof ImageFileSuffix.UNRECOGNIZED;
}

export function imageFileSuffixFromJSON(object: any): ImageFileSuffix {
  switch (object) {
    case 0:
    case "IMAGE_SUFFIX_INDEX":
      return ImageFileSuffix.IMAGE_SUFFIX_INDEX;
    case 1:
    case "IMAGE_SUFFIX_TIMESTAMP":
      return ImageFileSuffix.IMAGE_SUFFIX_TIMESTAMP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ImageFileSuffix.UNRECOGNIZED;
  }
}

export function imageFileSuffixToJSON(object: ImageFileSuffix): string {
  switch (object) {
    case ImageFileSuffix.IMAGE_SUFFIX_INDEX:
      return "IMAGE_SUFFIX_INDEX";
    case ImageFileSuffix.IMAGE_SUFFIX_TIMESTAMP:
      return "IMAGE_SUFFIX_TIMESTAMP";
    case ImageFileSuffix.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export const StreamProtocol = {
  /** DEFAULT_PROTOCOL - protocol chosen based on urls */
  DEFAULT_PROTOCOL: 0,
  RTMP: 1,
  SRT: 2,
  UNRECOGNIZED: -1,
} as const;

export type StreamProtocol =
  (typeof StreamProtocol)[keyof typeof StreamProtocol];

export namespace StreamProtocol {
  export type DEFAULT_PROTOCOL = typeof StreamProtocol.DEFAULT_PROTOCOL;
  export type RTMP = typeof StreamProtocol.RTMP;
  export type SRT = typeof StreamProtocol.SRT;
  export type UNRECOGNIZED = typeof StreamProtocol.UNRECOGNIZED;
}

export function streamProtocolFromJSON(object: any): StreamProtocol {
  switch (object) {
    case 0:
    case "DEFAULT_PROTOCOL":
      return StreamProtocol.DEFAULT_PROTOCOL;
    case 1:
    case "RTMP":
      return StreamProtocol.RTMP;
    case 2:
    case "SRT":
      return StreamProtocol.SRT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StreamProtocol.UNRECOGNIZED;
  }
}

export function streamProtocolToJSON(object: StreamProtocol): string {
  switch (object) {
    case StreamProtocol.DEFAULT_PROTOCOL:
      return "DEFAULT_PROTOCOL";
    case StreamProtocol.RTMP:
      return "RTMP";
    case StreamProtocol.SRT:
      return "SRT";
    case StreamProtocol.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export const AudioMixing = {
  /** DEFAULT_MIXING - all users are mixed together */
  DEFAULT_MIXING: 0,
  /** DUAL_CHANNEL_AGENT - agent audio in the left channel, all other audio in the right channel */
  DUAL_CHANNEL_AGENT: 1,
  /** DUAL_CHANNEL_ALTERNATE - each new audio track alternates between left and right channels */
  DUAL_CHANNEL_ALTERNATE: 2,
  UNRECOGNIZED: -1,
} as const;

export type AudioMixing = (typeof AudioMixing)[keyof typeof AudioMixing];

export namespace AudioMixing {
  export type DEFAULT_MIXING = typeof AudioMixing.DEFAULT_MIXING;
  export type DUAL_CHANNEL_AGENT = typeof AudioMixing.DUAL_CHANNEL_AGENT;
  export type DUAL_CHANNEL_ALTERNATE =
    typeof AudioMixing.DUAL_CHANNEL_ALTERNATE;
  export type UNRECOGNIZED = typeof AudioMixing.UNRECOGNIZED;
}

export function audioMixingFromJSON(object: any): AudioMixing {
  switch (object) {
    case 0:
    case "DEFAULT_MIXING":
      return AudioMixing.DEFAULT_MIXING;
    case 1:
    case "DUAL_CHANNEL_AGENT":
      return AudioMixing.DUAL_CHANNEL_AGENT;
    case 2:
    case "DUAL_CHANNEL_ALTERNATE":
      return AudioMixing.DUAL_CHANNEL_ALTERNATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AudioMixing.UNRECOGNIZED;
  }
}

export function audioMixingToJSON(object: AudioMixing): string {
  switch (object) {
    case AudioMixing.DEFAULT_MIXING:
      return "DEFAULT_MIXING";
    case AudioMixing.DUAL_CHANNEL_AGENT:
      return "DUAL_CHANNEL_AGENT";
    case AudioMixing.DUAL_CHANNEL_ALTERNATE:
      return "DUAL_CHANNEL_ALTERNATE";
    case AudioMixing.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export const EncodingOptionsPreset = {
  /** H264_720P_30 - 1280x720, 30fps, 3000kpbs, H.264_MAIN / OPUS */
  H264_720P_30: 0,
  /** H264_720P_60 - 1280x720, 60fps, 4500kbps, H.264_MAIN / OPUS */
  H264_720P_60: 1,
  /** H264_1080P_30 - 1920x1080, 30fps, 4500kbps, H.264_MAIN / OPUS */
  H264_1080P_30: 2,
  /** H264_1080P_60 - 1920x1080, 60fps, 6000kbps, H.264_MAIN / OPUS */
  H264_1080P_60: 3,
  /** PORTRAIT_H264_720P_30 - 720x1280, 30fps, 3000kpbs, H.264_MAIN / OPUS */
  PORTRAIT_H264_720P_30: 4,
  /** PORTRAIT_H264_720P_60 - 720x1280, 60fps, 4500kbps, H.264_MAIN / OPUS */
  PORTRAIT_H264_720P_60: 5,
  /** PORTRAIT_H264_1080P_30 - 1080x1920, 30fps, 4500kbps, H.264_MAIN / OPUS */
  PORTRAIT_H264_1080P_30: 6,
  /** PORTRAIT_H264_1080P_60 - 1080x1920, 60fps, 6000kbps, H.264_MAIN / OPUS */
  PORTRAIT_H264_1080P_60: 7,
  UNRECOGNIZED: -1,
} as const;

export type EncodingOptionsPreset =
  (typeof EncodingOptionsPreset)[keyof typeof EncodingOptionsPreset];

export namespace EncodingOptionsPreset {
  export type H264_720P_30 = typeof EncodingOptionsPreset.H264_720P_30;
  export type H264_720P_60 = typeof EncodingOptionsPreset.H264_720P_60;
  export type H264_1080P_30 = typeof EncodingOptionsPreset.H264_1080P_30;
  export type H264_1080P_60 = typeof EncodingOptionsPreset.H264_1080P_60;
  export type PORTRAIT_H264_720P_30 =
    typeof EncodingOptionsPreset.PORTRAIT_H264_720P_30;
  export type PORTRAIT_H264_720P_60 =
    typeof EncodingOptionsPreset.PORTRAIT_H264_720P_60;
  export type PORTRAIT_H264_1080P_30 =
    typeof EncodingOptionsPreset.PORTRAIT_H264_1080P_30;
  export type PORTRAIT_H264_1080P_60 =
    typeof EncodingOptionsPreset.PORTRAIT_H264_1080P_60;
  export type UNRECOGNIZED = typeof EncodingOptionsPreset.UNRECOGNIZED;
}

export function encodingOptionsPresetFromJSON(
  object: any,
): EncodingOptionsPreset {
  switch (object) {
    case 0:
    case "H264_720P_30":
      return EncodingOptionsPreset.H264_720P_30;
    case 1:
    case "H264_720P_60":
      return EncodingOptionsPreset.H264_720P_60;
    case 2:
    case "H264_1080P_30":
      return EncodingOptionsPreset.H264_1080P_30;
    case 3:
    case "H264_1080P_60":
      return EncodingOptionsPreset.H264_1080P_60;
    case 4:
    case "PORTRAIT_H264_720P_30":
      return EncodingOptionsPreset.PORTRAIT_H264_720P_30;
    case 5:
    case "PORTRAIT_H264_720P_60":
      return EncodingOptionsPreset.PORTRAIT_H264_720P_60;
    case 6:
    case "PORTRAIT_H264_1080P_30":
      return EncodingOptionsPreset.PORTRAIT_H264_1080P_30;
    case 7:
    case "PORTRAIT_H264_1080P_60":
      return EncodingOptionsPreset.PORTRAIT_H264_1080P_60;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EncodingOptionsPreset.UNRECOGNIZED;
  }
}

export function encodingOptionsPresetToJSON(
  object: EncodingOptionsPreset,
): string {
  switch (object) {
    case EncodingOptionsPreset.H264_720P_30:
      return "H264_720P_30";
    case EncodingOptionsPreset.H264_720P_60:
      return "H264_720P_60";
    case EncodingOptionsPreset.H264_1080P_30:
      return "H264_1080P_30";
    case EncodingOptionsPreset.H264_1080P_60:
      return "H264_1080P_60";
    case EncodingOptionsPreset.PORTRAIT_H264_720P_30:
      return "PORTRAIT_H264_720P_30";
    case EncodingOptionsPreset.PORTRAIT_H264_720P_60:
      return "PORTRAIT_H264_720P_60";
    case EncodingOptionsPreset.PORTRAIT_H264_1080P_30:
      return "PORTRAIT_H264_1080P_30";
    case EncodingOptionsPreset.PORTRAIT_H264_1080P_60:
      return "PORTRAIT_H264_1080P_60";
    case EncodingOptionsPreset.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export const EgressStatus = {
  EGRESS_STARTING: 0,
  EGRESS_ACTIVE: 1,
  EGRESS_ENDING: 2,
  EGRESS_COMPLETE: 3,
  EGRESS_FAILED: 4,
  EGRESS_ABORTED: 5,
  EGRESS_LIMIT_REACHED: 6,
  UNRECOGNIZED: -1,
} as const;

export type EgressStatus = (typeof EgressStatus)[keyof typeof EgressStatus];

export namespace EgressStatus {
  export type EGRESS_STARTING = typeof EgressStatus.EGRESS_STARTING;
  export type EGRESS_ACTIVE = typeof EgressStatus.EGRESS_ACTIVE;
  export type EGRESS_ENDING = typeof EgressStatus.EGRESS_ENDING;
  export type EGRESS_COMPLETE = typeof EgressStatus.EGRESS_COMPLETE;
  export type EGRESS_FAILED = typeof EgressStatus.EGRESS_FAILED;
  export type EGRESS_ABORTED = typeof EgressStatus.EGRESS_ABORTED;
  export type EGRESS_LIMIT_REACHED = typeof EgressStatus.EGRESS_LIMIT_REACHED;
  export type UNRECOGNIZED = typeof EgressStatus.UNRECOGNIZED;
}

export function egressStatusFromJSON(object: any): EgressStatus {
  switch (object) {
    case 0:
    case "EGRESS_STARTING":
      return EgressStatus.EGRESS_STARTING;
    case 1:
    case "EGRESS_ACTIVE":
      return EgressStatus.EGRESS_ACTIVE;
    case 2:
    case "EGRESS_ENDING":
      return EgressStatus.EGRESS_ENDING;
    case 3:
    case "EGRESS_COMPLETE":
      return EgressStatus.EGRESS_COMPLETE;
    case 4:
    case "EGRESS_FAILED":
      return EgressStatus.EGRESS_FAILED;
    case 5:
    case "EGRESS_ABORTED":
      return EgressStatus.EGRESS_ABORTED;
    case 6:
    case "EGRESS_LIMIT_REACHED":
      return EgressStatus.EGRESS_LIMIT_REACHED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EgressStatus.UNRECOGNIZED;
  }
}

export function egressStatusToJSON(object: EgressStatus): string {
  switch (object) {
    case EgressStatus.EGRESS_STARTING:
      return "EGRESS_STARTING";
    case EgressStatus.EGRESS_ACTIVE:
      return "EGRESS_ACTIVE";
    case EgressStatus.EGRESS_ENDING:
      return "EGRESS_ENDING";
    case EgressStatus.EGRESS_COMPLETE:
      return "EGRESS_COMPLETE";
    case EgressStatus.EGRESS_FAILED:
      return "EGRESS_FAILED";
    case EgressStatus.EGRESS_ABORTED:
      return "EGRESS_ABORTED";
    case EgressStatus.EGRESS_LIMIT_REACHED:
      return "EGRESS_LIMIT_REACHED";
    case EgressStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export const EgressSourceType = {
  EGRESS_SOURCE_TYPE_WEB: 0,
  EGRESS_SOURCE_TYPE_SDK: 1,
  UNRECOGNIZED: -1,
} as const;

export type EgressSourceType =
  (typeof EgressSourceType)[keyof typeof EgressSourceType];

export namespace EgressSourceType {
  export type EGRESS_SOURCE_TYPE_WEB =
    typeof EgressSourceType.EGRESS_SOURCE_TYPE_WEB;
  export type EGRESS_SOURCE_TYPE_SDK =
    typeof EgressSourceType.EGRESS_SOURCE_TYPE_SDK;
  export type UNRECOGNIZED = typeof EgressSourceType.UNRECOGNIZED;
}

export function egressSourceTypeFromJSON(object: any): EgressSourceType {
  switch (object) {
    case 0:
    case "EGRESS_SOURCE_TYPE_WEB":
      return EgressSourceType.EGRESS_SOURCE_TYPE_WEB;
    case 1:
    case "EGRESS_SOURCE_TYPE_SDK":
      return EgressSourceType.EGRESS_SOURCE_TYPE_SDK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EgressSourceType.UNRECOGNIZED;
  }
}

export function egressSourceTypeToJSON(object: EgressSourceType): string {
  switch (object) {
    case EgressSourceType.EGRESS_SOURCE_TYPE_WEB:
      return "EGRESS_SOURCE_TYPE_WEB";
    case EgressSourceType.EGRESS_SOURCE_TYPE_SDK:
      return "EGRESS_SOURCE_TYPE_SDK";
    case EgressSourceType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** composite using a web browser */
export interface RoomCompositeEgressRequest {
  $type: "livekit.RoomCompositeEgressRequest";
  /** required */
  roomName: string;
  /** (optional) */
  layout: string;
  /** (default false) */
  audioOnly: boolean;
  /** only applies to audio_only egress (default DEFAULT_MIXING) */
  audioMixing: AudioMixing;
  /** (default false) */
  videoOnly: boolean;
  /** template base url (default https://recorder.livekit.io) */
  customBaseUrl: string;
  /** @deprecated */
  file?: EncodedFileOutput | undefined;
  /** @deprecated */
  stream?: StreamOutput | undefined;
  /** @deprecated */
  segments?: SegmentedFileOutput | undefined;
  /** (default H264_720P_30) */
  preset?: EncodingOptionsPreset | undefined;
  /** (optional) */
  advanced?: EncodingOptions | undefined;
  fileOutputs: EncodedFileOutput[];
  streamOutputs: StreamOutput[];
  segmentOutputs: SegmentedFileOutput[];
  imageOutputs: ImageOutput[];
}

/** record any website */
export interface WebEgressRequest {
  $type: "livekit.WebEgressRequest";
  url: string;
  audioOnly: boolean;
  videoOnly: boolean;
  awaitStartSignal: boolean;
  /** @deprecated */
  file?: EncodedFileOutput | undefined;
  /** @deprecated */
  stream?: StreamOutput | undefined;
  /** @deprecated */
  segments?: SegmentedFileOutput | undefined;
  preset?: EncodingOptionsPreset | undefined;
  advanced?: EncodingOptions | undefined;
  fileOutputs: EncodedFileOutput[];
  streamOutputs: StreamOutput[];
  segmentOutputs: SegmentedFileOutput[];
  imageOutputs: ImageOutput[];
}

/** record audio and video from a single participant */
export interface ParticipantEgressRequest {
  $type: "livekit.ParticipantEgressRequest";
  /** required */
  roomName: string;
  /** required */
  identity: string;
  /** (default false) */
  screenShare: boolean;
  /** (default H264_720P_30) */
  preset?: EncodingOptionsPreset | undefined;
  /** (optional) */
  advanced?: EncodingOptions | undefined;
  fileOutputs: EncodedFileOutput[];
  streamOutputs: StreamOutput[];
  segmentOutputs: SegmentedFileOutput[];
  imageOutputs: ImageOutput[];
}

/** containerize up to one audio and one video track */
export interface TrackCompositeEgressRequest {
  $type: "livekit.TrackCompositeEgressRequest";
  /** required */
  roomName: string;
  /** (optional) */
  audioTrackId: string;
  /** (optional) */
  videoTrackId: string;
  /** @deprecated */
  file?: EncodedFileOutput | undefined;
  /** @deprecated */
  stream?: StreamOutput | undefined;
  /** @deprecated */
  segments?: SegmentedFileOutput | undefined;
  /** (default H264_720P_30) */
  preset?: EncodingOptionsPreset | undefined;
  /** (optional) */
  advanced?: EncodingOptions | undefined;
  fileOutputs: EncodedFileOutput[];
  streamOutputs: StreamOutput[];
  segmentOutputs: SegmentedFileOutput[];
  imageOutputs: ImageOutput[];
}

/** record tracks individually, without transcoding */
export interface TrackEgressRequest {
  $type: "livekit.TrackEgressRequest";
  /** required */
  roomName: string;
  /** required */
  trackId: string;
  file?: DirectFileOutput | undefined;
  websocketUrl?: string | undefined;
}

export interface EncodedFileOutput {
  $type: "livekit.EncodedFileOutput";
  /** (optional) */
  fileType: EncodedFileType;
  /** see egress docs for templating (default {room_name}-{time}) */
  filepath: string;
  /** disable upload of manifest file (default false) */
  disableManifest: boolean;
  s3?: S3Upload | undefined;
  gcp?: GCPUpload | undefined;
  azure?: AzureBlobUpload | undefined;
  aliOSS?: AliOSSUpload | undefined;
}

/** Used to generate HLS segments or other kind of segmented output */
export interface SegmentedFileOutput {
  $type: "livekit.SegmentedFileOutput";
  /** (optional) */
  protocol: SegmentedFileProtocol;
  /** (optional) */
  filenamePrefix: string;
  /** (optional) */
  playlistName: string;
  /** (optional, disabled if not provided). Path of a live playlist */
  livePlaylistName: string;
  /** in seconds (optional) */
  segmentDuration: number;
  /** (optional, default INDEX) */
  filenameSuffix: SegmentedFileSuffix;
  /** disable upload of manifest file (default false) */
  disableManifest: boolean;
  s3?: S3Upload | undefined;
  gcp?: GCPUpload | undefined;
  azure?: AzureBlobUpload | undefined;
  aliOSS?: AliOSSUpload | undefined;
}

export interface DirectFileOutput {
  $type: "livekit.DirectFileOutput";
  /** see egress docs for templating (default {track_id}-{time}) */
  filepath: string;
  /** disable upload of manifest file (default false) */
  disableManifest: boolean;
  s3?: S3Upload | undefined;
  gcp?: GCPUpload | undefined;
  azure?: AzureBlobUpload | undefined;
  aliOSS?: AliOSSUpload | undefined;
}

export interface ImageOutput {
  $type: "livekit.ImageOutput";
  /** in seconds (required) */
  captureInterval: number;
  /** (optional, defaults to track width) */
  width: number;
  /** (optional, defaults to track height) */
  height: number;
  /** (optional) */
  filenamePrefix: string;
  /** (optional, default INDEX) */
  filenameSuffix: ImageFileSuffix;
  /** (optional) */
  imageCodec: ImageCodec;
  /** disable upload of manifest file (default false) */
  disableManifest: boolean;
  s3?: S3Upload | undefined;
  gcp?: GCPUpload | undefined;
  azure?: AzureBlobUpload | undefined;
  aliOSS?: AliOSSUpload | undefined;
}

export interface S3Upload {
  $type: "livekit.S3Upload";
  accessKey: string;
  secret: string;
  sessionToken: string;
  region: string;
  endpoint: string;
  bucket: string;
  forcePathStyle: boolean;
  metadata: { [key: string]: string };
  tagging: string;
  /** Content-Disposition header */
  contentDisposition: string;
  proxy: ProxyConfig | undefined;
}

export interface S3Upload_MetadataEntry {
  $type: "livekit.S3Upload.MetadataEntry";
  key: string;
  value: string;
}

export interface GCPUpload {
  $type: "livekit.GCPUpload";
  /** service account credentials serialized in JSON "credentials.json" */
  credentials: string;
  bucket: string;
  proxy: ProxyConfig | undefined;
}

export interface AzureBlobUpload {
  $type: "livekit.AzureBlobUpload";
  accountName: string;
  accountKey: string;
  containerName: string;
}

export interface AliOSSUpload {
  $type: "livekit.AliOSSUpload";
  accessKey: string;
  secret: string;
  region: string;
  endpoint: string;
  bucket: string;
}

export interface ProxyConfig {
  $type: "livekit.ProxyConfig";
  url: string;
  username: string;
  password: string;
}

export interface StreamOutput {
  $type: "livekit.StreamOutput";
  /** required */
  protocol: StreamProtocol;
  /** required */
  urls: string[];
}

export interface EncodingOptions {
  $type: "livekit.EncodingOptions";
  /** (default 1920) */
  width: number;
  /** (default 1080) */
  height: number;
  /** (default 24) */
  depth: number;
  /** (default 30) */
  framerate: number;
  /** (default OPUS) */
  audioCodec: AudioCodec;
  /** (default 128) */
  audioBitrate: number;
  /** quality setting on audio encoder */
  audioQuality: number;
  /** (default 44100) */
  audioFrequency: number;
  /** (default H264_MAIN) */
  videoCodec: VideoCodec;
  /** (default 4500) */
  videoBitrate: number;
  /** quality setting on video encoder */
  videoQuality: number;
  /** in seconds (default 4s for streaming, segment duration for segmented output, encoder default for files) */
  keyFrameInterval: number;
}

export interface UpdateLayoutRequest {
  $type: "livekit.UpdateLayoutRequest";
  egressId: string;
  layout: string;
}

export interface UpdateStreamRequest {
  $type: "livekit.UpdateStreamRequest";
  egressId: string;
  addOutputUrls: string[];
  removeOutputUrls: string[];
}

export interface ListEgressRequest {
  $type: "livekit.ListEgressRequest";
  /** (optional, filter by room name) */
  roomName: string;
  /** (optional, filter by egress ID) */
  egressId: string;
  /** (optional, list active egress only) */
  active: boolean;
}

export interface ListEgressResponse {
  $type: "livekit.ListEgressResponse";
  items: EgressInfo[];
}

export interface StopEgressRequest {
  $type: "livekit.StopEgressRequest";
  egressId: string;
}

export interface EgressInfo {
  $type: "livekit.EgressInfo";
  egressId: string;
  roomId: string;
  roomName: string;
  sourceType: EgressSourceType;
  status: EgressStatus;
  startedAt: bigint;
  endedAt: bigint;
  updatedAt: bigint;
  details: string;
  error: string;
  errorCode: number;
  roomComposite?: RoomCompositeEgressRequest | undefined;
  web?: WebEgressRequest | undefined;
  participant?: ParticipantEgressRequest | undefined;
  trackComposite?: TrackCompositeEgressRequest | undefined;
  track?: TrackEgressRequest | undefined;
  /** @deprecated */
  stream?: StreamInfoList | undefined;
  /** @deprecated */
  file?: FileInfo | undefined;
  /** @deprecated */
  segments?: SegmentsInfo | undefined;
  streamResults: StreamInfo[];
  fileResults: FileInfo[];
  segmentResults: SegmentsInfo[];
  imageResults: ImagesInfo[];
  manifestLocation: string;
  /** next ID: 27 */
  backupStorageUsed: boolean;
}

/** @deprecated */
export interface StreamInfoList {
  $type: "livekit.StreamInfoList";
  info: StreamInfo[];
}

export interface StreamInfo {
  $type: "livekit.StreamInfo";
  url: string;
  startedAt: bigint;
  endedAt: bigint;
  duration: bigint;
  status: StreamInfo_Status;
  error: string;
}

export const StreamInfo_Status = {
  ACTIVE: 0,
  FINISHED: 1,
  FAILED: 2,
  UNRECOGNIZED: -1,
} as const;

export type StreamInfo_Status =
  (typeof StreamInfo_Status)[keyof typeof StreamInfo_Status];

export namespace StreamInfo_Status {
  export type ACTIVE = typeof StreamInfo_Status.ACTIVE;
  export type FINISHED = typeof StreamInfo_Status.FINISHED;
  export type FAILED = typeof StreamInfo_Status.FAILED;
  export type UNRECOGNIZED = typeof StreamInfo_Status.UNRECOGNIZED;
}

export function streamInfo_StatusFromJSON(object: any): StreamInfo_Status {
  switch (object) {
    case 0:
    case "ACTIVE":
      return StreamInfo_Status.ACTIVE;
    case 1:
    case "FINISHED":
      return StreamInfo_Status.FINISHED;
    case 2:
    case "FAILED":
      return StreamInfo_Status.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StreamInfo_Status.UNRECOGNIZED;
  }
}

export function streamInfo_StatusToJSON(object: StreamInfo_Status): string {
  switch (object) {
    case StreamInfo_Status.ACTIVE:
      return "ACTIVE";
    case StreamInfo_Status.FINISHED:
      return "FINISHED";
    case StreamInfo_Status.FAILED:
      return "FAILED";
    case StreamInfo_Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface FileInfo {
  $type: "livekit.FileInfo";
  filename: string;
  startedAt: bigint;
  endedAt: bigint;
  duration: bigint;
  size: bigint;
  location: string;
}

export interface SegmentsInfo {
  $type: "livekit.SegmentsInfo";
  playlistName: string;
  livePlaylistName: string;
  duration: bigint;
  size: bigint;
  playlistLocation: string;
  livePlaylistLocation: string;
  segmentCount: bigint;
  startedAt: bigint;
  endedAt: bigint;
}

export interface ImagesInfo {
  $type: "livekit.ImagesInfo";
  filenamePrefix: string;
  imageCount: bigint;
  startedAt: bigint;
  endedAt: bigint;
}

export interface AutoParticipantEgress {
  $type: "livekit.AutoParticipantEgress";
  /** (default H264_720P_30) */
  preset?: EncodingOptionsPreset | undefined;
  /** (optional) */
  advanced?: EncodingOptions | undefined;
  fileOutputs: EncodedFileOutput[];
  segmentOutputs: SegmentedFileOutput[];
}

export interface AutoTrackEgress {
  $type: "livekit.AutoTrackEgress";
  /** see docs for templating (default {track_id}-{time}) */
  filepath: string;
  /** disables upload of json manifest file (default false) */
  disableManifest: boolean;
  s3?: S3Upload | undefined;
  gcp?: GCPUpload | undefined;
  azure?: AzureBlobUpload | undefined;
  aliOSS?: AliOSSUpload | undefined;
}

function createBaseRoomCompositeEgressRequest(): RoomCompositeEgressRequest {
  return {
    $type: "livekit.RoomCompositeEgressRequest",
    roomName: "",
    layout: "",
    audioOnly: false,
    audioMixing: 0,
    videoOnly: false,
    customBaseUrl: "",
    file: undefined,
    stream: undefined,
    segments: undefined,
    preset: undefined,
    advanced: undefined,
    fileOutputs: [],
    streamOutputs: [],
    segmentOutputs: [],
    imageOutputs: [],
  };
}

export const RoomCompositeEgressRequest: MessageFns<
  RoomCompositeEgressRequest,
  "livekit.RoomCompositeEgressRequest"
> = {
  $type: "livekit.RoomCompositeEgressRequest" as const,

  encode(
    message: RoomCompositeEgressRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.roomName !== "") {
      writer.uint32(10).string(message.roomName);
    }
    if (message.layout !== "") {
      writer.uint32(18).string(message.layout);
    }
    if (message.audioOnly !== false) {
      writer.uint32(24).bool(message.audioOnly);
    }
    if (message.audioMixing !== 0) {
      writer.uint32(120).int32(message.audioMixing);
    }
    if (message.videoOnly !== false) {
      writer.uint32(32).bool(message.videoOnly);
    }
    if (message.customBaseUrl !== "") {
      writer.uint32(42).string(message.customBaseUrl);
    }
    if (message.file !== undefined) {
      EncodedFileOutput.encode(message.file, writer.uint32(50).fork()).join();
    }
    if (message.stream !== undefined) {
      StreamOutput.encode(message.stream, writer.uint32(58).fork()).join();
    }
    if (message.segments !== undefined) {
      SegmentedFileOutput.encode(
        message.segments,
        writer.uint32(82).fork(),
      ).join();
    }
    if (message.preset !== undefined) {
      writer.uint32(64).int32(message.preset);
    }
    if (message.advanced !== undefined) {
      EncodingOptions.encode(message.advanced, writer.uint32(74).fork()).join();
    }
    for (const v of message.fileOutputs) {
      EncodedFileOutput.encode(v!, writer.uint32(90).fork()).join();
    }
    for (const v of message.streamOutputs) {
      StreamOutput.encode(v!, writer.uint32(98).fork()).join();
    }
    for (const v of message.segmentOutputs) {
      SegmentedFileOutput.encode(v!, writer.uint32(106).fork()).join();
    }
    for (const v of message.imageOutputs) {
      ImageOutput.encode(v!, writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): RoomCompositeEgressRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomCompositeEgressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roomName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.layout = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.audioOnly = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.audioMixing = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.videoOnly = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.customBaseUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.file = EncodedFileOutput.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.stream = StreamOutput.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.segments = SegmentedFileOutput.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.preset = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.advanced = EncodingOptions.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.fileOutputs.push(
            EncodedFileOutput.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.streamOutputs.push(
            StreamOutput.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.segmentOutputs.push(
            SegmentedFileOutput.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.imageOutputs.push(
            ImageOutput.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoomCompositeEgressRequest {
    return {
      $type: RoomCompositeEgressRequest.$type,
      roomName: isSet(object.roomName)
        ? globalThis.String(object.roomName)
        : "",
      layout: isSet(object.layout) ? globalThis.String(object.layout) : "",
      audioOnly: isSet(object.audioOnly)
        ? globalThis.Boolean(object.audioOnly)
        : false,
      audioMixing: isSet(object.audioMixing)
        ? audioMixingFromJSON(object.audioMixing)
        : 0,
      videoOnly: isSet(object.videoOnly)
        ? globalThis.Boolean(object.videoOnly)
        : false,
      customBaseUrl: isSet(object.customBaseUrl)
        ? globalThis.String(object.customBaseUrl)
        : "",
      file: isSet(object.file)
        ? EncodedFileOutput.fromJSON(object.file)
        : undefined,
      stream: isSet(object.stream)
        ? StreamOutput.fromJSON(object.stream)
        : undefined,
      segments: isSet(object.segments)
        ? SegmentedFileOutput.fromJSON(object.segments)
        : undefined,
      preset: isSet(object.preset)
        ? encodingOptionsPresetFromJSON(object.preset)
        : undefined,
      advanced: isSet(object.advanced)
        ? EncodingOptions.fromJSON(object.advanced)
        : undefined,
      fileOutputs: globalThis.Array.isArray(object?.fileOutputs)
        ? object.fileOutputs.map((e: any) => EncodedFileOutput.fromJSON(e))
        : [],
      streamOutputs: globalThis.Array.isArray(object?.streamOutputs)
        ? object.streamOutputs.map((e: any) => StreamOutput.fromJSON(e))
        : [],
      segmentOutputs: globalThis.Array.isArray(object?.segmentOutputs)
        ? object.segmentOutputs.map((e: any) => SegmentedFileOutput.fromJSON(e))
        : [],
      imageOutputs: globalThis.Array.isArray(object?.imageOutputs)
        ? object.imageOutputs.map((e: any) => ImageOutput.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RoomCompositeEgressRequest): unknown {
    const obj: any = {};
    if (message.roomName !== "") {
      obj.roomName = message.roomName;
    }
    if (message.layout !== "") {
      obj.layout = message.layout;
    }
    if (message.audioOnly !== false) {
      obj.audioOnly = message.audioOnly;
    }
    if (message.audioMixing !== 0) {
      obj.audioMixing = audioMixingToJSON(message.audioMixing);
    }
    if (message.videoOnly !== false) {
      obj.videoOnly = message.videoOnly;
    }
    if (message.customBaseUrl !== "") {
      obj.customBaseUrl = message.customBaseUrl;
    }
    if (message.file !== undefined) {
      obj.file = EncodedFileOutput.toJSON(message.file);
    }
    if (message.stream !== undefined) {
      obj.stream = StreamOutput.toJSON(message.stream);
    }
    if (message.segments !== undefined) {
      obj.segments = SegmentedFileOutput.toJSON(message.segments);
    }
    if (message.preset !== undefined) {
      obj.preset = encodingOptionsPresetToJSON(message.preset);
    }
    if (message.advanced !== undefined) {
      obj.advanced = EncodingOptions.toJSON(message.advanced);
    }
    if (message.fileOutputs?.length) {
      obj.fileOutputs = message.fileOutputs.map((e) =>
        EncodedFileOutput.toJSON(e),
      );
    }
    if (message.streamOutputs?.length) {
      obj.streamOutputs = message.streamOutputs.map((e) =>
        StreamOutput.toJSON(e),
      );
    }
    if (message.segmentOutputs?.length) {
      obj.segmentOutputs = message.segmentOutputs.map((e) =>
        SegmentedFileOutput.toJSON(e),
      );
    }
    if (message.imageOutputs?.length) {
      obj.imageOutputs = message.imageOutputs.map((e) => ImageOutput.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoomCompositeEgressRequest>, I>>(
    base?: I,
  ): RoomCompositeEgressRequest {
    return RoomCompositeEgressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoomCompositeEgressRequest>, I>>(
    object: I,
  ): RoomCompositeEgressRequest {
    const message = createBaseRoomCompositeEgressRequest();
    message.roomName = object.roomName ?? "";
    message.layout = object.layout ?? "";
    message.audioOnly = object.audioOnly ?? false;
    message.audioMixing = object.audioMixing ?? 0;
    message.videoOnly = object.videoOnly ?? false;
    message.customBaseUrl = object.customBaseUrl ?? "";
    message.file =
      object.file !== undefined && object.file !== null
        ? EncodedFileOutput.fromPartial(object.file)
        : undefined;
    message.stream =
      object.stream !== undefined && object.stream !== null
        ? StreamOutput.fromPartial(object.stream)
        : undefined;
    message.segments =
      object.segments !== undefined && object.segments !== null
        ? SegmentedFileOutput.fromPartial(object.segments)
        : undefined;
    message.preset = object.preset ?? undefined;
    message.advanced =
      object.advanced !== undefined && object.advanced !== null
        ? EncodingOptions.fromPartial(object.advanced)
        : undefined;
    message.fileOutputs =
      object.fileOutputs?.map((e) => EncodedFileOutput.fromPartial(e)) || [];
    message.streamOutputs =
      object.streamOutputs?.map((e) => StreamOutput.fromPartial(e)) || [];
    message.segmentOutputs =
      object.segmentOutputs?.map((e) => SegmentedFileOutput.fromPartial(e)) ||
      [];
    message.imageOutputs =
      object.imageOutputs?.map((e) => ImageOutput.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(
  RoomCompositeEgressRequest.$type,
  RoomCompositeEgressRequest,
);

function createBaseWebEgressRequest(): WebEgressRequest {
  return {
    $type: "livekit.WebEgressRequest",
    url: "",
    audioOnly: false,
    videoOnly: false,
    awaitStartSignal: false,
    file: undefined,
    stream: undefined,
    segments: undefined,
    preset: undefined,
    advanced: undefined,
    fileOutputs: [],
    streamOutputs: [],
    segmentOutputs: [],
    imageOutputs: [],
  };
}

export const WebEgressRequest: MessageFns<
  WebEgressRequest,
  "livekit.WebEgressRequest"
> = {
  $type: "livekit.WebEgressRequest" as const,

  encode(
    message: WebEgressRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.audioOnly !== false) {
      writer.uint32(16).bool(message.audioOnly);
    }
    if (message.videoOnly !== false) {
      writer.uint32(24).bool(message.videoOnly);
    }
    if (message.awaitStartSignal !== false) {
      writer.uint32(96).bool(message.awaitStartSignal);
    }
    if (message.file !== undefined) {
      EncodedFileOutput.encode(message.file, writer.uint32(34).fork()).join();
    }
    if (message.stream !== undefined) {
      StreamOutput.encode(message.stream, writer.uint32(42).fork()).join();
    }
    if (message.segments !== undefined) {
      SegmentedFileOutput.encode(
        message.segments,
        writer.uint32(50).fork(),
      ).join();
    }
    if (message.preset !== undefined) {
      writer.uint32(56).int32(message.preset);
    }
    if (message.advanced !== undefined) {
      EncodingOptions.encode(message.advanced, writer.uint32(66).fork()).join();
    }
    for (const v of message.fileOutputs) {
      EncodedFileOutput.encode(v!, writer.uint32(74).fork()).join();
    }
    for (const v of message.streamOutputs) {
      StreamOutput.encode(v!, writer.uint32(82).fork()).join();
    }
    for (const v of message.segmentOutputs) {
      SegmentedFileOutput.encode(v!, writer.uint32(90).fork()).join();
    }
    for (const v of message.imageOutputs) {
      ImageOutput.encode(v!, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebEgressRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebEgressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.audioOnly = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.videoOnly = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.awaitStartSignal = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.file = EncodedFileOutput.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.stream = StreamOutput.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.segments = SegmentedFileOutput.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.preset = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.advanced = EncodingOptions.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.fileOutputs.push(
            EncodedFileOutput.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.streamOutputs.push(
            StreamOutput.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.segmentOutputs.push(
            SegmentedFileOutput.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.imageOutputs.push(
            ImageOutput.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebEgressRequest {
    return {
      $type: WebEgressRequest.$type,
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      audioOnly: isSet(object.audioOnly)
        ? globalThis.Boolean(object.audioOnly)
        : false,
      videoOnly: isSet(object.videoOnly)
        ? globalThis.Boolean(object.videoOnly)
        : false,
      awaitStartSignal: isSet(object.awaitStartSignal)
        ? globalThis.Boolean(object.awaitStartSignal)
        : false,
      file: isSet(object.file)
        ? EncodedFileOutput.fromJSON(object.file)
        : undefined,
      stream: isSet(object.stream)
        ? StreamOutput.fromJSON(object.stream)
        : undefined,
      segments: isSet(object.segments)
        ? SegmentedFileOutput.fromJSON(object.segments)
        : undefined,
      preset: isSet(object.preset)
        ? encodingOptionsPresetFromJSON(object.preset)
        : undefined,
      advanced: isSet(object.advanced)
        ? EncodingOptions.fromJSON(object.advanced)
        : undefined,
      fileOutputs: globalThis.Array.isArray(object?.fileOutputs)
        ? object.fileOutputs.map((e: any) => EncodedFileOutput.fromJSON(e))
        : [],
      streamOutputs: globalThis.Array.isArray(object?.streamOutputs)
        ? object.streamOutputs.map((e: any) => StreamOutput.fromJSON(e))
        : [],
      segmentOutputs: globalThis.Array.isArray(object?.segmentOutputs)
        ? object.segmentOutputs.map((e: any) => SegmentedFileOutput.fromJSON(e))
        : [],
      imageOutputs: globalThis.Array.isArray(object?.imageOutputs)
        ? object.imageOutputs.map((e: any) => ImageOutput.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WebEgressRequest): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.audioOnly !== false) {
      obj.audioOnly = message.audioOnly;
    }
    if (message.videoOnly !== false) {
      obj.videoOnly = message.videoOnly;
    }
    if (message.awaitStartSignal !== false) {
      obj.awaitStartSignal = message.awaitStartSignal;
    }
    if (message.file !== undefined) {
      obj.file = EncodedFileOutput.toJSON(message.file);
    }
    if (message.stream !== undefined) {
      obj.stream = StreamOutput.toJSON(message.stream);
    }
    if (message.segments !== undefined) {
      obj.segments = SegmentedFileOutput.toJSON(message.segments);
    }
    if (message.preset !== undefined) {
      obj.preset = encodingOptionsPresetToJSON(message.preset);
    }
    if (message.advanced !== undefined) {
      obj.advanced = EncodingOptions.toJSON(message.advanced);
    }
    if (message.fileOutputs?.length) {
      obj.fileOutputs = message.fileOutputs.map((e) =>
        EncodedFileOutput.toJSON(e),
      );
    }
    if (message.streamOutputs?.length) {
      obj.streamOutputs = message.streamOutputs.map((e) =>
        StreamOutput.toJSON(e),
      );
    }
    if (message.segmentOutputs?.length) {
      obj.segmentOutputs = message.segmentOutputs.map((e) =>
        SegmentedFileOutput.toJSON(e),
      );
    }
    if (message.imageOutputs?.length) {
      obj.imageOutputs = message.imageOutputs.map((e) => ImageOutput.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebEgressRequest>, I>>(
    base?: I,
  ): WebEgressRequest {
    return WebEgressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebEgressRequest>, I>>(
    object: I,
  ): WebEgressRequest {
    const message = createBaseWebEgressRequest();
    message.url = object.url ?? "";
    message.audioOnly = object.audioOnly ?? false;
    message.videoOnly = object.videoOnly ?? false;
    message.awaitStartSignal = object.awaitStartSignal ?? false;
    message.file =
      object.file !== undefined && object.file !== null
        ? EncodedFileOutput.fromPartial(object.file)
        : undefined;
    message.stream =
      object.stream !== undefined && object.stream !== null
        ? StreamOutput.fromPartial(object.stream)
        : undefined;
    message.segments =
      object.segments !== undefined && object.segments !== null
        ? SegmentedFileOutput.fromPartial(object.segments)
        : undefined;
    message.preset = object.preset ?? undefined;
    message.advanced =
      object.advanced !== undefined && object.advanced !== null
        ? EncodingOptions.fromPartial(object.advanced)
        : undefined;
    message.fileOutputs =
      object.fileOutputs?.map((e) => EncodedFileOutput.fromPartial(e)) || [];
    message.streamOutputs =
      object.streamOutputs?.map((e) => StreamOutput.fromPartial(e)) || [];
    message.segmentOutputs =
      object.segmentOutputs?.map((e) => SegmentedFileOutput.fromPartial(e)) ||
      [];
    message.imageOutputs =
      object.imageOutputs?.map((e) => ImageOutput.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(WebEgressRequest.$type, WebEgressRequest);

function createBaseParticipantEgressRequest(): ParticipantEgressRequest {
  return {
    $type: "livekit.ParticipantEgressRequest",
    roomName: "",
    identity: "",
    screenShare: false,
    preset: undefined,
    advanced: undefined,
    fileOutputs: [],
    streamOutputs: [],
    segmentOutputs: [],
    imageOutputs: [],
  };
}

export const ParticipantEgressRequest: MessageFns<
  ParticipantEgressRequest,
  "livekit.ParticipantEgressRequest"
> = {
  $type: "livekit.ParticipantEgressRequest" as const,

  encode(
    message: ParticipantEgressRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.roomName !== "") {
      writer.uint32(10).string(message.roomName);
    }
    if (message.identity !== "") {
      writer.uint32(18).string(message.identity);
    }
    if (message.screenShare !== false) {
      writer.uint32(24).bool(message.screenShare);
    }
    if (message.preset !== undefined) {
      writer.uint32(32).int32(message.preset);
    }
    if (message.advanced !== undefined) {
      EncodingOptions.encode(message.advanced, writer.uint32(42).fork()).join();
    }
    for (const v of message.fileOutputs) {
      EncodedFileOutput.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.streamOutputs) {
      StreamOutput.encode(v!, writer.uint32(58).fork()).join();
    }
    for (const v of message.segmentOutputs) {
      SegmentedFileOutput.encode(v!, writer.uint32(66).fork()).join();
    }
    for (const v of message.imageOutputs) {
      ImageOutput.encode(v!, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ParticipantEgressRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParticipantEgressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roomName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.identity = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.screenShare = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.preset = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.advanced = EncodingOptions.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.fileOutputs.push(
            EncodedFileOutput.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.streamOutputs.push(
            StreamOutput.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.segmentOutputs.push(
            SegmentedFileOutput.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.imageOutputs.push(
            ImageOutput.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParticipantEgressRequest {
    return {
      $type: ParticipantEgressRequest.$type,
      roomName: isSet(object.roomName)
        ? globalThis.String(object.roomName)
        : "",
      identity: isSet(object.identity)
        ? globalThis.String(object.identity)
        : "",
      screenShare: isSet(object.screenShare)
        ? globalThis.Boolean(object.screenShare)
        : false,
      preset: isSet(object.preset)
        ? encodingOptionsPresetFromJSON(object.preset)
        : undefined,
      advanced: isSet(object.advanced)
        ? EncodingOptions.fromJSON(object.advanced)
        : undefined,
      fileOutputs: globalThis.Array.isArray(object?.fileOutputs)
        ? object.fileOutputs.map((e: any) => EncodedFileOutput.fromJSON(e))
        : [],
      streamOutputs: globalThis.Array.isArray(object?.streamOutputs)
        ? object.streamOutputs.map((e: any) => StreamOutput.fromJSON(e))
        : [],
      segmentOutputs: globalThis.Array.isArray(object?.segmentOutputs)
        ? object.segmentOutputs.map((e: any) => SegmentedFileOutput.fromJSON(e))
        : [],
      imageOutputs: globalThis.Array.isArray(object?.imageOutputs)
        ? object.imageOutputs.map((e: any) => ImageOutput.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ParticipantEgressRequest): unknown {
    const obj: any = {};
    if (message.roomName !== "") {
      obj.roomName = message.roomName;
    }
    if (message.identity !== "") {
      obj.identity = message.identity;
    }
    if (message.screenShare !== false) {
      obj.screenShare = message.screenShare;
    }
    if (message.preset !== undefined) {
      obj.preset = encodingOptionsPresetToJSON(message.preset);
    }
    if (message.advanced !== undefined) {
      obj.advanced = EncodingOptions.toJSON(message.advanced);
    }
    if (message.fileOutputs?.length) {
      obj.fileOutputs = message.fileOutputs.map((e) =>
        EncodedFileOutput.toJSON(e),
      );
    }
    if (message.streamOutputs?.length) {
      obj.streamOutputs = message.streamOutputs.map((e) =>
        StreamOutput.toJSON(e),
      );
    }
    if (message.segmentOutputs?.length) {
      obj.segmentOutputs = message.segmentOutputs.map((e) =>
        SegmentedFileOutput.toJSON(e),
      );
    }
    if (message.imageOutputs?.length) {
      obj.imageOutputs = message.imageOutputs.map((e) => ImageOutput.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParticipantEgressRequest>, I>>(
    base?: I,
  ): ParticipantEgressRequest {
    return ParticipantEgressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParticipantEgressRequest>, I>>(
    object: I,
  ): ParticipantEgressRequest {
    const message = createBaseParticipantEgressRequest();
    message.roomName = object.roomName ?? "";
    message.identity = object.identity ?? "";
    message.screenShare = object.screenShare ?? false;
    message.preset = object.preset ?? undefined;
    message.advanced =
      object.advanced !== undefined && object.advanced !== null
        ? EncodingOptions.fromPartial(object.advanced)
        : undefined;
    message.fileOutputs =
      object.fileOutputs?.map((e) => EncodedFileOutput.fromPartial(e)) || [];
    message.streamOutputs =
      object.streamOutputs?.map((e) => StreamOutput.fromPartial(e)) || [];
    message.segmentOutputs =
      object.segmentOutputs?.map((e) => SegmentedFileOutput.fromPartial(e)) ||
      [];
    message.imageOutputs =
      object.imageOutputs?.map((e) => ImageOutput.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(
  ParticipantEgressRequest.$type,
  ParticipantEgressRequest,
);

function createBaseTrackCompositeEgressRequest(): TrackCompositeEgressRequest {
  return {
    $type: "livekit.TrackCompositeEgressRequest",
    roomName: "",
    audioTrackId: "",
    videoTrackId: "",
    file: undefined,
    stream: undefined,
    segments: undefined,
    preset: undefined,
    advanced: undefined,
    fileOutputs: [],
    streamOutputs: [],
    segmentOutputs: [],
    imageOutputs: [],
  };
}

export const TrackCompositeEgressRequest: MessageFns<
  TrackCompositeEgressRequest,
  "livekit.TrackCompositeEgressRequest"
> = {
  $type: "livekit.TrackCompositeEgressRequest" as const,

  encode(
    message: TrackCompositeEgressRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.roomName !== "") {
      writer.uint32(10).string(message.roomName);
    }
    if (message.audioTrackId !== "") {
      writer.uint32(18).string(message.audioTrackId);
    }
    if (message.videoTrackId !== "") {
      writer.uint32(26).string(message.videoTrackId);
    }
    if (message.file !== undefined) {
      EncodedFileOutput.encode(message.file, writer.uint32(34).fork()).join();
    }
    if (message.stream !== undefined) {
      StreamOutput.encode(message.stream, writer.uint32(42).fork()).join();
    }
    if (message.segments !== undefined) {
      SegmentedFileOutput.encode(
        message.segments,
        writer.uint32(66).fork(),
      ).join();
    }
    if (message.preset !== undefined) {
      writer.uint32(48).int32(message.preset);
    }
    if (message.advanced !== undefined) {
      EncodingOptions.encode(message.advanced, writer.uint32(58).fork()).join();
    }
    for (const v of message.fileOutputs) {
      EncodedFileOutput.encode(v!, writer.uint32(90).fork()).join();
    }
    for (const v of message.streamOutputs) {
      StreamOutput.encode(v!, writer.uint32(98).fork()).join();
    }
    for (const v of message.segmentOutputs) {
      SegmentedFileOutput.encode(v!, writer.uint32(106).fork()).join();
    }
    for (const v of message.imageOutputs) {
      ImageOutput.encode(v!, writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): TrackCompositeEgressRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrackCompositeEgressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roomName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.audioTrackId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.videoTrackId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.file = EncodedFileOutput.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.stream = StreamOutput.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.segments = SegmentedFileOutput.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.preset = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.advanced = EncodingOptions.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.fileOutputs.push(
            EncodedFileOutput.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.streamOutputs.push(
            StreamOutput.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.segmentOutputs.push(
            SegmentedFileOutput.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.imageOutputs.push(
            ImageOutput.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrackCompositeEgressRequest {
    return {
      $type: TrackCompositeEgressRequest.$type,
      roomName: isSet(object.roomName)
        ? globalThis.String(object.roomName)
        : "",
      audioTrackId: isSet(object.audioTrackId)
        ? globalThis.String(object.audioTrackId)
        : "",
      videoTrackId: isSet(object.videoTrackId)
        ? globalThis.String(object.videoTrackId)
        : "",
      file: isSet(object.file)
        ? EncodedFileOutput.fromJSON(object.file)
        : undefined,
      stream: isSet(object.stream)
        ? StreamOutput.fromJSON(object.stream)
        : undefined,
      segments: isSet(object.segments)
        ? SegmentedFileOutput.fromJSON(object.segments)
        : undefined,
      preset: isSet(object.preset)
        ? encodingOptionsPresetFromJSON(object.preset)
        : undefined,
      advanced: isSet(object.advanced)
        ? EncodingOptions.fromJSON(object.advanced)
        : undefined,
      fileOutputs: globalThis.Array.isArray(object?.fileOutputs)
        ? object.fileOutputs.map((e: any) => EncodedFileOutput.fromJSON(e))
        : [],
      streamOutputs: globalThis.Array.isArray(object?.streamOutputs)
        ? object.streamOutputs.map((e: any) => StreamOutput.fromJSON(e))
        : [],
      segmentOutputs: globalThis.Array.isArray(object?.segmentOutputs)
        ? object.segmentOutputs.map((e: any) => SegmentedFileOutput.fromJSON(e))
        : [],
      imageOutputs: globalThis.Array.isArray(object?.imageOutputs)
        ? object.imageOutputs.map((e: any) => ImageOutput.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TrackCompositeEgressRequest): unknown {
    const obj: any = {};
    if (message.roomName !== "") {
      obj.roomName = message.roomName;
    }
    if (message.audioTrackId !== "") {
      obj.audioTrackId = message.audioTrackId;
    }
    if (message.videoTrackId !== "") {
      obj.videoTrackId = message.videoTrackId;
    }
    if (message.file !== undefined) {
      obj.file = EncodedFileOutput.toJSON(message.file);
    }
    if (message.stream !== undefined) {
      obj.stream = StreamOutput.toJSON(message.stream);
    }
    if (message.segments !== undefined) {
      obj.segments = SegmentedFileOutput.toJSON(message.segments);
    }
    if (message.preset !== undefined) {
      obj.preset = encodingOptionsPresetToJSON(message.preset);
    }
    if (message.advanced !== undefined) {
      obj.advanced = EncodingOptions.toJSON(message.advanced);
    }
    if (message.fileOutputs?.length) {
      obj.fileOutputs = message.fileOutputs.map((e) =>
        EncodedFileOutput.toJSON(e),
      );
    }
    if (message.streamOutputs?.length) {
      obj.streamOutputs = message.streamOutputs.map((e) =>
        StreamOutput.toJSON(e),
      );
    }
    if (message.segmentOutputs?.length) {
      obj.segmentOutputs = message.segmentOutputs.map((e) =>
        SegmentedFileOutput.toJSON(e),
      );
    }
    if (message.imageOutputs?.length) {
      obj.imageOutputs = message.imageOutputs.map((e) => ImageOutput.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TrackCompositeEgressRequest>, I>>(
    base?: I,
  ): TrackCompositeEgressRequest {
    return TrackCompositeEgressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrackCompositeEgressRequest>, I>>(
    object: I,
  ): TrackCompositeEgressRequest {
    const message = createBaseTrackCompositeEgressRequest();
    message.roomName = object.roomName ?? "";
    message.audioTrackId = object.audioTrackId ?? "";
    message.videoTrackId = object.videoTrackId ?? "";
    message.file =
      object.file !== undefined && object.file !== null
        ? EncodedFileOutput.fromPartial(object.file)
        : undefined;
    message.stream =
      object.stream !== undefined && object.stream !== null
        ? StreamOutput.fromPartial(object.stream)
        : undefined;
    message.segments =
      object.segments !== undefined && object.segments !== null
        ? SegmentedFileOutput.fromPartial(object.segments)
        : undefined;
    message.preset = object.preset ?? undefined;
    message.advanced =
      object.advanced !== undefined && object.advanced !== null
        ? EncodingOptions.fromPartial(object.advanced)
        : undefined;
    message.fileOutputs =
      object.fileOutputs?.map((e) => EncodedFileOutput.fromPartial(e)) || [];
    message.streamOutputs =
      object.streamOutputs?.map((e) => StreamOutput.fromPartial(e)) || [];
    message.segmentOutputs =
      object.segmentOutputs?.map((e) => SegmentedFileOutput.fromPartial(e)) ||
      [];
    message.imageOutputs =
      object.imageOutputs?.map((e) => ImageOutput.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(
  TrackCompositeEgressRequest.$type,
  TrackCompositeEgressRequest,
);

function createBaseTrackEgressRequest(): TrackEgressRequest {
  return {
    $type: "livekit.TrackEgressRequest",
    roomName: "",
    trackId: "",
    file: undefined,
    websocketUrl: undefined,
  };
}

export const TrackEgressRequest: MessageFns<
  TrackEgressRequest,
  "livekit.TrackEgressRequest"
> = {
  $type: "livekit.TrackEgressRequest" as const,

  encode(
    message: TrackEgressRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.roomName !== "") {
      writer.uint32(10).string(message.roomName);
    }
    if (message.trackId !== "") {
      writer.uint32(18).string(message.trackId);
    }
    if (message.file !== undefined) {
      DirectFileOutput.encode(message.file, writer.uint32(26).fork()).join();
    }
    if (message.websocketUrl !== undefined) {
      writer.uint32(34).string(message.websocketUrl);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): TrackEgressRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrackEgressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roomName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.trackId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.file = DirectFileOutput.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.websocketUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrackEgressRequest {
    return {
      $type: TrackEgressRequest.$type,
      roomName: isSet(object.roomName)
        ? globalThis.String(object.roomName)
        : "",
      trackId: isSet(object.trackId) ? globalThis.String(object.trackId) : "",
      file: isSet(object.file)
        ? DirectFileOutput.fromJSON(object.file)
        : undefined,
      websocketUrl: isSet(object.websocketUrl)
        ? globalThis.String(object.websocketUrl)
        : undefined,
    };
  },

  toJSON(message: TrackEgressRequest): unknown {
    const obj: any = {};
    if (message.roomName !== "") {
      obj.roomName = message.roomName;
    }
    if (message.trackId !== "") {
      obj.trackId = message.trackId;
    }
    if (message.file !== undefined) {
      obj.file = DirectFileOutput.toJSON(message.file);
    }
    if (message.websocketUrl !== undefined) {
      obj.websocketUrl = message.websocketUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TrackEgressRequest>, I>>(
    base?: I,
  ): TrackEgressRequest {
    return TrackEgressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrackEgressRequest>, I>>(
    object: I,
  ): TrackEgressRequest {
    const message = createBaseTrackEgressRequest();
    message.roomName = object.roomName ?? "";
    message.trackId = object.trackId ?? "";
    message.file =
      object.file !== undefined && object.file !== null
        ? DirectFileOutput.fromPartial(object.file)
        : undefined;
    message.websocketUrl = object.websocketUrl ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(TrackEgressRequest.$type, TrackEgressRequest);

function createBaseEncodedFileOutput(): EncodedFileOutput {
  return {
    $type: "livekit.EncodedFileOutput",
    fileType: 0,
    filepath: "",
    disableManifest: false,
    s3: undefined,
    gcp: undefined,
    azure: undefined,
    aliOSS: undefined,
  };
}

export const EncodedFileOutput: MessageFns<
  EncodedFileOutput,
  "livekit.EncodedFileOutput"
> = {
  $type: "livekit.EncodedFileOutput" as const,

  encode(
    message: EncodedFileOutput,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.fileType !== 0) {
      writer.uint32(8).int32(message.fileType);
    }
    if (message.filepath !== "") {
      writer.uint32(18).string(message.filepath);
    }
    if (message.disableManifest !== false) {
      writer.uint32(48).bool(message.disableManifest);
    }
    if (message.s3 !== undefined) {
      S3Upload.encode(message.s3, writer.uint32(26).fork()).join();
    }
    if (message.gcp !== undefined) {
      GCPUpload.encode(message.gcp, writer.uint32(34).fork()).join();
    }
    if (message.azure !== undefined) {
      AzureBlobUpload.encode(message.azure, writer.uint32(42).fork()).join();
    }
    if (message.aliOSS !== undefined) {
      AliOSSUpload.encode(message.aliOSS, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EncodedFileOutput {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEncodedFileOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fileType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.filepath = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.disableManifest = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.s3 = S3Upload.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.gcp = GCPUpload.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.azure = AzureBlobUpload.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.aliOSS = AliOSSUpload.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EncodedFileOutput {
    return {
      $type: EncodedFileOutput.$type,
      fileType: isSet(object.fileType)
        ? encodedFileTypeFromJSON(object.fileType)
        : 0,
      filepath: isSet(object.filepath)
        ? globalThis.String(object.filepath)
        : "",
      disableManifest: isSet(object.disableManifest)
        ? globalThis.Boolean(object.disableManifest)
        : false,
      s3: isSet(object.s3) ? S3Upload.fromJSON(object.s3) : undefined,
      gcp: isSet(object.gcp) ? GCPUpload.fromJSON(object.gcp) : undefined,
      azure: isSet(object.azure)
        ? AzureBlobUpload.fromJSON(object.azure)
        : undefined,
      aliOSS: isSet(object.aliOSS)
        ? AliOSSUpload.fromJSON(object.aliOSS)
        : undefined,
    };
  },

  toJSON(message: EncodedFileOutput): unknown {
    const obj: any = {};
    if (message.fileType !== 0) {
      obj.fileType = encodedFileTypeToJSON(message.fileType);
    }
    if (message.filepath !== "") {
      obj.filepath = message.filepath;
    }
    if (message.disableManifest !== false) {
      obj.disableManifest = message.disableManifest;
    }
    if (message.s3 !== undefined) {
      obj.s3 = S3Upload.toJSON(message.s3);
    }
    if (message.gcp !== undefined) {
      obj.gcp = GCPUpload.toJSON(message.gcp);
    }
    if (message.azure !== undefined) {
      obj.azure = AzureBlobUpload.toJSON(message.azure);
    }
    if (message.aliOSS !== undefined) {
      obj.aliOSS = AliOSSUpload.toJSON(message.aliOSS);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EncodedFileOutput>, I>>(
    base?: I,
  ): EncodedFileOutput {
    return EncodedFileOutput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EncodedFileOutput>, I>>(
    object: I,
  ): EncodedFileOutput {
    const message = createBaseEncodedFileOutput();
    message.fileType = object.fileType ?? 0;
    message.filepath = object.filepath ?? "";
    message.disableManifest = object.disableManifest ?? false;
    message.s3 =
      object.s3 !== undefined && object.s3 !== null
        ? S3Upload.fromPartial(object.s3)
        : undefined;
    message.gcp =
      object.gcp !== undefined && object.gcp !== null
        ? GCPUpload.fromPartial(object.gcp)
        : undefined;
    message.azure =
      object.azure !== undefined && object.azure !== null
        ? AzureBlobUpload.fromPartial(object.azure)
        : undefined;
    message.aliOSS =
      object.aliOSS !== undefined && object.aliOSS !== null
        ? AliOSSUpload.fromPartial(object.aliOSS)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(EncodedFileOutput.$type, EncodedFileOutput);

function createBaseSegmentedFileOutput(): SegmentedFileOutput {
  return {
    $type: "livekit.SegmentedFileOutput",
    protocol: 0,
    filenamePrefix: "",
    playlistName: "",
    livePlaylistName: "",
    segmentDuration: 0,
    filenameSuffix: 0,
    disableManifest: false,
    s3: undefined,
    gcp: undefined,
    azure: undefined,
    aliOSS: undefined,
  };
}

export const SegmentedFileOutput: MessageFns<
  SegmentedFileOutput,
  "livekit.SegmentedFileOutput"
> = {
  $type: "livekit.SegmentedFileOutput" as const,

  encode(
    message: SegmentedFileOutput,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.protocol !== 0) {
      writer.uint32(8).int32(message.protocol);
    }
    if (message.filenamePrefix !== "") {
      writer.uint32(18).string(message.filenamePrefix);
    }
    if (message.playlistName !== "") {
      writer.uint32(26).string(message.playlistName);
    }
    if (message.livePlaylistName !== "") {
      writer.uint32(90).string(message.livePlaylistName);
    }
    if (message.segmentDuration !== 0) {
      writer.uint32(32).uint32(message.segmentDuration);
    }
    if (message.filenameSuffix !== 0) {
      writer.uint32(80).int32(message.filenameSuffix);
    }
    if (message.disableManifest !== false) {
      writer.uint32(64).bool(message.disableManifest);
    }
    if (message.s3 !== undefined) {
      S3Upload.encode(message.s3, writer.uint32(42).fork()).join();
    }
    if (message.gcp !== undefined) {
      GCPUpload.encode(message.gcp, writer.uint32(50).fork()).join();
    }
    if (message.azure !== undefined) {
      AzureBlobUpload.encode(message.azure, writer.uint32(58).fork()).join();
    }
    if (message.aliOSS !== undefined) {
      AliOSSUpload.encode(message.aliOSS, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): SegmentedFileOutput {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSegmentedFileOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.protocol = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.filenamePrefix = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.playlistName = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.livePlaylistName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.segmentDuration = reader.uint32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.filenameSuffix = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.disableManifest = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.s3 = S3Upload.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.gcp = GCPUpload.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.azure = AzureBlobUpload.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.aliOSS = AliOSSUpload.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SegmentedFileOutput {
    return {
      $type: SegmentedFileOutput.$type,
      protocol: isSet(object.protocol)
        ? segmentedFileProtocolFromJSON(object.protocol)
        : 0,
      filenamePrefix: isSet(object.filenamePrefix)
        ? globalThis.String(object.filenamePrefix)
        : "",
      playlistName: isSet(object.playlistName)
        ? globalThis.String(object.playlistName)
        : "",
      livePlaylistName: isSet(object.livePlaylistName)
        ? globalThis.String(object.livePlaylistName)
        : "",
      segmentDuration: isSet(object.segmentDuration)
        ? globalThis.Number(object.segmentDuration)
        : 0,
      filenameSuffix: isSet(object.filenameSuffix)
        ? segmentedFileSuffixFromJSON(object.filenameSuffix)
        : 0,
      disableManifest: isSet(object.disableManifest)
        ? globalThis.Boolean(object.disableManifest)
        : false,
      s3: isSet(object.s3) ? S3Upload.fromJSON(object.s3) : undefined,
      gcp: isSet(object.gcp) ? GCPUpload.fromJSON(object.gcp) : undefined,
      azure: isSet(object.azure)
        ? AzureBlobUpload.fromJSON(object.azure)
        : undefined,
      aliOSS: isSet(object.aliOSS)
        ? AliOSSUpload.fromJSON(object.aliOSS)
        : undefined,
    };
  },

  toJSON(message: SegmentedFileOutput): unknown {
    const obj: any = {};
    if (message.protocol !== 0) {
      obj.protocol = segmentedFileProtocolToJSON(message.protocol);
    }
    if (message.filenamePrefix !== "") {
      obj.filenamePrefix = message.filenamePrefix;
    }
    if (message.playlistName !== "") {
      obj.playlistName = message.playlistName;
    }
    if (message.livePlaylistName !== "") {
      obj.livePlaylistName = message.livePlaylistName;
    }
    if (message.segmentDuration !== 0) {
      obj.segmentDuration = Math.round(message.segmentDuration);
    }
    if (message.filenameSuffix !== 0) {
      obj.filenameSuffix = segmentedFileSuffixToJSON(message.filenameSuffix);
    }
    if (message.disableManifest !== false) {
      obj.disableManifest = message.disableManifest;
    }
    if (message.s3 !== undefined) {
      obj.s3 = S3Upload.toJSON(message.s3);
    }
    if (message.gcp !== undefined) {
      obj.gcp = GCPUpload.toJSON(message.gcp);
    }
    if (message.azure !== undefined) {
      obj.azure = AzureBlobUpload.toJSON(message.azure);
    }
    if (message.aliOSS !== undefined) {
      obj.aliOSS = AliOSSUpload.toJSON(message.aliOSS);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SegmentedFileOutput>, I>>(
    base?: I,
  ): SegmentedFileOutput {
    return SegmentedFileOutput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SegmentedFileOutput>, I>>(
    object: I,
  ): SegmentedFileOutput {
    const message = createBaseSegmentedFileOutput();
    message.protocol = object.protocol ?? 0;
    message.filenamePrefix = object.filenamePrefix ?? "";
    message.playlistName = object.playlistName ?? "";
    message.livePlaylistName = object.livePlaylistName ?? "";
    message.segmentDuration = object.segmentDuration ?? 0;
    message.filenameSuffix = object.filenameSuffix ?? 0;
    message.disableManifest = object.disableManifest ?? false;
    message.s3 =
      object.s3 !== undefined && object.s3 !== null
        ? S3Upload.fromPartial(object.s3)
        : undefined;
    message.gcp =
      object.gcp !== undefined && object.gcp !== null
        ? GCPUpload.fromPartial(object.gcp)
        : undefined;
    message.azure =
      object.azure !== undefined && object.azure !== null
        ? AzureBlobUpload.fromPartial(object.azure)
        : undefined;
    message.aliOSS =
      object.aliOSS !== undefined && object.aliOSS !== null
        ? AliOSSUpload.fromPartial(object.aliOSS)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(SegmentedFileOutput.$type, SegmentedFileOutput);

function createBaseDirectFileOutput(): DirectFileOutput {
  return {
    $type: "livekit.DirectFileOutput",
    filepath: "",
    disableManifest: false,
    s3: undefined,
    gcp: undefined,
    azure: undefined,
    aliOSS: undefined,
  };
}

export const DirectFileOutput: MessageFns<
  DirectFileOutput,
  "livekit.DirectFileOutput"
> = {
  $type: "livekit.DirectFileOutput" as const,

  encode(
    message: DirectFileOutput,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.filepath !== "") {
      writer.uint32(10).string(message.filepath);
    }
    if (message.disableManifest !== false) {
      writer.uint32(40).bool(message.disableManifest);
    }
    if (message.s3 !== undefined) {
      S3Upload.encode(message.s3, writer.uint32(18).fork()).join();
    }
    if (message.gcp !== undefined) {
      GCPUpload.encode(message.gcp, writer.uint32(26).fork()).join();
    }
    if (message.azure !== undefined) {
      AzureBlobUpload.encode(message.azure, writer.uint32(34).fork()).join();
    }
    if (message.aliOSS !== undefined) {
      AliOSSUpload.encode(message.aliOSS, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DirectFileOutput {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDirectFileOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filepath = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.disableManifest = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.s3 = S3Upload.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.gcp = GCPUpload.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.azure = AzureBlobUpload.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.aliOSS = AliOSSUpload.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DirectFileOutput {
    return {
      $type: DirectFileOutput.$type,
      filepath: isSet(object.filepath)
        ? globalThis.String(object.filepath)
        : "",
      disableManifest: isSet(object.disableManifest)
        ? globalThis.Boolean(object.disableManifest)
        : false,
      s3: isSet(object.s3) ? S3Upload.fromJSON(object.s3) : undefined,
      gcp: isSet(object.gcp) ? GCPUpload.fromJSON(object.gcp) : undefined,
      azure: isSet(object.azure)
        ? AzureBlobUpload.fromJSON(object.azure)
        : undefined,
      aliOSS: isSet(object.aliOSS)
        ? AliOSSUpload.fromJSON(object.aliOSS)
        : undefined,
    };
  },

  toJSON(message: DirectFileOutput): unknown {
    const obj: any = {};
    if (message.filepath !== "") {
      obj.filepath = message.filepath;
    }
    if (message.disableManifest !== false) {
      obj.disableManifest = message.disableManifest;
    }
    if (message.s3 !== undefined) {
      obj.s3 = S3Upload.toJSON(message.s3);
    }
    if (message.gcp !== undefined) {
      obj.gcp = GCPUpload.toJSON(message.gcp);
    }
    if (message.azure !== undefined) {
      obj.azure = AzureBlobUpload.toJSON(message.azure);
    }
    if (message.aliOSS !== undefined) {
      obj.aliOSS = AliOSSUpload.toJSON(message.aliOSS);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DirectFileOutput>, I>>(
    base?: I,
  ): DirectFileOutput {
    return DirectFileOutput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DirectFileOutput>, I>>(
    object: I,
  ): DirectFileOutput {
    const message = createBaseDirectFileOutput();
    message.filepath = object.filepath ?? "";
    message.disableManifest = object.disableManifest ?? false;
    message.s3 =
      object.s3 !== undefined && object.s3 !== null
        ? S3Upload.fromPartial(object.s3)
        : undefined;
    message.gcp =
      object.gcp !== undefined && object.gcp !== null
        ? GCPUpload.fromPartial(object.gcp)
        : undefined;
    message.azure =
      object.azure !== undefined && object.azure !== null
        ? AzureBlobUpload.fromPartial(object.azure)
        : undefined;
    message.aliOSS =
      object.aliOSS !== undefined && object.aliOSS !== null
        ? AliOSSUpload.fromPartial(object.aliOSS)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(DirectFileOutput.$type, DirectFileOutput);

function createBaseImageOutput(): ImageOutput {
  return {
    $type: "livekit.ImageOutput",
    captureInterval: 0,
    width: 0,
    height: 0,
    filenamePrefix: "",
    filenameSuffix: 0,
    imageCodec: 0,
    disableManifest: false,
    s3: undefined,
    gcp: undefined,
    azure: undefined,
    aliOSS: undefined,
  };
}

export const ImageOutput: MessageFns<ImageOutput, "livekit.ImageOutput"> = {
  $type: "livekit.ImageOutput" as const,

  encode(
    message: ImageOutput,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.captureInterval !== 0) {
      writer.uint32(8).uint32(message.captureInterval);
    }
    if (message.width !== 0) {
      writer.uint32(16).int32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(24).int32(message.height);
    }
    if (message.filenamePrefix !== "") {
      writer.uint32(34).string(message.filenamePrefix);
    }
    if (message.filenameSuffix !== 0) {
      writer.uint32(40).int32(message.filenameSuffix);
    }
    if (message.imageCodec !== 0) {
      writer.uint32(48).int32(message.imageCodec);
    }
    if (message.disableManifest !== false) {
      writer.uint32(56).bool(message.disableManifest);
    }
    if (message.s3 !== undefined) {
      S3Upload.encode(message.s3, writer.uint32(66).fork()).join();
    }
    if (message.gcp !== undefined) {
      GCPUpload.encode(message.gcp, writer.uint32(74).fork()).join();
    }
    if (message.azure !== undefined) {
      AzureBlobUpload.encode(message.azure, writer.uint32(82).fork()).join();
    }
    if (message.aliOSS !== undefined) {
      AliOSSUpload.encode(message.aliOSS, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageOutput {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.captureInterval = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.width = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.height = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.filenamePrefix = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.filenameSuffix = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.imageCodec = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.disableManifest = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.s3 = S3Upload.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.gcp = GCPUpload.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.azure = AzureBlobUpload.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.aliOSS = AliOSSUpload.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageOutput {
    return {
      $type: ImageOutput.$type,
      captureInterval: isSet(object.captureInterval)
        ? globalThis.Number(object.captureInterval)
        : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      filenamePrefix: isSet(object.filenamePrefix)
        ? globalThis.String(object.filenamePrefix)
        : "",
      filenameSuffix: isSet(object.filenameSuffix)
        ? imageFileSuffixFromJSON(object.filenameSuffix)
        : 0,
      imageCodec: isSet(object.imageCodec)
        ? imageCodecFromJSON(object.imageCodec)
        : 0,
      disableManifest: isSet(object.disableManifest)
        ? globalThis.Boolean(object.disableManifest)
        : false,
      s3: isSet(object.s3) ? S3Upload.fromJSON(object.s3) : undefined,
      gcp: isSet(object.gcp) ? GCPUpload.fromJSON(object.gcp) : undefined,
      azure: isSet(object.azure)
        ? AzureBlobUpload.fromJSON(object.azure)
        : undefined,
      aliOSS: isSet(object.aliOSS)
        ? AliOSSUpload.fromJSON(object.aliOSS)
        : undefined,
    };
  },

  toJSON(message: ImageOutput): unknown {
    const obj: any = {};
    if (message.captureInterval !== 0) {
      obj.captureInterval = Math.round(message.captureInterval);
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.filenamePrefix !== "") {
      obj.filenamePrefix = message.filenamePrefix;
    }
    if (message.filenameSuffix !== 0) {
      obj.filenameSuffix = imageFileSuffixToJSON(message.filenameSuffix);
    }
    if (message.imageCodec !== 0) {
      obj.imageCodec = imageCodecToJSON(message.imageCodec);
    }
    if (message.disableManifest !== false) {
      obj.disableManifest = message.disableManifest;
    }
    if (message.s3 !== undefined) {
      obj.s3 = S3Upload.toJSON(message.s3);
    }
    if (message.gcp !== undefined) {
      obj.gcp = GCPUpload.toJSON(message.gcp);
    }
    if (message.azure !== undefined) {
      obj.azure = AzureBlobUpload.toJSON(message.azure);
    }
    if (message.aliOSS !== undefined) {
      obj.aliOSS = AliOSSUpload.toJSON(message.aliOSS);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImageOutput>, I>>(base?: I): ImageOutput {
    return ImageOutput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImageOutput>, I>>(
    object: I,
  ): ImageOutput {
    const message = createBaseImageOutput();
    message.captureInterval = object.captureInterval ?? 0;
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.filenamePrefix = object.filenamePrefix ?? "";
    message.filenameSuffix = object.filenameSuffix ?? 0;
    message.imageCodec = object.imageCodec ?? 0;
    message.disableManifest = object.disableManifest ?? false;
    message.s3 =
      object.s3 !== undefined && object.s3 !== null
        ? S3Upload.fromPartial(object.s3)
        : undefined;
    message.gcp =
      object.gcp !== undefined && object.gcp !== null
        ? GCPUpload.fromPartial(object.gcp)
        : undefined;
    message.azure =
      object.azure !== undefined && object.azure !== null
        ? AzureBlobUpload.fromPartial(object.azure)
        : undefined;
    message.aliOSS =
      object.aliOSS !== undefined && object.aliOSS !== null
        ? AliOSSUpload.fromPartial(object.aliOSS)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(ImageOutput.$type, ImageOutput);

function createBaseS3Upload(): S3Upload {
  return {
    $type: "livekit.S3Upload",
    accessKey: "",
    secret: "",
    sessionToken: "",
    region: "",
    endpoint: "",
    bucket: "",
    forcePathStyle: false,
    metadata: {},
    tagging: "",
    contentDisposition: "",
    proxy: undefined,
  };
}

export const S3Upload: MessageFns<S3Upload, "livekit.S3Upload"> = {
  $type: "livekit.S3Upload" as const,

  encode(
    message: S3Upload,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accessKey !== "") {
      writer.uint32(10).string(message.accessKey);
    }
    if (message.secret !== "") {
      writer.uint32(18).string(message.secret);
    }
    if (message.sessionToken !== "") {
      writer.uint32(90).string(message.sessionToken);
    }
    if (message.region !== "") {
      writer.uint32(26).string(message.region);
    }
    if (message.endpoint !== "") {
      writer.uint32(34).string(message.endpoint);
    }
    if (message.bucket !== "") {
      writer.uint32(42).string(message.bucket);
    }
    if (message.forcePathStyle !== false) {
      writer.uint32(48).bool(message.forcePathStyle);
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      S3Upload_MetadataEntry.encode(
        { $type: "livekit.S3Upload.MetadataEntry", key: key as any, value },
        writer.uint32(58).fork(),
      ).join();
    });
    if (message.tagging !== "") {
      writer.uint32(66).string(message.tagging);
    }
    if (message.contentDisposition !== "") {
      writer.uint32(74).string(message.contentDisposition);
    }
    if (message.proxy !== undefined) {
      ProxyConfig.encode(message.proxy, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): S3Upload {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseS3Upload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessKey = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.secret = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.sessionToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.region = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.bucket = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.forcePathStyle = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = S3Upload_MetadataEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.metadata[entry7.key] = entry7.value;
          }
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tagging = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.contentDisposition = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.proxy = ProxyConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): S3Upload {
    return {
      $type: S3Upload.$type,
      accessKey: isSet(object.accessKey)
        ? globalThis.String(object.accessKey)
        : "",
      secret: isSet(object.secret) ? globalThis.String(object.secret) : "",
      sessionToken: isSet(object.sessionToken)
        ? globalThis.String(object.sessionToken)
        : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      endpoint: isSet(object.endpoint)
        ? globalThis.String(object.endpoint)
        : "",
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      forcePathStyle: isSet(object.forcePathStyle)
        ? globalThis.Boolean(object.forcePathStyle)
        : false,
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>(
            (acc, [key, value]) => {
              acc[key] = String(value);
              return acc;
            },
            {},
          )
        : {},
      tagging: isSet(object.tagging) ? globalThis.String(object.tagging) : "",
      contentDisposition: isSet(object.contentDisposition)
        ? globalThis.String(object.contentDisposition)
        : "",
      proxy: isSet(object.proxy)
        ? ProxyConfig.fromJSON(object.proxy)
        : undefined,
    };
  },

  toJSON(message: S3Upload): unknown {
    const obj: any = {};
    if (message.accessKey !== "") {
      obj.accessKey = message.accessKey;
    }
    if (message.secret !== "") {
      obj.secret = message.secret;
    }
    if (message.sessionToken !== "") {
      obj.sessionToken = message.sessionToken;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.forcePathStyle !== false) {
      obj.forcePathStyle = message.forcePathStyle;
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    if (message.tagging !== "") {
      obj.tagging = message.tagging;
    }
    if (message.contentDisposition !== "") {
      obj.contentDisposition = message.contentDisposition;
    }
    if (message.proxy !== undefined) {
      obj.proxy = ProxyConfig.toJSON(message.proxy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<S3Upload>, I>>(base?: I): S3Upload {
    return S3Upload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<S3Upload>, I>>(object: I): S3Upload {
    const message = createBaseS3Upload();
    message.accessKey = object.accessKey ?? "";
    message.secret = object.secret ?? "";
    message.sessionToken = object.sessionToken ?? "";
    message.region = object.region ?? "";
    message.endpoint = object.endpoint ?? "";
    message.bucket = object.bucket ?? "";
    message.forcePathStyle = object.forcePathStyle ?? false;
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{
      [key: string]: string;
    }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.tagging = object.tagging ?? "";
    message.contentDisposition = object.contentDisposition ?? "";
    message.proxy =
      object.proxy !== undefined && object.proxy !== null
        ? ProxyConfig.fromPartial(object.proxy)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(S3Upload.$type, S3Upload);

function createBaseS3Upload_MetadataEntry(): S3Upload_MetadataEntry {
  return { $type: "livekit.S3Upload.MetadataEntry", key: "", value: "" };
}

export const S3Upload_MetadataEntry: MessageFns<
  S3Upload_MetadataEntry,
  "livekit.S3Upload.MetadataEntry"
> = {
  $type: "livekit.S3Upload.MetadataEntry" as const,

  encode(
    message: S3Upload_MetadataEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): S3Upload_MetadataEntry {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseS3Upload_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): S3Upload_MetadataEntry {
    return {
      $type: S3Upload_MetadataEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: S3Upload_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<S3Upload_MetadataEntry>, I>>(
    base?: I,
  ): S3Upload_MetadataEntry {
    return S3Upload_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<S3Upload_MetadataEntry>, I>>(
    object: I,
  ): S3Upload_MetadataEntry {
    const message = createBaseS3Upload_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(S3Upload_MetadataEntry.$type, S3Upload_MetadataEntry);

function createBaseGCPUpload(): GCPUpload {
  return {
    $type: "livekit.GCPUpload",
    credentials: "",
    bucket: "",
    proxy: undefined,
  };
}

export const GCPUpload: MessageFns<GCPUpload, "livekit.GCPUpload"> = {
  $type: "livekit.GCPUpload" as const,

  encode(
    message: GCPUpload,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.credentials !== "") {
      writer.uint32(10).string(message.credentials);
    }
    if (message.bucket !== "") {
      writer.uint32(18).string(message.bucket);
    }
    if (message.proxy !== undefined) {
      ProxyConfig.encode(message.proxy, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GCPUpload {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGCPUpload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.credentials = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.bucket = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.proxy = ProxyConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GCPUpload {
    return {
      $type: GCPUpload.$type,
      credentials: isSet(object.credentials)
        ? globalThis.String(object.credentials)
        : "",
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      proxy: isSet(object.proxy)
        ? ProxyConfig.fromJSON(object.proxy)
        : undefined,
    };
  },

  toJSON(message: GCPUpload): unknown {
    const obj: any = {};
    if (message.credentials !== "") {
      obj.credentials = message.credentials;
    }
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.proxy !== undefined) {
      obj.proxy = ProxyConfig.toJSON(message.proxy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GCPUpload>, I>>(base?: I): GCPUpload {
    return GCPUpload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GCPUpload>, I>>(
    object: I,
  ): GCPUpload {
    const message = createBaseGCPUpload();
    message.credentials = object.credentials ?? "";
    message.bucket = object.bucket ?? "";
    message.proxy =
      object.proxy !== undefined && object.proxy !== null
        ? ProxyConfig.fromPartial(object.proxy)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(GCPUpload.$type, GCPUpload);

function createBaseAzureBlobUpload(): AzureBlobUpload {
  return {
    $type: "livekit.AzureBlobUpload",
    accountName: "",
    accountKey: "",
    containerName: "",
  };
}

export const AzureBlobUpload: MessageFns<
  AzureBlobUpload,
  "livekit.AzureBlobUpload"
> = {
  $type: "livekit.AzureBlobUpload" as const,

  encode(
    message: AzureBlobUpload,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountName !== "") {
      writer.uint32(10).string(message.accountName);
    }
    if (message.accountKey !== "") {
      writer.uint32(18).string(message.accountKey);
    }
    if (message.containerName !== "") {
      writer.uint32(26).string(message.containerName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AzureBlobUpload {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAzureBlobUpload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accountName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.accountKey = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.containerName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AzureBlobUpload {
    return {
      $type: AzureBlobUpload.$type,
      accountName: isSet(object.accountName)
        ? globalThis.String(object.accountName)
        : "",
      accountKey: isSet(object.accountKey)
        ? globalThis.String(object.accountKey)
        : "",
      containerName: isSet(object.containerName)
        ? globalThis.String(object.containerName)
        : "",
    };
  },

  toJSON(message: AzureBlobUpload): unknown {
    const obj: any = {};
    if (message.accountName !== "") {
      obj.accountName = message.accountName;
    }
    if (message.accountKey !== "") {
      obj.accountKey = message.accountKey;
    }
    if (message.containerName !== "") {
      obj.containerName = message.containerName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AzureBlobUpload>, I>>(
    base?: I,
  ): AzureBlobUpload {
    return AzureBlobUpload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AzureBlobUpload>, I>>(
    object: I,
  ): AzureBlobUpload {
    const message = createBaseAzureBlobUpload();
    message.accountName = object.accountName ?? "";
    message.accountKey = object.accountKey ?? "";
    message.containerName = object.containerName ?? "";
    return message;
  },
};

messageTypeRegistry.set(AzureBlobUpload.$type, AzureBlobUpload);

function createBaseAliOSSUpload(): AliOSSUpload {
  return {
    $type: "livekit.AliOSSUpload",
    accessKey: "",
    secret: "",
    region: "",
    endpoint: "",
    bucket: "",
  };
}

export const AliOSSUpload: MessageFns<AliOSSUpload, "livekit.AliOSSUpload"> = {
  $type: "livekit.AliOSSUpload" as const,

  encode(
    message: AliOSSUpload,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accessKey !== "") {
      writer.uint32(10).string(message.accessKey);
    }
    if (message.secret !== "") {
      writer.uint32(18).string(message.secret);
    }
    if (message.region !== "") {
      writer.uint32(26).string(message.region);
    }
    if (message.endpoint !== "") {
      writer.uint32(34).string(message.endpoint);
    }
    if (message.bucket !== "") {
      writer.uint32(42).string(message.bucket);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AliOSSUpload {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAliOSSUpload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessKey = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.secret = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.region = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.bucket = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AliOSSUpload {
    return {
      $type: AliOSSUpload.$type,
      accessKey: isSet(object.accessKey)
        ? globalThis.String(object.accessKey)
        : "",
      secret: isSet(object.secret) ? globalThis.String(object.secret) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      endpoint: isSet(object.endpoint)
        ? globalThis.String(object.endpoint)
        : "",
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
    };
  },

  toJSON(message: AliOSSUpload): unknown {
    const obj: any = {};
    if (message.accessKey !== "") {
      obj.accessKey = message.accessKey;
    }
    if (message.secret !== "") {
      obj.secret = message.secret;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AliOSSUpload>, I>>(
    base?: I,
  ): AliOSSUpload {
    return AliOSSUpload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AliOSSUpload>, I>>(
    object: I,
  ): AliOSSUpload {
    const message = createBaseAliOSSUpload();
    message.accessKey = object.accessKey ?? "";
    message.secret = object.secret ?? "";
    message.region = object.region ?? "";
    message.endpoint = object.endpoint ?? "";
    message.bucket = object.bucket ?? "";
    return message;
  },
};

messageTypeRegistry.set(AliOSSUpload.$type, AliOSSUpload);

function createBaseProxyConfig(): ProxyConfig {
  return { $type: "livekit.ProxyConfig", url: "", username: "", password: "" };
}

export const ProxyConfig: MessageFns<ProxyConfig, "livekit.ProxyConfig"> = {
  $type: "livekit.ProxyConfig" as const,

  encode(
    message: ProxyConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.password !== "") {
      writer.uint32(26).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProxyConfig {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProxyConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProxyConfig {
    return {
      $type: ProxyConfig.$type,
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      username: isSet(object.username)
        ? globalThis.String(object.username)
        : "",
      password: isSet(object.password)
        ? globalThis.String(object.password)
        : "",
    };
  },

  toJSON(message: ProxyConfig): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProxyConfig>, I>>(base?: I): ProxyConfig {
    return ProxyConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProxyConfig>, I>>(
    object: I,
  ): ProxyConfig {
    const message = createBaseProxyConfig();
    message.url = object.url ?? "";
    message.username = object.username ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

messageTypeRegistry.set(ProxyConfig.$type, ProxyConfig);

function createBaseStreamOutput(): StreamOutput {
  return { $type: "livekit.StreamOutput", protocol: 0, urls: [] };
}

export const StreamOutput: MessageFns<StreamOutput, "livekit.StreamOutput"> = {
  $type: "livekit.StreamOutput" as const,

  encode(
    message: StreamOutput,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.protocol !== 0) {
      writer.uint32(8).int32(message.protocol);
    }
    for (const v of message.urls) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamOutput {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.protocol = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.urls.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamOutput {
    return {
      $type: StreamOutput.$type,
      protocol: isSet(object.protocol)
        ? streamProtocolFromJSON(object.protocol)
        : 0,
      urls: globalThis.Array.isArray(object?.urls)
        ? object.urls.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: StreamOutput): unknown {
    const obj: any = {};
    if (message.protocol !== 0) {
      obj.protocol = streamProtocolToJSON(message.protocol);
    }
    if (message.urls?.length) {
      obj.urls = message.urls;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamOutput>, I>>(
    base?: I,
  ): StreamOutput {
    return StreamOutput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamOutput>, I>>(
    object: I,
  ): StreamOutput {
    const message = createBaseStreamOutput();
    message.protocol = object.protocol ?? 0;
    message.urls = object.urls?.map((e) => e) || [];
    return message;
  },
};

messageTypeRegistry.set(StreamOutput.$type, StreamOutput);

function createBaseEncodingOptions(): EncodingOptions {
  return {
    $type: "livekit.EncodingOptions",
    width: 0,
    height: 0,
    depth: 0,
    framerate: 0,
    audioCodec: 0,
    audioBitrate: 0,
    audioQuality: 0,
    audioFrequency: 0,
    videoCodec: 0,
    videoBitrate: 0,
    videoQuality: 0,
    keyFrameInterval: 0,
  };
}

export const EncodingOptions: MessageFns<
  EncodingOptions,
  "livekit.EncodingOptions"
> = {
  $type: "livekit.EncodingOptions" as const,

  encode(
    message: EncodingOptions,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.width !== 0) {
      writer.uint32(8).int32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(16).int32(message.height);
    }
    if (message.depth !== 0) {
      writer.uint32(24).int32(message.depth);
    }
    if (message.framerate !== 0) {
      writer.uint32(32).int32(message.framerate);
    }
    if (message.audioCodec !== 0) {
      writer.uint32(40).int32(message.audioCodec);
    }
    if (message.audioBitrate !== 0) {
      writer.uint32(48).int32(message.audioBitrate);
    }
    if (message.audioQuality !== 0) {
      writer.uint32(88).int32(message.audioQuality);
    }
    if (message.audioFrequency !== 0) {
      writer.uint32(56).int32(message.audioFrequency);
    }
    if (message.videoCodec !== 0) {
      writer.uint32(64).int32(message.videoCodec);
    }
    if (message.videoBitrate !== 0) {
      writer.uint32(72).int32(message.videoBitrate);
    }
    if (message.videoQuality !== 0) {
      writer.uint32(96).int32(message.videoQuality);
    }
    if (message.keyFrameInterval !== 0) {
      writer.uint32(81).double(message.keyFrameInterval);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EncodingOptions {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEncodingOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.width = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.height = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.depth = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.framerate = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.audioCodec = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.audioBitrate = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.audioQuality = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.audioFrequency = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.videoCodec = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.videoBitrate = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.videoQuality = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 81) {
            break;
          }

          message.keyFrameInterval = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EncodingOptions {
    return {
      $type: EncodingOptions.$type,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      depth: isSet(object.depth) ? globalThis.Number(object.depth) : 0,
      framerate: isSet(object.framerate)
        ? globalThis.Number(object.framerate)
        : 0,
      audioCodec: isSet(object.audioCodec)
        ? audioCodecFromJSON(object.audioCodec)
        : 0,
      audioBitrate: isSet(object.audioBitrate)
        ? globalThis.Number(object.audioBitrate)
        : 0,
      audioQuality: isSet(object.audioQuality)
        ? globalThis.Number(object.audioQuality)
        : 0,
      audioFrequency: isSet(object.audioFrequency)
        ? globalThis.Number(object.audioFrequency)
        : 0,
      videoCodec: isSet(object.videoCodec)
        ? videoCodecFromJSON(object.videoCodec)
        : 0,
      videoBitrate: isSet(object.videoBitrate)
        ? globalThis.Number(object.videoBitrate)
        : 0,
      videoQuality: isSet(object.videoQuality)
        ? globalThis.Number(object.videoQuality)
        : 0,
      keyFrameInterval: isSet(object.keyFrameInterval)
        ? globalThis.Number(object.keyFrameInterval)
        : 0,
    };
  },

  toJSON(message: EncodingOptions): unknown {
    const obj: any = {};
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.depth !== 0) {
      obj.depth = Math.round(message.depth);
    }
    if (message.framerate !== 0) {
      obj.framerate = Math.round(message.framerate);
    }
    if (message.audioCodec !== 0) {
      obj.audioCodec = audioCodecToJSON(message.audioCodec);
    }
    if (message.audioBitrate !== 0) {
      obj.audioBitrate = Math.round(message.audioBitrate);
    }
    if (message.audioQuality !== 0) {
      obj.audioQuality = Math.round(message.audioQuality);
    }
    if (message.audioFrequency !== 0) {
      obj.audioFrequency = Math.round(message.audioFrequency);
    }
    if (message.videoCodec !== 0) {
      obj.videoCodec = videoCodecToJSON(message.videoCodec);
    }
    if (message.videoBitrate !== 0) {
      obj.videoBitrate = Math.round(message.videoBitrate);
    }
    if (message.videoQuality !== 0) {
      obj.videoQuality = Math.round(message.videoQuality);
    }
    if (message.keyFrameInterval !== 0) {
      obj.keyFrameInterval = message.keyFrameInterval;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EncodingOptions>, I>>(
    base?: I,
  ): EncodingOptions {
    return EncodingOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EncodingOptions>, I>>(
    object: I,
  ): EncodingOptions {
    const message = createBaseEncodingOptions();
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.depth = object.depth ?? 0;
    message.framerate = object.framerate ?? 0;
    message.audioCodec = object.audioCodec ?? 0;
    message.audioBitrate = object.audioBitrate ?? 0;
    message.audioQuality = object.audioQuality ?? 0;
    message.audioFrequency = object.audioFrequency ?? 0;
    message.videoCodec = object.videoCodec ?? 0;
    message.videoBitrate = object.videoBitrate ?? 0;
    message.videoQuality = object.videoQuality ?? 0;
    message.keyFrameInterval = object.keyFrameInterval ?? 0;
    return message;
  },
};

messageTypeRegistry.set(EncodingOptions.$type, EncodingOptions);

function createBaseUpdateLayoutRequest(): UpdateLayoutRequest {
  return { $type: "livekit.UpdateLayoutRequest", egressId: "", layout: "" };
}

export const UpdateLayoutRequest: MessageFns<
  UpdateLayoutRequest,
  "livekit.UpdateLayoutRequest"
> = {
  $type: "livekit.UpdateLayoutRequest" as const,

  encode(
    message: UpdateLayoutRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.egressId !== "") {
      writer.uint32(10).string(message.egressId);
    }
    if (message.layout !== "") {
      writer.uint32(18).string(message.layout);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateLayoutRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLayoutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.egressId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.layout = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLayoutRequest {
    return {
      $type: UpdateLayoutRequest.$type,
      egressId: isSet(object.egressId)
        ? globalThis.String(object.egressId)
        : "",
      layout: isSet(object.layout) ? globalThis.String(object.layout) : "",
    };
  },

  toJSON(message: UpdateLayoutRequest): unknown {
    const obj: any = {};
    if (message.egressId !== "") {
      obj.egressId = message.egressId;
    }
    if (message.layout !== "") {
      obj.layout = message.layout;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateLayoutRequest>, I>>(
    base?: I,
  ): UpdateLayoutRequest {
    return UpdateLayoutRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateLayoutRequest>, I>>(
    object: I,
  ): UpdateLayoutRequest {
    const message = createBaseUpdateLayoutRequest();
    message.egressId = object.egressId ?? "";
    message.layout = object.layout ?? "";
    return message;
  },
};

messageTypeRegistry.set(UpdateLayoutRequest.$type, UpdateLayoutRequest);

function createBaseUpdateStreamRequest(): UpdateStreamRequest {
  return {
    $type: "livekit.UpdateStreamRequest",
    egressId: "",
    addOutputUrls: [],
    removeOutputUrls: [],
  };
}

export const UpdateStreamRequest: MessageFns<
  UpdateStreamRequest,
  "livekit.UpdateStreamRequest"
> = {
  $type: "livekit.UpdateStreamRequest" as const,

  encode(
    message: UpdateStreamRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.egressId !== "") {
      writer.uint32(10).string(message.egressId);
    }
    for (const v of message.addOutputUrls) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.removeOutputUrls) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateStreamRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.egressId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.addOutputUrls.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.removeOutputUrls.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateStreamRequest {
    return {
      $type: UpdateStreamRequest.$type,
      egressId: isSet(object.egressId)
        ? globalThis.String(object.egressId)
        : "",
      addOutputUrls: globalThis.Array.isArray(object?.addOutputUrls)
        ? object.addOutputUrls.map((e: any) => globalThis.String(e))
        : [],
      removeOutputUrls: globalThis.Array.isArray(object?.removeOutputUrls)
        ? object.removeOutputUrls.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: UpdateStreamRequest): unknown {
    const obj: any = {};
    if (message.egressId !== "") {
      obj.egressId = message.egressId;
    }
    if (message.addOutputUrls?.length) {
      obj.addOutputUrls = message.addOutputUrls;
    }
    if (message.removeOutputUrls?.length) {
      obj.removeOutputUrls = message.removeOutputUrls;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateStreamRequest>, I>>(
    base?: I,
  ): UpdateStreamRequest {
    return UpdateStreamRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateStreamRequest>, I>>(
    object: I,
  ): UpdateStreamRequest {
    const message = createBaseUpdateStreamRequest();
    message.egressId = object.egressId ?? "";
    message.addOutputUrls = object.addOutputUrls?.map((e) => e) || [];
    message.removeOutputUrls = object.removeOutputUrls?.map((e) => e) || [];
    return message;
  },
};

messageTypeRegistry.set(UpdateStreamRequest.$type, UpdateStreamRequest);

function createBaseListEgressRequest(): ListEgressRequest {
  return {
    $type: "livekit.ListEgressRequest",
    roomName: "",
    egressId: "",
    active: false,
  };
}

export const ListEgressRequest: MessageFns<
  ListEgressRequest,
  "livekit.ListEgressRequest"
> = {
  $type: "livekit.ListEgressRequest" as const,

  encode(
    message: ListEgressRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.roomName !== "") {
      writer.uint32(10).string(message.roomName);
    }
    if (message.egressId !== "") {
      writer.uint32(18).string(message.egressId);
    }
    if (message.active !== false) {
      writer.uint32(24).bool(message.active);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEgressRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEgressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roomName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.egressId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEgressRequest {
    return {
      $type: ListEgressRequest.$type,
      roomName: isSet(object.roomName)
        ? globalThis.String(object.roomName)
        : "",
      egressId: isSet(object.egressId)
        ? globalThis.String(object.egressId)
        : "",
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
    };
  },

  toJSON(message: ListEgressRequest): unknown {
    const obj: any = {};
    if (message.roomName !== "") {
      obj.roomName = message.roomName;
    }
    if (message.egressId !== "") {
      obj.egressId = message.egressId;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListEgressRequest>, I>>(
    base?: I,
  ): ListEgressRequest {
    return ListEgressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListEgressRequest>, I>>(
    object: I,
  ): ListEgressRequest {
    const message = createBaseListEgressRequest();
    message.roomName = object.roomName ?? "";
    message.egressId = object.egressId ?? "";
    message.active = object.active ?? false;
    return message;
  },
};

messageTypeRegistry.set(ListEgressRequest.$type, ListEgressRequest);

function createBaseListEgressResponse(): ListEgressResponse {
  return { $type: "livekit.ListEgressResponse", items: [] };
}

export const ListEgressResponse: MessageFns<
  ListEgressResponse,
  "livekit.ListEgressResponse"
> = {
  $type: "livekit.ListEgressResponse" as const,

  encode(
    message: ListEgressResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.items) {
      EgressInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ListEgressResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEgressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.items.push(EgressInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEgressResponse {
    return {
      $type: ListEgressResponse.$type,
      items: globalThis.Array.isArray(object?.items)
        ? object.items.map((e: any) => EgressInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListEgressResponse): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => EgressInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListEgressResponse>, I>>(
    base?: I,
  ): ListEgressResponse {
    return ListEgressResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListEgressResponse>, I>>(
    object: I,
  ): ListEgressResponse {
    const message = createBaseListEgressResponse();
    message.items = object.items?.map((e) => EgressInfo.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(ListEgressResponse.$type, ListEgressResponse);

function createBaseStopEgressRequest(): StopEgressRequest {
  return { $type: "livekit.StopEgressRequest", egressId: "" };
}

export const StopEgressRequest: MessageFns<
  StopEgressRequest,
  "livekit.StopEgressRequest"
> = {
  $type: "livekit.StopEgressRequest" as const,

  encode(
    message: StopEgressRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.egressId !== "") {
      writer.uint32(10).string(message.egressId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopEgressRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopEgressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.egressId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StopEgressRequest {
    return {
      $type: StopEgressRequest.$type,
      egressId: isSet(object.egressId)
        ? globalThis.String(object.egressId)
        : "",
    };
  },

  toJSON(message: StopEgressRequest): unknown {
    const obj: any = {};
    if (message.egressId !== "") {
      obj.egressId = message.egressId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StopEgressRequest>, I>>(
    base?: I,
  ): StopEgressRequest {
    return StopEgressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StopEgressRequest>, I>>(
    object: I,
  ): StopEgressRequest {
    const message = createBaseStopEgressRequest();
    message.egressId = object.egressId ?? "";
    return message;
  },
};

messageTypeRegistry.set(StopEgressRequest.$type, StopEgressRequest);

function createBaseEgressInfo(): EgressInfo {
  return {
    $type: "livekit.EgressInfo",
    egressId: "",
    roomId: "",
    roomName: "",
    sourceType: 0,
    status: 0,
    startedAt: 0n,
    endedAt: 0n,
    updatedAt: 0n,
    details: "",
    error: "",
    errorCode: 0,
    roomComposite: undefined,
    web: undefined,
    participant: undefined,
    trackComposite: undefined,
    track: undefined,
    stream: undefined,
    file: undefined,
    segments: undefined,
    streamResults: [],
    fileResults: [],
    segmentResults: [],
    imageResults: [],
    manifestLocation: "",
    backupStorageUsed: false,
  };
}

export const EgressInfo: MessageFns<EgressInfo, "livekit.EgressInfo"> = {
  $type: "livekit.EgressInfo" as const,

  encode(
    message: EgressInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.egressId !== "") {
      writer.uint32(10).string(message.egressId);
    }
    if (message.roomId !== "") {
      writer.uint32(18).string(message.roomId);
    }
    if (message.roomName !== "") {
      writer.uint32(106).string(message.roomName);
    }
    if (message.sourceType !== 0) {
      writer.uint32(208).int32(message.sourceType);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (message.startedAt !== 0n) {
      if (BigInt.asIntN(64, message.startedAt) !== message.startedAt) {
        throw new globalThis.Error(
          "value provided for field message.startedAt of type int64 too large",
        );
      }
      writer.uint32(80).int64(message.startedAt);
    }
    if (message.endedAt !== 0n) {
      if (BigInt.asIntN(64, message.endedAt) !== message.endedAt) {
        throw new globalThis.Error(
          "value provided for field message.endedAt of type int64 too large",
        );
      }
      writer.uint32(88).int64(message.endedAt);
    }
    if (message.updatedAt !== 0n) {
      if (BigInt.asIntN(64, message.updatedAt) !== message.updatedAt) {
        throw new globalThis.Error(
          "value provided for field message.updatedAt of type int64 too large",
        );
      }
      writer.uint32(144).int64(message.updatedAt);
    }
    if (message.details !== "") {
      writer.uint32(170).string(message.details);
    }
    if (message.error !== "") {
      writer.uint32(74).string(message.error);
    }
    if (message.errorCode !== 0) {
      writer.uint32(176).int32(message.errorCode);
    }
    if (message.roomComposite !== undefined) {
      RoomCompositeEgressRequest.encode(
        message.roomComposite,
        writer.uint32(34).fork(),
      ).join();
    }
    if (message.web !== undefined) {
      WebEgressRequest.encode(message.web, writer.uint32(114).fork()).join();
    }
    if (message.participant !== undefined) {
      ParticipantEgressRequest.encode(
        message.participant,
        writer.uint32(154).fork(),
      ).join();
    }
    if (message.trackComposite !== undefined) {
      TrackCompositeEgressRequest.encode(
        message.trackComposite,
        writer.uint32(42).fork(),
      ).join();
    }
    if (message.track !== undefined) {
      TrackEgressRequest.encode(message.track, writer.uint32(50).fork()).join();
    }
    if (message.stream !== undefined) {
      StreamInfoList.encode(message.stream, writer.uint32(58).fork()).join();
    }
    if (message.file !== undefined) {
      FileInfo.encode(message.file, writer.uint32(66).fork()).join();
    }
    if (message.segments !== undefined) {
      SegmentsInfo.encode(message.segments, writer.uint32(98).fork()).join();
    }
    for (const v of message.streamResults) {
      StreamInfo.encode(v!, writer.uint32(122).fork()).join();
    }
    for (const v of message.fileResults) {
      FileInfo.encode(v!, writer.uint32(130).fork()).join();
    }
    for (const v of message.segmentResults) {
      SegmentsInfo.encode(v!, writer.uint32(138).fork()).join();
    }
    for (const v of message.imageResults) {
      ImagesInfo.encode(v!, writer.uint32(162).fork()).join();
    }
    if (message.manifestLocation !== "") {
      writer.uint32(186).string(message.manifestLocation);
    }
    if (message.backupStorageUsed !== false) {
      writer.uint32(200).bool(message.backupStorageUsed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EgressInfo {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEgressInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.egressId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.roomId = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.roomName = reader.string();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.sourceType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.startedAt = reader.int64() as bigint;
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.endedAt = reader.int64() as bigint;
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.updatedAt = reader.int64() as bigint;
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.details = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.error = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.errorCode = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.roomComposite = RoomCompositeEgressRequest.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.web = WebEgressRequest.decode(reader, reader.uint32());
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.participant = ParticipantEgressRequest.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.trackComposite = TrackCompositeEgressRequest.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.track = TrackEgressRequest.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.stream = StreamInfoList.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.file = FileInfo.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.segments = SegmentsInfo.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.streamResults.push(
            StreamInfo.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.fileResults.push(FileInfo.decode(reader, reader.uint32()));
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.segmentResults.push(
            SegmentsInfo.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.imageResults.push(ImagesInfo.decode(reader, reader.uint32()));
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.manifestLocation = reader.string();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.backupStorageUsed = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EgressInfo {
    return {
      $type: EgressInfo.$type,
      egressId: isSet(object.egressId)
        ? globalThis.String(object.egressId)
        : "",
      roomId: isSet(object.roomId) ? globalThis.String(object.roomId) : "",
      roomName: isSet(object.roomName)
        ? globalThis.String(object.roomName)
        : "",
      sourceType: isSet(object.sourceType)
        ? egressSourceTypeFromJSON(object.sourceType)
        : 0,
      status: isSet(object.status) ? egressStatusFromJSON(object.status) : 0,
      startedAt: isSet(object.startedAt) ? BigInt(object.startedAt) : 0n,
      endedAt: isSet(object.endedAt) ? BigInt(object.endedAt) : 0n,
      updatedAt: isSet(object.updatedAt) ? BigInt(object.updatedAt) : 0n,
      details: isSet(object.details) ? globalThis.String(object.details) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
      errorCode: isSet(object.errorCode)
        ? globalThis.Number(object.errorCode)
        : 0,
      roomComposite: isSet(object.roomComposite)
        ? RoomCompositeEgressRequest.fromJSON(object.roomComposite)
        : undefined,
      web: isSet(object.web)
        ? WebEgressRequest.fromJSON(object.web)
        : undefined,
      participant: isSet(object.participant)
        ? ParticipantEgressRequest.fromJSON(object.participant)
        : undefined,
      trackComposite: isSet(object.trackComposite)
        ? TrackCompositeEgressRequest.fromJSON(object.trackComposite)
        : undefined,
      track: isSet(object.track)
        ? TrackEgressRequest.fromJSON(object.track)
        : undefined,
      stream: isSet(object.stream)
        ? StreamInfoList.fromJSON(object.stream)
        : undefined,
      file: isSet(object.file) ? FileInfo.fromJSON(object.file) : undefined,
      segments: isSet(object.segments)
        ? SegmentsInfo.fromJSON(object.segments)
        : undefined,
      streamResults: globalThis.Array.isArray(object?.streamResults)
        ? object.streamResults.map((e: any) => StreamInfo.fromJSON(e))
        : [],
      fileResults: globalThis.Array.isArray(object?.fileResults)
        ? object.fileResults.map((e: any) => FileInfo.fromJSON(e))
        : [],
      segmentResults: globalThis.Array.isArray(object?.segmentResults)
        ? object.segmentResults.map((e: any) => SegmentsInfo.fromJSON(e))
        : [],
      imageResults: globalThis.Array.isArray(object?.imageResults)
        ? object.imageResults.map((e: any) => ImagesInfo.fromJSON(e))
        : [],
      manifestLocation: isSet(object.manifestLocation)
        ? globalThis.String(object.manifestLocation)
        : "",
      backupStorageUsed: isSet(object.backupStorageUsed)
        ? globalThis.Boolean(object.backupStorageUsed)
        : false,
    };
  },

  toJSON(message: EgressInfo): unknown {
    const obj: any = {};
    if (message.egressId !== "") {
      obj.egressId = message.egressId;
    }
    if (message.roomId !== "") {
      obj.roomId = message.roomId;
    }
    if (message.roomName !== "") {
      obj.roomName = message.roomName;
    }
    if (message.sourceType !== 0) {
      obj.sourceType = egressSourceTypeToJSON(message.sourceType);
    }
    if (message.status !== 0) {
      obj.status = egressStatusToJSON(message.status);
    }
    if (message.startedAt !== 0n) {
      obj.startedAt = message.startedAt.toString();
    }
    if (message.endedAt !== 0n) {
      obj.endedAt = message.endedAt.toString();
    }
    if (message.updatedAt !== 0n) {
      obj.updatedAt = message.updatedAt.toString();
    }
    if (message.details !== "") {
      obj.details = message.details;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    if (message.errorCode !== 0) {
      obj.errorCode = Math.round(message.errorCode);
    }
    if (message.roomComposite !== undefined) {
      obj.roomComposite = RoomCompositeEgressRequest.toJSON(
        message.roomComposite,
      );
    }
    if (message.web !== undefined) {
      obj.web = WebEgressRequest.toJSON(message.web);
    }
    if (message.participant !== undefined) {
      obj.participant = ParticipantEgressRequest.toJSON(message.participant);
    }
    if (message.trackComposite !== undefined) {
      obj.trackComposite = TrackCompositeEgressRequest.toJSON(
        message.trackComposite,
      );
    }
    if (message.track !== undefined) {
      obj.track = TrackEgressRequest.toJSON(message.track);
    }
    if (message.stream !== undefined) {
      obj.stream = StreamInfoList.toJSON(message.stream);
    }
    if (message.file !== undefined) {
      obj.file = FileInfo.toJSON(message.file);
    }
    if (message.segments !== undefined) {
      obj.segments = SegmentsInfo.toJSON(message.segments);
    }
    if (message.streamResults?.length) {
      obj.streamResults = message.streamResults.map((e) =>
        StreamInfo.toJSON(e),
      );
    }
    if (message.fileResults?.length) {
      obj.fileResults = message.fileResults.map((e) => FileInfo.toJSON(e));
    }
    if (message.segmentResults?.length) {
      obj.segmentResults = message.segmentResults.map((e) =>
        SegmentsInfo.toJSON(e),
      );
    }
    if (message.imageResults?.length) {
      obj.imageResults = message.imageResults.map((e) => ImagesInfo.toJSON(e));
    }
    if (message.manifestLocation !== "") {
      obj.manifestLocation = message.manifestLocation;
    }
    if (message.backupStorageUsed !== false) {
      obj.backupStorageUsed = message.backupStorageUsed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EgressInfo>, I>>(base?: I): EgressInfo {
    return EgressInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EgressInfo>, I>>(
    object: I,
  ): EgressInfo {
    const message = createBaseEgressInfo();
    message.egressId = object.egressId ?? "";
    message.roomId = object.roomId ?? "";
    message.roomName = object.roomName ?? "";
    message.sourceType = object.sourceType ?? 0;
    message.status = object.status ?? 0;
    message.startedAt = object.startedAt ?? 0n;
    message.endedAt = object.endedAt ?? 0n;
    message.updatedAt = object.updatedAt ?? 0n;
    message.details = object.details ?? "";
    message.error = object.error ?? "";
    message.errorCode = object.errorCode ?? 0;
    message.roomComposite =
      object.roomComposite !== undefined && object.roomComposite !== null
        ? RoomCompositeEgressRequest.fromPartial(object.roomComposite)
        : undefined;
    message.web =
      object.web !== undefined && object.web !== null
        ? WebEgressRequest.fromPartial(object.web)
        : undefined;
    message.participant =
      object.participant !== undefined && object.participant !== null
        ? ParticipantEgressRequest.fromPartial(object.participant)
        : undefined;
    message.trackComposite =
      object.trackComposite !== undefined && object.trackComposite !== null
        ? TrackCompositeEgressRequest.fromPartial(object.trackComposite)
        : undefined;
    message.track =
      object.track !== undefined && object.track !== null
        ? TrackEgressRequest.fromPartial(object.track)
        : undefined;
    message.stream =
      object.stream !== undefined && object.stream !== null
        ? StreamInfoList.fromPartial(object.stream)
        : undefined;
    message.file =
      object.file !== undefined && object.file !== null
        ? FileInfo.fromPartial(object.file)
        : undefined;
    message.segments =
      object.segments !== undefined && object.segments !== null
        ? SegmentsInfo.fromPartial(object.segments)
        : undefined;
    message.streamResults =
      object.streamResults?.map((e) => StreamInfo.fromPartial(e)) || [];
    message.fileResults =
      object.fileResults?.map((e) => FileInfo.fromPartial(e)) || [];
    message.segmentResults =
      object.segmentResults?.map((e) => SegmentsInfo.fromPartial(e)) || [];
    message.imageResults =
      object.imageResults?.map((e) => ImagesInfo.fromPartial(e)) || [];
    message.manifestLocation = object.manifestLocation ?? "";
    message.backupStorageUsed = object.backupStorageUsed ?? false;
    return message;
  },
};

messageTypeRegistry.set(EgressInfo.$type, EgressInfo);

function createBaseStreamInfoList(): StreamInfoList {
  return { $type: "livekit.StreamInfoList", info: [] };
}

export const StreamInfoList: MessageFns<
  StreamInfoList,
  "livekit.StreamInfoList"
> = {
  $type: "livekit.StreamInfoList" as const,

  encode(
    message: StreamInfoList,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.info) {
      StreamInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamInfoList {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamInfoList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.info.push(StreamInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamInfoList {
    return {
      $type: StreamInfoList.$type,
      info: globalThis.Array.isArray(object?.info)
        ? object.info.map((e: any) => StreamInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: StreamInfoList): unknown {
    const obj: any = {};
    if (message.info?.length) {
      obj.info = message.info.map((e) => StreamInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamInfoList>, I>>(
    base?: I,
  ): StreamInfoList {
    return StreamInfoList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamInfoList>, I>>(
    object: I,
  ): StreamInfoList {
    const message = createBaseStreamInfoList();
    message.info = object.info?.map((e) => StreamInfo.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(StreamInfoList.$type, StreamInfoList);

function createBaseStreamInfo(): StreamInfo {
  return {
    $type: "livekit.StreamInfo",
    url: "",
    startedAt: 0n,
    endedAt: 0n,
    duration: 0n,
    status: 0,
    error: "",
  };
}

export const StreamInfo: MessageFns<StreamInfo, "livekit.StreamInfo"> = {
  $type: "livekit.StreamInfo" as const,

  encode(
    message: StreamInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.startedAt !== 0n) {
      if (BigInt.asIntN(64, message.startedAt) !== message.startedAt) {
        throw new globalThis.Error(
          "value provided for field message.startedAt of type int64 too large",
        );
      }
      writer.uint32(16).int64(message.startedAt);
    }
    if (message.endedAt !== 0n) {
      if (BigInt.asIntN(64, message.endedAt) !== message.endedAt) {
        throw new globalThis.Error(
          "value provided for field message.endedAt of type int64 too large",
        );
      }
      writer.uint32(24).int64(message.endedAt);
    }
    if (message.duration !== 0n) {
      if (BigInt.asIntN(64, message.duration) !== message.duration) {
        throw new globalThis.Error(
          "value provided for field message.duration of type int64 too large",
        );
      }
      writer.uint32(32).int64(message.duration);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.error !== "") {
      writer.uint32(50).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamInfo {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startedAt = reader.int64() as bigint;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.endedAt = reader.int64() as bigint;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.duration = reader.int64() as bigint;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamInfo {
    return {
      $type: StreamInfo.$type,
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      startedAt: isSet(object.startedAt) ? BigInt(object.startedAt) : 0n,
      endedAt: isSet(object.endedAt) ? BigInt(object.endedAt) : 0n,
      duration: isSet(object.duration) ? BigInt(object.duration) : 0n,
      status: isSet(object.status)
        ? streamInfo_StatusFromJSON(object.status)
        : 0,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: StreamInfo): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.startedAt !== 0n) {
      obj.startedAt = message.startedAt.toString();
    }
    if (message.endedAt !== 0n) {
      obj.endedAt = message.endedAt.toString();
    }
    if (message.duration !== 0n) {
      obj.duration = message.duration.toString();
    }
    if (message.status !== 0) {
      obj.status = streamInfo_StatusToJSON(message.status);
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamInfo>, I>>(base?: I): StreamInfo {
    return StreamInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamInfo>, I>>(
    object: I,
  ): StreamInfo {
    const message = createBaseStreamInfo();
    message.url = object.url ?? "";
    message.startedAt = object.startedAt ?? 0n;
    message.endedAt = object.endedAt ?? 0n;
    message.duration = object.duration ?? 0n;
    message.status = object.status ?? 0;
    message.error = object.error ?? "";
    return message;
  },
};

messageTypeRegistry.set(StreamInfo.$type, StreamInfo);

function createBaseFileInfo(): FileInfo {
  return {
    $type: "livekit.FileInfo",
    filename: "",
    startedAt: 0n,
    endedAt: 0n,
    duration: 0n,
    size: 0n,
    location: "",
  };
}

export const FileInfo: MessageFns<FileInfo, "livekit.FileInfo"> = {
  $type: "livekit.FileInfo" as const,

  encode(
    message: FileInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.filename !== "") {
      writer.uint32(10).string(message.filename);
    }
    if (message.startedAt !== 0n) {
      if (BigInt.asIntN(64, message.startedAt) !== message.startedAt) {
        throw new globalThis.Error(
          "value provided for field message.startedAt of type int64 too large",
        );
      }
      writer.uint32(16).int64(message.startedAt);
    }
    if (message.endedAt !== 0n) {
      if (BigInt.asIntN(64, message.endedAt) !== message.endedAt) {
        throw new globalThis.Error(
          "value provided for field message.endedAt of type int64 too large",
        );
      }
      writer.uint32(24).int64(message.endedAt);
    }
    if (message.duration !== 0n) {
      if (BigInt.asIntN(64, message.duration) !== message.duration) {
        throw new globalThis.Error(
          "value provided for field message.duration of type int64 too large",
        );
      }
      writer.uint32(48).int64(message.duration);
    }
    if (message.size !== 0n) {
      if (BigInt.asIntN(64, message.size) !== message.size) {
        throw new globalThis.Error(
          "value provided for field message.size of type int64 too large",
        );
      }
      writer.uint32(32).int64(message.size);
    }
    if (message.location !== "") {
      writer.uint32(42).string(message.location);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileInfo {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filename = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startedAt = reader.int64() as bigint;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.endedAt = reader.int64() as bigint;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.duration = reader.int64() as bigint;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.size = reader.int64() as bigint;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.location = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileInfo {
    return {
      $type: FileInfo.$type,
      filename: isSet(object.filename)
        ? globalThis.String(object.filename)
        : "",
      startedAt: isSet(object.startedAt) ? BigInt(object.startedAt) : 0n,
      endedAt: isSet(object.endedAt) ? BigInt(object.endedAt) : 0n,
      duration: isSet(object.duration) ? BigInt(object.duration) : 0n,
      size: isSet(object.size) ? BigInt(object.size) : 0n,
      location: isSet(object.location)
        ? globalThis.String(object.location)
        : "",
    };
  },

  toJSON(message: FileInfo): unknown {
    const obj: any = {};
    if (message.filename !== "") {
      obj.filename = message.filename;
    }
    if (message.startedAt !== 0n) {
      obj.startedAt = message.startedAt.toString();
    }
    if (message.endedAt !== 0n) {
      obj.endedAt = message.endedAt.toString();
    }
    if (message.duration !== 0n) {
      obj.duration = message.duration.toString();
    }
    if (message.size !== 0n) {
      obj.size = message.size.toString();
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FileInfo>, I>>(base?: I): FileInfo {
    return FileInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FileInfo>, I>>(object: I): FileInfo {
    const message = createBaseFileInfo();
    message.filename = object.filename ?? "";
    message.startedAt = object.startedAt ?? 0n;
    message.endedAt = object.endedAt ?? 0n;
    message.duration = object.duration ?? 0n;
    message.size = object.size ?? 0n;
    message.location = object.location ?? "";
    return message;
  },
};

messageTypeRegistry.set(FileInfo.$type, FileInfo);

function createBaseSegmentsInfo(): SegmentsInfo {
  return {
    $type: "livekit.SegmentsInfo",
    playlistName: "",
    livePlaylistName: "",
    duration: 0n,
    size: 0n,
    playlistLocation: "",
    livePlaylistLocation: "",
    segmentCount: 0n,
    startedAt: 0n,
    endedAt: 0n,
  };
}

export const SegmentsInfo: MessageFns<SegmentsInfo, "livekit.SegmentsInfo"> = {
  $type: "livekit.SegmentsInfo" as const,

  encode(
    message: SegmentsInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.playlistName !== "") {
      writer.uint32(10).string(message.playlistName);
    }
    if (message.livePlaylistName !== "") {
      writer.uint32(66).string(message.livePlaylistName);
    }
    if (message.duration !== 0n) {
      if (BigInt.asIntN(64, message.duration) !== message.duration) {
        throw new globalThis.Error(
          "value provided for field message.duration of type int64 too large",
        );
      }
      writer.uint32(16).int64(message.duration);
    }
    if (message.size !== 0n) {
      if (BigInt.asIntN(64, message.size) !== message.size) {
        throw new globalThis.Error(
          "value provided for field message.size of type int64 too large",
        );
      }
      writer.uint32(24).int64(message.size);
    }
    if (message.playlistLocation !== "") {
      writer.uint32(34).string(message.playlistLocation);
    }
    if (message.livePlaylistLocation !== "") {
      writer.uint32(74).string(message.livePlaylistLocation);
    }
    if (message.segmentCount !== 0n) {
      if (BigInt.asIntN(64, message.segmentCount) !== message.segmentCount) {
        throw new globalThis.Error(
          "value provided for field message.segmentCount of type int64 too large",
        );
      }
      writer.uint32(40).int64(message.segmentCount);
    }
    if (message.startedAt !== 0n) {
      if (BigInt.asIntN(64, message.startedAt) !== message.startedAt) {
        throw new globalThis.Error(
          "value provided for field message.startedAt of type int64 too large",
        );
      }
      writer.uint32(48).int64(message.startedAt);
    }
    if (message.endedAt !== 0n) {
      if (BigInt.asIntN(64, message.endedAt) !== message.endedAt) {
        throw new globalThis.Error(
          "value provided for field message.endedAt of type int64 too large",
        );
      }
      writer.uint32(56).int64(message.endedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SegmentsInfo {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSegmentsInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playlistName = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.livePlaylistName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.duration = reader.int64() as bigint;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.size = reader.int64() as bigint;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.playlistLocation = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.livePlaylistLocation = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.segmentCount = reader.int64() as bigint;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.startedAt = reader.int64() as bigint;
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.endedAt = reader.int64() as bigint;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SegmentsInfo {
    return {
      $type: SegmentsInfo.$type,
      playlistName: isSet(object.playlistName)
        ? globalThis.String(object.playlistName)
        : "",
      livePlaylistName: isSet(object.livePlaylistName)
        ? globalThis.String(object.livePlaylistName)
        : "",
      duration: isSet(object.duration) ? BigInt(object.duration) : 0n,
      size: isSet(object.size) ? BigInt(object.size) : 0n,
      playlistLocation: isSet(object.playlistLocation)
        ? globalThis.String(object.playlistLocation)
        : "",
      livePlaylistLocation: isSet(object.livePlaylistLocation)
        ? globalThis.String(object.livePlaylistLocation)
        : "",
      segmentCount: isSet(object.segmentCount)
        ? BigInt(object.segmentCount)
        : 0n,
      startedAt: isSet(object.startedAt) ? BigInt(object.startedAt) : 0n,
      endedAt: isSet(object.endedAt) ? BigInt(object.endedAt) : 0n,
    };
  },

  toJSON(message: SegmentsInfo): unknown {
    const obj: any = {};
    if (message.playlistName !== "") {
      obj.playlistName = message.playlistName;
    }
    if (message.livePlaylistName !== "") {
      obj.livePlaylistName = message.livePlaylistName;
    }
    if (message.duration !== 0n) {
      obj.duration = message.duration.toString();
    }
    if (message.size !== 0n) {
      obj.size = message.size.toString();
    }
    if (message.playlistLocation !== "") {
      obj.playlistLocation = message.playlistLocation;
    }
    if (message.livePlaylistLocation !== "") {
      obj.livePlaylistLocation = message.livePlaylistLocation;
    }
    if (message.segmentCount !== 0n) {
      obj.segmentCount = message.segmentCount.toString();
    }
    if (message.startedAt !== 0n) {
      obj.startedAt = message.startedAt.toString();
    }
    if (message.endedAt !== 0n) {
      obj.endedAt = message.endedAt.toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SegmentsInfo>, I>>(
    base?: I,
  ): SegmentsInfo {
    return SegmentsInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SegmentsInfo>, I>>(
    object: I,
  ): SegmentsInfo {
    const message = createBaseSegmentsInfo();
    message.playlistName = object.playlistName ?? "";
    message.livePlaylistName = object.livePlaylistName ?? "";
    message.duration = object.duration ?? 0n;
    message.size = object.size ?? 0n;
    message.playlistLocation = object.playlistLocation ?? "";
    message.livePlaylistLocation = object.livePlaylistLocation ?? "";
    message.segmentCount = object.segmentCount ?? 0n;
    message.startedAt = object.startedAt ?? 0n;
    message.endedAt = object.endedAt ?? 0n;
    return message;
  },
};

messageTypeRegistry.set(SegmentsInfo.$type, SegmentsInfo);

function createBaseImagesInfo(): ImagesInfo {
  return {
    $type: "livekit.ImagesInfo",
    filenamePrefix: "",
    imageCount: 0n,
    startedAt: 0n,
    endedAt: 0n,
  };
}

export const ImagesInfo: MessageFns<ImagesInfo, "livekit.ImagesInfo"> = {
  $type: "livekit.ImagesInfo" as const,

  encode(
    message: ImagesInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.filenamePrefix !== "") {
      writer.uint32(34).string(message.filenamePrefix);
    }
    if (message.imageCount !== 0n) {
      if (BigInt.asIntN(64, message.imageCount) !== message.imageCount) {
        throw new globalThis.Error(
          "value provided for field message.imageCount of type int64 too large",
        );
      }
      writer.uint32(8).int64(message.imageCount);
    }
    if (message.startedAt !== 0n) {
      if (BigInt.asIntN(64, message.startedAt) !== message.startedAt) {
        throw new globalThis.Error(
          "value provided for field message.startedAt of type int64 too large",
        );
      }
      writer.uint32(16).int64(message.startedAt);
    }
    if (message.endedAt !== 0n) {
      if (BigInt.asIntN(64, message.endedAt) !== message.endedAt) {
        throw new globalThis.Error(
          "value provided for field message.endedAt of type int64 too large",
        );
      }
      writer.uint32(24).int64(message.endedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImagesInfo {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImagesInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.filenamePrefix = reader.string();
          continue;
        }
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.imageCount = reader.int64() as bigint;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startedAt = reader.int64() as bigint;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.endedAt = reader.int64() as bigint;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImagesInfo {
    return {
      $type: ImagesInfo.$type,
      filenamePrefix: isSet(object.filenamePrefix)
        ? globalThis.String(object.filenamePrefix)
        : "",
      imageCount: isSet(object.imageCount) ? BigInt(object.imageCount) : 0n,
      startedAt: isSet(object.startedAt) ? BigInt(object.startedAt) : 0n,
      endedAt: isSet(object.endedAt) ? BigInt(object.endedAt) : 0n,
    };
  },

  toJSON(message: ImagesInfo): unknown {
    const obj: any = {};
    if (message.filenamePrefix !== "") {
      obj.filenamePrefix = message.filenamePrefix;
    }
    if (message.imageCount !== 0n) {
      obj.imageCount = message.imageCount.toString();
    }
    if (message.startedAt !== 0n) {
      obj.startedAt = message.startedAt.toString();
    }
    if (message.endedAt !== 0n) {
      obj.endedAt = message.endedAt.toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ImagesInfo>, I>>(base?: I): ImagesInfo {
    return ImagesInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ImagesInfo>, I>>(
    object: I,
  ): ImagesInfo {
    const message = createBaseImagesInfo();
    message.filenamePrefix = object.filenamePrefix ?? "";
    message.imageCount = object.imageCount ?? 0n;
    message.startedAt = object.startedAt ?? 0n;
    message.endedAt = object.endedAt ?? 0n;
    return message;
  },
};

messageTypeRegistry.set(ImagesInfo.$type, ImagesInfo);

function createBaseAutoParticipantEgress(): AutoParticipantEgress {
  return {
    $type: "livekit.AutoParticipantEgress",
    preset: undefined,
    advanced: undefined,
    fileOutputs: [],
    segmentOutputs: [],
  };
}

export const AutoParticipantEgress: MessageFns<
  AutoParticipantEgress,
  "livekit.AutoParticipantEgress"
> = {
  $type: "livekit.AutoParticipantEgress" as const,

  encode(
    message: AutoParticipantEgress,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.preset !== undefined) {
      writer.uint32(8).int32(message.preset);
    }
    if (message.advanced !== undefined) {
      EncodingOptions.encode(message.advanced, writer.uint32(18).fork()).join();
    }
    for (const v of message.fileOutputs) {
      EncodedFileOutput.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.segmentOutputs) {
      SegmentedFileOutput.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AutoParticipantEgress {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutoParticipantEgress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.preset = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.advanced = EncodingOptions.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fileOutputs.push(
            EncodedFileOutput.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.segmentOutputs.push(
            SegmentedFileOutput.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutoParticipantEgress {
    return {
      $type: AutoParticipantEgress.$type,
      preset: isSet(object.preset)
        ? encodingOptionsPresetFromJSON(object.preset)
        : undefined,
      advanced: isSet(object.advanced)
        ? EncodingOptions.fromJSON(object.advanced)
        : undefined,
      fileOutputs: globalThis.Array.isArray(object?.fileOutputs)
        ? object.fileOutputs.map((e: any) => EncodedFileOutput.fromJSON(e))
        : [],
      segmentOutputs: globalThis.Array.isArray(object?.segmentOutputs)
        ? object.segmentOutputs.map((e: any) => SegmentedFileOutput.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AutoParticipantEgress): unknown {
    const obj: any = {};
    if (message.preset !== undefined) {
      obj.preset = encodingOptionsPresetToJSON(message.preset);
    }
    if (message.advanced !== undefined) {
      obj.advanced = EncodingOptions.toJSON(message.advanced);
    }
    if (message.fileOutputs?.length) {
      obj.fileOutputs = message.fileOutputs.map((e) =>
        EncodedFileOutput.toJSON(e),
      );
    }
    if (message.segmentOutputs?.length) {
      obj.segmentOutputs = message.segmentOutputs.map((e) =>
        SegmentedFileOutput.toJSON(e),
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AutoParticipantEgress>, I>>(
    base?: I,
  ): AutoParticipantEgress {
    return AutoParticipantEgress.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AutoParticipantEgress>, I>>(
    object: I,
  ): AutoParticipantEgress {
    const message = createBaseAutoParticipantEgress();
    message.preset = object.preset ?? undefined;
    message.advanced =
      object.advanced !== undefined && object.advanced !== null
        ? EncodingOptions.fromPartial(object.advanced)
        : undefined;
    message.fileOutputs =
      object.fileOutputs?.map((e) => EncodedFileOutput.fromPartial(e)) || [];
    message.segmentOutputs =
      object.segmentOutputs?.map((e) => SegmentedFileOutput.fromPartial(e)) ||
      [];
    return message;
  },
};

messageTypeRegistry.set(AutoParticipantEgress.$type, AutoParticipantEgress);

function createBaseAutoTrackEgress(): AutoTrackEgress {
  return {
    $type: "livekit.AutoTrackEgress",
    filepath: "",
    disableManifest: false,
    s3: undefined,
    gcp: undefined,
    azure: undefined,
    aliOSS: undefined,
  };
}

export const AutoTrackEgress: MessageFns<
  AutoTrackEgress,
  "livekit.AutoTrackEgress"
> = {
  $type: "livekit.AutoTrackEgress" as const,

  encode(
    message: AutoTrackEgress,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.filepath !== "") {
      writer.uint32(10).string(message.filepath);
    }
    if (message.disableManifest !== false) {
      writer.uint32(40).bool(message.disableManifest);
    }
    if (message.s3 !== undefined) {
      S3Upload.encode(message.s3, writer.uint32(18).fork()).join();
    }
    if (message.gcp !== undefined) {
      GCPUpload.encode(message.gcp, writer.uint32(26).fork()).join();
    }
    if (message.azure !== undefined) {
      AzureBlobUpload.encode(message.azure, writer.uint32(34).fork()).join();
    }
    if (message.aliOSS !== undefined) {
      AliOSSUpload.encode(message.aliOSS, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutoTrackEgress {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutoTrackEgress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filepath = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.disableManifest = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.s3 = S3Upload.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.gcp = GCPUpload.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.azure = AzureBlobUpload.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.aliOSS = AliOSSUpload.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutoTrackEgress {
    return {
      $type: AutoTrackEgress.$type,
      filepath: isSet(object.filepath)
        ? globalThis.String(object.filepath)
        : "",
      disableManifest: isSet(object.disableManifest)
        ? globalThis.Boolean(object.disableManifest)
        : false,
      s3: isSet(object.s3) ? S3Upload.fromJSON(object.s3) : undefined,
      gcp: isSet(object.gcp) ? GCPUpload.fromJSON(object.gcp) : undefined,
      azure: isSet(object.azure)
        ? AzureBlobUpload.fromJSON(object.azure)
        : undefined,
      aliOSS: isSet(object.aliOSS)
        ? AliOSSUpload.fromJSON(object.aliOSS)
        : undefined,
    };
  },

  toJSON(message: AutoTrackEgress): unknown {
    const obj: any = {};
    if (message.filepath !== "") {
      obj.filepath = message.filepath;
    }
    if (message.disableManifest !== false) {
      obj.disableManifest = message.disableManifest;
    }
    if (message.s3 !== undefined) {
      obj.s3 = S3Upload.toJSON(message.s3);
    }
    if (message.gcp !== undefined) {
      obj.gcp = GCPUpload.toJSON(message.gcp);
    }
    if (message.azure !== undefined) {
      obj.azure = AzureBlobUpload.toJSON(message.azure);
    }
    if (message.aliOSS !== undefined) {
      obj.aliOSS = AliOSSUpload.toJSON(message.aliOSS);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AutoTrackEgress>, I>>(
    base?: I,
  ): AutoTrackEgress {
    return AutoTrackEgress.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AutoTrackEgress>, I>>(
    object: I,
  ): AutoTrackEgress {
    const message = createBaseAutoTrackEgress();
    message.filepath = object.filepath ?? "";
    message.disableManifest = object.disableManifest ?? false;
    message.s3 =
      object.s3 !== undefined && object.s3 !== null
        ? S3Upload.fromPartial(object.s3)
        : undefined;
    message.gcp =
      object.gcp !== undefined && object.gcp !== null
        ? GCPUpload.fromPartial(object.gcp)
        : undefined;
    message.azure =
      object.azure !== undefined && object.azure !== null
        ? AzureBlobUpload.fromPartial(object.azure)
        : undefined;
    message.aliOSS =
      object.aliOSS !== undefined && object.aliOSS !== null
        ? AliOSSUpload.fromPartial(object.aliOSS)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(AutoTrackEgress.$type, AutoTrackEgress);

type ProtoMetaMessageOptions = {
  options?: { [key: string]: any };
  fields?: { [key: string]: { [key: string]: any } };
  oneof?: { [key: string]: { [key: string]: any } };
  nested?: { [key: string]: ProtoMetaMessageOptions };
};

export interface ProtoMetadata {
  fileDescriptor: FileDescriptorProto1;
  references: { [key: string]: any };
  dependencies?: ProtoMetadata[];
  options?: {
    options?: { [key: string]: any };
    services?: {
      [key: string]: {
        options?: { [key: string]: any };
        methods?: { [key: string]: { [key: string]: any } };
      };
    };
    messages?: { [key: string]: ProtoMetaMessageOptions };
    enums?: {
      [key: string]: {
        options?: { [key: string]: any };
        values?: { [key: string]: { [key: string]: any } };
      };
    };
  };
}

export const protoMetadata = {
  fileDescriptor: {
    name: "livekit_egress.proto",
    package: "livekit",
    dependency: ["livekit_models.proto"],
    publicDependency: [],
    weakDependency: [],
    messageType: [
      {
        name: "RoomCompositeEgressRequest",
        field: [
          {
            name: "room_name",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "roomName",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "layout",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "layout",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "audio_only",
            number: 3,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "audioOnly",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "audio_mixing",
            number: 15,
            label: 1,
            type: 14,
            typeName: ".livekit.AudioMixing",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "audioMixing",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "video_only",
            number: 4,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "videoOnly",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "custom_base_url",
            number: 5,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "customBaseUrl",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "file",
            number: 6,
            label: 1,
            type: 11,
            typeName: ".livekit.EncodedFileOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "file",
            options: {
              ctype: 0,
              packed: false,
              jstype: 0,
              lazy: false,
              deprecated: true,
              weak: false,
              uninterpretedOption: [],
            },
            proto3Optional: false,
          },
          {
            name: "stream",
            number: 7,
            label: 1,
            type: 11,
            typeName: ".livekit.StreamOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "stream",
            options: {
              ctype: 0,
              packed: false,
              jstype: 0,
              lazy: false,
              deprecated: true,
              weak: false,
              uninterpretedOption: [],
            },
            proto3Optional: false,
          },
          {
            name: "segments",
            number: 10,
            label: 1,
            type: 11,
            typeName: ".livekit.SegmentedFileOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "segments",
            options: {
              ctype: 0,
              packed: false,
              jstype: 0,
              lazy: false,
              deprecated: true,
              weak: false,
              uninterpretedOption: [],
            },
            proto3Optional: false,
          },
          {
            name: "preset",
            number: 8,
            label: 1,
            type: 14,
            typeName: ".livekit.EncodingOptionsPreset",
            extendee: "",
            defaultValue: "",
            oneofIndex: 1,
            jsonName: "preset",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "advanced",
            number: 9,
            label: 1,
            type: 11,
            typeName: ".livekit.EncodingOptions",
            extendee: "",
            defaultValue: "",
            oneofIndex: 1,
            jsonName: "advanced",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "file_outputs",
            number: 11,
            label: 3,
            type: 11,
            typeName: ".livekit.EncodedFileOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "fileOutputs",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "stream_outputs",
            number: 12,
            label: 3,
            type: 11,
            typeName: ".livekit.StreamOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "streamOutputs",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "segment_outputs",
            number: 13,
            label: 3,
            type: 11,
            typeName: ".livekit.SegmentedFileOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "segmentOutputs",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "image_outputs",
            number: 14,
            label: 3,
            type: 11,
            typeName: ".livekit.ImageOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "imageOutputs",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [
          { name: "output", options: undefined },
          { name: "options", options: undefined },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "WebEgressRequest",
        field: [
          {
            name: "url",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "url",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "audio_only",
            number: 2,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "audioOnly",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "video_only",
            number: 3,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "videoOnly",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "await_start_signal",
            number: 12,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "awaitStartSignal",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "file",
            number: 4,
            label: 1,
            type: 11,
            typeName: ".livekit.EncodedFileOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "file",
            options: {
              ctype: 0,
              packed: false,
              jstype: 0,
              lazy: false,
              deprecated: true,
              weak: false,
              uninterpretedOption: [],
            },
            proto3Optional: false,
          },
          {
            name: "stream",
            number: 5,
            label: 1,
            type: 11,
            typeName: ".livekit.StreamOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "stream",
            options: {
              ctype: 0,
              packed: false,
              jstype: 0,
              lazy: false,
              deprecated: true,
              weak: false,
              uninterpretedOption: [],
            },
            proto3Optional: false,
          },
          {
            name: "segments",
            number: 6,
            label: 1,
            type: 11,
            typeName: ".livekit.SegmentedFileOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "segments",
            options: {
              ctype: 0,
              packed: false,
              jstype: 0,
              lazy: false,
              deprecated: true,
              weak: false,
              uninterpretedOption: [],
            },
            proto3Optional: false,
          },
          {
            name: "preset",
            number: 7,
            label: 1,
            type: 14,
            typeName: ".livekit.EncodingOptionsPreset",
            extendee: "",
            defaultValue: "",
            oneofIndex: 1,
            jsonName: "preset",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "advanced",
            number: 8,
            label: 1,
            type: 11,
            typeName: ".livekit.EncodingOptions",
            extendee: "",
            defaultValue: "",
            oneofIndex: 1,
            jsonName: "advanced",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "file_outputs",
            number: 9,
            label: 3,
            type: 11,
            typeName: ".livekit.EncodedFileOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "fileOutputs",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "stream_outputs",
            number: 10,
            label: 3,
            type: 11,
            typeName: ".livekit.StreamOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "streamOutputs",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "segment_outputs",
            number: 11,
            label: 3,
            type: 11,
            typeName: ".livekit.SegmentedFileOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "segmentOutputs",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "image_outputs",
            number: 13,
            label: 3,
            type: 11,
            typeName: ".livekit.ImageOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "imageOutputs",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [
          { name: "output", options: undefined },
          { name: "options", options: undefined },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "ParticipantEgressRequest",
        field: [
          {
            name: "room_name",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "roomName",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "identity",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "identity",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "screen_share",
            number: 3,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "screenShare",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "preset",
            number: 4,
            label: 1,
            type: 14,
            typeName: ".livekit.EncodingOptionsPreset",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "preset",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "advanced",
            number: 5,
            label: 1,
            type: 11,
            typeName: ".livekit.EncodingOptions",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "advanced",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "file_outputs",
            number: 6,
            label: 3,
            type: 11,
            typeName: ".livekit.EncodedFileOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "fileOutputs",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "stream_outputs",
            number: 7,
            label: 3,
            type: 11,
            typeName: ".livekit.StreamOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "streamOutputs",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "segment_outputs",
            number: 8,
            label: 3,
            type: 11,
            typeName: ".livekit.SegmentedFileOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "segmentOutputs",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "image_outputs",
            number: 9,
            label: 3,
            type: 11,
            typeName: ".livekit.ImageOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "imageOutputs",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [{ name: "options", options: undefined }],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "TrackCompositeEgressRequest",
        field: [
          {
            name: "room_name",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "roomName",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "audio_track_id",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "audioTrackId",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "video_track_id",
            number: 3,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "videoTrackId",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "file",
            number: 4,
            label: 1,
            type: 11,
            typeName: ".livekit.EncodedFileOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "file",
            options: {
              ctype: 0,
              packed: false,
              jstype: 0,
              lazy: false,
              deprecated: true,
              weak: false,
              uninterpretedOption: [],
            },
            proto3Optional: false,
          },
          {
            name: "stream",
            number: 5,
            label: 1,
            type: 11,
            typeName: ".livekit.StreamOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "stream",
            options: {
              ctype: 0,
              packed: false,
              jstype: 0,
              lazy: false,
              deprecated: true,
              weak: false,
              uninterpretedOption: [],
            },
            proto3Optional: false,
          },
          {
            name: "segments",
            number: 8,
            label: 1,
            type: 11,
            typeName: ".livekit.SegmentedFileOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "segments",
            options: {
              ctype: 0,
              packed: false,
              jstype: 0,
              lazy: false,
              deprecated: true,
              weak: false,
              uninterpretedOption: [],
            },
            proto3Optional: false,
          },
          {
            name: "preset",
            number: 6,
            label: 1,
            type: 14,
            typeName: ".livekit.EncodingOptionsPreset",
            extendee: "",
            defaultValue: "",
            oneofIndex: 1,
            jsonName: "preset",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "advanced",
            number: 7,
            label: 1,
            type: 11,
            typeName: ".livekit.EncodingOptions",
            extendee: "",
            defaultValue: "",
            oneofIndex: 1,
            jsonName: "advanced",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "file_outputs",
            number: 11,
            label: 3,
            type: 11,
            typeName: ".livekit.EncodedFileOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "fileOutputs",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "stream_outputs",
            number: 12,
            label: 3,
            type: 11,
            typeName: ".livekit.StreamOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "streamOutputs",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "segment_outputs",
            number: 13,
            label: 3,
            type: 11,
            typeName: ".livekit.SegmentedFileOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "segmentOutputs",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "image_outputs",
            number: 14,
            label: 3,
            type: 11,
            typeName: ".livekit.ImageOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "imageOutputs",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [
          { name: "output", options: undefined },
          { name: "options", options: undefined },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "TrackEgressRequest",
        field: [
          {
            name: "room_name",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "roomName",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "track_id",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "trackId",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "file",
            number: 3,
            label: 1,
            type: 11,
            typeName: ".livekit.DirectFileOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "file",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "websocket_url",
            number: 4,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "websocketUrl",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [{ name: "output", options: undefined }],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "EncodedFileOutput",
        field: [
          {
            name: "file_type",
            number: 1,
            label: 1,
            type: 14,
            typeName: ".livekit.EncodedFileType",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "fileType",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "filepath",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "filepath",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "disable_manifest",
            number: 6,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "disableManifest",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "s3",
            number: 3,
            label: 1,
            type: 11,
            typeName: ".livekit.S3Upload",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "s3",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "gcp",
            number: 4,
            label: 1,
            type: 11,
            typeName: ".livekit.GCPUpload",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "gcp",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "azure",
            number: 5,
            label: 1,
            type: 11,
            typeName: ".livekit.AzureBlobUpload",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "azure",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "aliOSS",
            number: 7,
            label: 1,
            type: 11,
            typeName: ".livekit.AliOSSUpload",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "aliOSS",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [{ name: "output", options: undefined }],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "SegmentedFileOutput",
        field: [
          {
            name: "protocol",
            number: 1,
            label: 1,
            type: 14,
            typeName: ".livekit.SegmentedFileProtocol",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "protocol",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "filename_prefix",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "filenamePrefix",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "playlist_name",
            number: 3,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "playlistName",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "live_playlist_name",
            number: 11,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "livePlaylistName",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "segment_duration",
            number: 4,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "segmentDuration",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "filename_suffix",
            number: 10,
            label: 1,
            type: 14,
            typeName: ".livekit.SegmentedFileSuffix",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "filenameSuffix",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "disable_manifest",
            number: 8,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "disableManifest",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "s3",
            number: 5,
            label: 1,
            type: 11,
            typeName: ".livekit.S3Upload",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "s3",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "gcp",
            number: 6,
            label: 1,
            type: 11,
            typeName: ".livekit.GCPUpload",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "gcp",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "azure",
            number: 7,
            label: 1,
            type: 11,
            typeName: ".livekit.AzureBlobUpload",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "azure",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "aliOSS",
            number: 9,
            label: 1,
            type: 11,
            typeName: ".livekit.AliOSSUpload",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "aliOSS",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [{ name: "output", options: undefined }],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "DirectFileOutput",
        field: [
          {
            name: "filepath",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "filepath",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "disable_manifest",
            number: 5,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "disableManifest",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "s3",
            number: 2,
            label: 1,
            type: 11,
            typeName: ".livekit.S3Upload",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "s3",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "gcp",
            number: 3,
            label: 1,
            type: 11,
            typeName: ".livekit.GCPUpload",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "gcp",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "azure",
            number: 4,
            label: 1,
            type: 11,
            typeName: ".livekit.AzureBlobUpload",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "azure",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "aliOSS",
            number: 6,
            label: 1,
            type: 11,
            typeName: ".livekit.AliOSSUpload",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "aliOSS",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [{ name: "output", options: undefined }],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "ImageOutput",
        field: [
          {
            name: "capture_interval",
            number: 1,
            label: 1,
            type: 13,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "captureInterval",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "width",
            number: 2,
            label: 1,
            type: 5,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "width",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "height",
            number: 3,
            label: 1,
            type: 5,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "height",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "filename_prefix",
            number: 4,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "filenamePrefix",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "filename_suffix",
            number: 5,
            label: 1,
            type: 14,
            typeName: ".livekit.ImageFileSuffix",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "filenameSuffix",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "image_codec",
            number: 6,
            label: 1,
            type: 14,
            typeName: ".livekit.ImageCodec",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "imageCodec",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "disable_manifest",
            number: 7,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "disableManifest",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "s3",
            number: 8,
            label: 1,
            type: 11,
            typeName: ".livekit.S3Upload",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "s3",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "gcp",
            number: 9,
            label: 1,
            type: 11,
            typeName: ".livekit.GCPUpload",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "gcp",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "azure",
            number: 10,
            label: 1,
            type: 11,
            typeName: ".livekit.AzureBlobUpload",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "azure",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "aliOSS",
            number: 11,
            label: 1,
            type: 11,
            typeName: ".livekit.AliOSSUpload",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "aliOSS",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [{ name: "output", options: undefined }],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "S3Upload",
        field: [
          {
            name: "access_key",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "accessKey",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "secret",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "secret",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "session_token",
            number: 11,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "sessionToken",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "region",
            number: 3,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "region",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "endpoint",
            number: 4,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "endpoint",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "bucket",
            number: 5,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "bucket",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "force_path_style",
            number: 6,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "forcePathStyle",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "metadata",
            number: 7,
            label: 3,
            type: 11,
            typeName: ".livekit.S3Upload.MetadataEntry",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "metadata",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "tagging",
            number: 8,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "tagging",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "content_disposition",
            number: 9,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "contentDisposition",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "proxy",
            number: 10,
            label: 1,
            type: 11,
            typeName: ".livekit.ProxyConfig",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "proxy",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [
          {
            name: "MetadataEntry",
            field: [
              {
                name: "key",
                number: 1,
                label: 1,
                type: 9,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "key",
                options: undefined,
                proto3Optional: false,
              },
              {
                name: "value",
                number: 2,
                label: 1,
                type: 9,
                typeName: "",
                extendee: "",
                defaultValue: "",
                oneofIndex: 0,
                jsonName: "value",
                options: undefined,
                proto3Optional: false,
              },
            ],
            extension: [],
            nestedType: [],
            enumType: [],
            extensionRange: [],
            oneofDecl: [],
            options: {
              messageSetWireFormat: false,
              noStandardDescriptorAccessor: false,
              deprecated: false,
              mapEntry: true,
              uninterpretedOption: [],
            },
            reservedRange: [],
            reservedName: [],
          },
        ],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "GCPUpload",
        field: [
          {
            name: "credentials",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "credentials",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "bucket",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "bucket",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "proxy",
            number: 3,
            label: 1,
            type: 11,
            typeName: ".livekit.ProxyConfig",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "proxy",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "AzureBlobUpload",
        field: [
          {
            name: "account_name",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "accountName",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "account_key",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "accountKey",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "container_name",
            number: 3,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "containerName",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "AliOSSUpload",
        field: [
          {
            name: "access_key",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "accessKey",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "secret",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "secret",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "region",
            number: 3,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "region",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "endpoint",
            number: 4,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "endpoint",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "bucket",
            number: 5,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "bucket",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "ProxyConfig",
        field: [
          {
            name: "url",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "url",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "username",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "username",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "password",
            number: 3,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "password",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "StreamOutput",
        field: [
          {
            name: "protocol",
            number: 1,
            label: 1,
            type: 14,
            typeName: ".livekit.StreamProtocol",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "protocol",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "urls",
            number: 2,
            label: 3,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "urls",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "EncodingOptions",
        field: [
          {
            name: "width",
            number: 1,
            label: 1,
            type: 5,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "width",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "height",
            number: 2,
            label: 1,
            type: 5,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "height",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "depth",
            number: 3,
            label: 1,
            type: 5,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "depth",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "framerate",
            number: 4,
            label: 1,
            type: 5,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "framerate",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "audio_codec",
            number: 5,
            label: 1,
            type: 14,
            typeName: ".livekit.AudioCodec",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "audioCodec",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "audio_bitrate",
            number: 6,
            label: 1,
            type: 5,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "audioBitrate",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "audio_quality",
            number: 11,
            label: 1,
            type: 5,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "audioQuality",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "audio_frequency",
            number: 7,
            label: 1,
            type: 5,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "audioFrequency",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "video_codec",
            number: 8,
            label: 1,
            type: 14,
            typeName: ".livekit.VideoCodec",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "videoCodec",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "video_bitrate",
            number: 9,
            label: 1,
            type: 5,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "videoBitrate",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "video_quality",
            number: 12,
            label: 1,
            type: 5,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "videoQuality",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "key_frame_interval",
            number: 10,
            label: 1,
            type: 1,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "keyFrameInterval",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "UpdateLayoutRequest",
        field: [
          {
            name: "egress_id",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "egressId",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "layout",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "layout",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "UpdateStreamRequest",
        field: [
          {
            name: "egress_id",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "egressId",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "add_output_urls",
            number: 2,
            label: 3,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "addOutputUrls",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "remove_output_urls",
            number: 3,
            label: 3,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "removeOutputUrls",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "ListEgressRequest",
        field: [
          {
            name: "room_name",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "roomName",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "egress_id",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "egressId",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "active",
            number: 3,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "active",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "ListEgressResponse",
        field: [
          {
            name: "items",
            number: 1,
            label: 3,
            type: 11,
            typeName: ".livekit.EgressInfo",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "items",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "StopEgressRequest",
        field: [
          {
            name: "egress_id",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "egressId",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "EgressInfo",
        field: [
          {
            name: "egress_id",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "egressId",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "room_id",
            number: 2,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "roomId",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "room_name",
            number: 13,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "roomName",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "source_type",
            number: 26,
            label: 1,
            type: 14,
            typeName: ".livekit.EgressSourceType",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "sourceType",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "status",
            number: 3,
            label: 1,
            type: 14,
            typeName: ".livekit.EgressStatus",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "status",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "started_at",
            number: 10,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "startedAt",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "ended_at",
            number: 11,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "endedAt",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "updated_at",
            number: 18,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "updatedAt",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "details",
            number: 21,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "details",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "error",
            number: 9,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "error",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "error_code",
            number: 22,
            label: 1,
            type: 5,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "errorCode",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "room_composite",
            number: 4,
            label: 1,
            type: 11,
            typeName: ".livekit.RoomCompositeEgressRequest",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "roomComposite",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "web",
            number: 14,
            label: 1,
            type: 11,
            typeName: ".livekit.WebEgressRequest",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "web",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "participant",
            number: 19,
            label: 1,
            type: 11,
            typeName: ".livekit.ParticipantEgressRequest",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "participant",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "track_composite",
            number: 5,
            label: 1,
            type: 11,
            typeName: ".livekit.TrackCompositeEgressRequest",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "trackComposite",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "track",
            number: 6,
            label: 1,
            type: 11,
            typeName: ".livekit.TrackEgressRequest",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "track",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "stream",
            number: 7,
            label: 1,
            type: 11,
            typeName: ".livekit.StreamInfoList",
            extendee: "",
            defaultValue: "",
            oneofIndex: 1,
            jsonName: "stream",
            options: {
              ctype: 0,
              packed: false,
              jstype: 0,
              lazy: false,
              deprecated: true,
              weak: false,
              uninterpretedOption: [],
            },
            proto3Optional: false,
          },
          {
            name: "file",
            number: 8,
            label: 1,
            type: 11,
            typeName: ".livekit.FileInfo",
            extendee: "",
            defaultValue: "",
            oneofIndex: 1,
            jsonName: "file",
            options: {
              ctype: 0,
              packed: false,
              jstype: 0,
              lazy: false,
              deprecated: true,
              weak: false,
              uninterpretedOption: [],
            },
            proto3Optional: false,
          },
          {
            name: "segments",
            number: 12,
            label: 1,
            type: 11,
            typeName: ".livekit.SegmentsInfo",
            extendee: "",
            defaultValue: "",
            oneofIndex: 1,
            jsonName: "segments",
            options: {
              ctype: 0,
              packed: false,
              jstype: 0,
              lazy: false,
              deprecated: true,
              weak: false,
              uninterpretedOption: [],
            },
            proto3Optional: false,
          },
          {
            name: "stream_results",
            number: 15,
            label: 3,
            type: 11,
            typeName: ".livekit.StreamInfo",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "streamResults",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "file_results",
            number: 16,
            label: 3,
            type: 11,
            typeName: ".livekit.FileInfo",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "fileResults",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "segment_results",
            number: 17,
            label: 3,
            type: 11,
            typeName: ".livekit.SegmentsInfo",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "segmentResults",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "image_results",
            number: 20,
            label: 3,
            type: 11,
            typeName: ".livekit.ImagesInfo",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "imageResults",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "manifest_location",
            number: 23,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "manifestLocation",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "backup_storage_used",
            number: 25,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "backupStorageUsed",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [
          { name: "request", options: undefined },
          { name: "result", options: undefined },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "StreamInfoList",
        field: [
          {
            name: "info",
            number: 1,
            label: 3,
            type: 11,
            typeName: ".livekit.StreamInfo",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "info",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: {
          messageSetWireFormat: false,
          noStandardDescriptorAccessor: false,
          deprecated: true,
          mapEntry: false,
          uninterpretedOption: [],
        },
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "StreamInfo",
        field: [
          {
            name: "url",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "url",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "started_at",
            number: 2,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "startedAt",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "ended_at",
            number: 3,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "endedAt",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "duration",
            number: 4,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "duration",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "status",
            number: 5,
            label: 1,
            type: 14,
            typeName: ".livekit.StreamInfo.Status",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "status",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "error",
            number: 6,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "error",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [
          {
            name: "Status",
            value: [
              { name: "ACTIVE", number: 0, options: undefined },
              {
                name: "FINISHED",
                number: 1,
                options: undefined,
              },
              { name: "FAILED", number: 2, options: undefined },
            ],
            options: undefined,
            reservedRange: [],
            reservedName: [],
          },
        ],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "FileInfo",
        field: [
          {
            name: "filename",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "filename",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "started_at",
            number: 2,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "startedAt",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "ended_at",
            number: 3,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "endedAt",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "duration",
            number: 6,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "duration",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "size",
            number: 4,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "size",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "location",
            number: 5,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "location",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "SegmentsInfo",
        field: [
          {
            name: "playlist_name",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "playlistName",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "live_playlist_name",
            number: 8,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "livePlaylistName",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "duration",
            number: 2,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "duration",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "size",
            number: 3,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "size",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "playlist_location",
            number: 4,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "playlistLocation",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "live_playlist_location",
            number: 9,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "livePlaylistLocation",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "segment_count",
            number: 5,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "segmentCount",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "started_at",
            number: 6,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "startedAt",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "ended_at",
            number: 7,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "endedAt",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "ImagesInfo",
        field: [
          {
            name: "filename_prefix",
            number: 4,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "filenamePrefix",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "image_count",
            number: 1,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "imageCount",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "started_at",
            number: 2,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "startedAt",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "ended_at",
            number: 3,
            label: 1,
            type: 3,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "endedAt",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "AutoParticipantEgress",
        field: [
          {
            name: "preset",
            number: 1,
            label: 1,
            type: 14,
            typeName: ".livekit.EncodingOptionsPreset",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "preset",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "advanced",
            number: 2,
            label: 1,
            type: 11,
            typeName: ".livekit.EncodingOptions",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "advanced",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "file_outputs",
            number: 3,
            label: 3,
            type: 11,
            typeName: ".livekit.EncodedFileOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "fileOutputs",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "segment_outputs",
            number: 4,
            label: 3,
            type: 11,
            typeName: ".livekit.SegmentedFileOutput",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "segmentOutputs",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [{ name: "options", options: undefined }],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "AutoTrackEgress",
        field: [
          {
            name: "filepath",
            number: 1,
            label: 1,
            type: 9,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "filepath",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "disable_manifest",
            number: 5,
            label: 1,
            type: 8,
            typeName: "",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "disableManifest",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "s3",
            number: 2,
            label: 1,
            type: 11,
            typeName: ".livekit.S3Upload",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "s3",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "gcp",
            number: 3,
            label: 1,
            type: 11,
            typeName: ".livekit.GCPUpload",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "gcp",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "azure",
            number: 4,
            label: 1,
            type: 11,
            typeName: ".livekit.AzureBlobUpload",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "azure",
            options: undefined,
            proto3Optional: false,
          },
          {
            name: "aliOSS",
            number: 6,
            label: 1,
            type: 11,
            typeName: ".livekit.AliOSSUpload",
            extendee: "",
            defaultValue: "",
            oneofIndex: 0,
            jsonName: "aliOSS",
            options: undefined,
            proto3Optional: false,
          },
        ],
        extension: [],
        nestedType: [],
        enumType: [],
        extensionRange: [],
        oneofDecl: [{ name: "output", options: undefined }],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
    ],
    enumType: [
      {
        name: "EncodedFileType",
        value: [
          { name: "DEFAULT_FILETYPE", number: 0, options: undefined },
          {
            name: "MP4",
            number: 1,
            options: undefined,
          },
          { name: "OGG", number: 2, options: undefined },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "SegmentedFileProtocol",
        value: [
          {
            name: "DEFAULT_SEGMENTED_FILE_PROTOCOL",
            number: 0,
            options: undefined,
          },
          {
            name: "HLS_PROTOCOL",
            number: 1,
            options: undefined,
          },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "SegmentedFileSuffix",
        value: [
          { name: "INDEX", number: 0, options: undefined },
          {
            name: "TIMESTAMP",
            number: 1,
            options: undefined,
          },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "ImageFileSuffix",
        value: [
          { name: "IMAGE_SUFFIX_INDEX", number: 0, options: undefined },
          {
            name: "IMAGE_SUFFIX_TIMESTAMP",
            number: 1,
            options: undefined,
          },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "StreamProtocol",
        value: [
          { name: "DEFAULT_PROTOCOL", number: 0, options: undefined },
          {
            name: "RTMP",
            number: 1,
            options: undefined,
          },
          { name: "SRT", number: 2, options: undefined },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "AudioMixing",
        value: [
          { name: "DEFAULT_MIXING", number: 0, options: undefined },
          {
            name: "DUAL_CHANNEL_AGENT",
            number: 1,
            options: undefined,
          },
          { name: "DUAL_CHANNEL_ALTERNATE", number: 2, options: undefined },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "EncodingOptionsPreset",
        value: [
          { name: "H264_720P_30", number: 0, options: undefined },
          { name: "H264_720P_60", number: 1, options: undefined },
          { name: "H264_1080P_30", number: 2, options: undefined },
          { name: "H264_1080P_60", number: 3, options: undefined },
          { name: "PORTRAIT_H264_720P_30", number: 4, options: undefined },
          { name: "PORTRAIT_H264_720P_60", number: 5, options: undefined },
          { name: "PORTRAIT_H264_1080P_30", number: 6, options: undefined },
          { name: "PORTRAIT_H264_1080P_60", number: 7, options: undefined },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "EgressStatus",
        value: [
          { name: "EGRESS_STARTING", number: 0, options: undefined },
          { name: "EGRESS_ACTIVE", number: 1, options: undefined },
          { name: "EGRESS_ENDING", number: 2, options: undefined },
          { name: "EGRESS_COMPLETE", number: 3, options: undefined },
          { name: "EGRESS_FAILED", number: 4, options: undefined },
          { name: "EGRESS_ABORTED", number: 5, options: undefined },
          { name: "EGRESS_LIMIT_REACHED", number: 6, options: undefined },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
      {
        name: "EgressSourceType",
        value: [
          { name: "EGRESS_SOURCE_TYPE_WEB", number: 0, options: undefined },
          {
            name: "EGRESS_SOURCE_TYPE_SDK",
            number: 1,
            options: undefined,
          },
        ],
        options: undefined,
        reservedRange: [],
        reservedName: [],
      },
    ],
    service: [
      {
        name: "Egress",
        method: [
          {
            name: "StartRoomCompositeEgress",
            inputType: ".livekit.RoomCompositeEgressRequest",
            outputType: ".livekit.EgressInfo",
            options: undefined,
            clientStreaming: false,
            serverStreaming: false,
          },
          {
            name: "StartWebEgress",
            inputType: ".livekit.WebEgressRequest",
            outputType: ".livekit.EgressInfo",
            options: undefined,
            clientStreaming: false,
            serverStreaming: false,
          },
          {
            name: "StartParticipantEgress",
            inputType: ".livekit.ParticipantEgressRequest",
            outputType: ".livekit.EgressInfo",
            options: undefined,
            clientStreaming: false,
            serverStreaming: false,
          },
          {
            name: "StartTrackCompositeEgress",
            inputType: ".livekit.TrackCompositeEgressRequest",
            outputType: ".livekit.EgressInfo",
            options: undefined,
            clientStreaming: false,
            serverStreaming: false,
          },
          {
            name: "StartTrackEgress",
            inputType: ".livekit.TrackEgressRequest",
            outputType: ".livekit.EgressInfo",
            options: undefined,
            clientStreaming: false,
            serverStreaming: false,
          },
          {
            name: "UpdateLayout",
            inputType: ".livekit.UpdateLayoutRequest",
            outputType: ".livekit.EgressInfo",
            options: undefined,
            clientStreaming: false,
            serverStreaming: false,
          },
          {
            name: "UpdateStream",
            inputType: ".livekit.UpdateStreamRequest",
            outputType: ".livekit.EgressInfo",
            options: undefined,
            clientStreaming: false,
            serverStreaming: false,
          },
          {
            name: "ListEgress",
            inputType: ".livekit.ListEgressRequest",
            outputType: ".livekit.ListEgressResponse",
            options: undefined,
            clientStreaming: false,
            serverStreaming: false,
          },
          {
            name: "StopEgress",
            inputType: ".livekit.StopEgressRequest",
            outputType: ".livekit.EgressInfo",
            options: undefined,
            clientStreaming: false,
            serverStreaming: false,
          },
        ],
        options: undefined,
      },
    ],
    extension: [],
    options: {
      javaPackage: "",
      javaOuterClassname: "",
      javaMultipleFiles: false,
      javaGenerateEqualsAndHash: false,
      javaStringCheckUtf8: false,
      optimizeFor: 1,
      goPackage: "github.com/livekit/protocol/livekit",
      ccGenericServices: false,
      javaGenericServices: false,
      pyGenericServices: false,
      phpGenericServices: false,
      deprecated: false,
      ccEnableArenas: true,
      objcClassPrefix: "",
      csharpNamespace: "LiveKit.Proto",
      swiftPrefix: "",
      phpClassPrefix: "",
      phpNamespace: "",
      phpMetadataNamespace: "",
      rubyPackage: "LiveKit::Proto",
      uninterpretedOption: [],
    },
    sourceCodeInfo: {
      location: [
        {
          path: [6, 0, 2, 0],
          span: [26, 2, 80],
          leadingComments:
            " start recording or streaming a room, participant, or tracks\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [6, 0, 2, 5],
          span: [33, 2, 61],
          leadingComments: " update web composite layout\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [6, 0, 2, 6],
          span: [36, 2, 61],
          leadingComments: " add or remove stream endpoints\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [6, 0, 2, 7],
          span: [39, 2, 65],
          leadingComments: " list available egress\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [6, 0, 2, 8],
          span: [42, 2, 57],
          leadingComments: " stop a recording or stream\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 0],
          span: [46, 0, 66, 1],
          leadingComments: " composite using a web browser\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 0, 2, 0],
          span: [47, 2, 23],
          leadingComments: "",
          trailingComments: " required\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 0, 2, 1],
          span: [48, 2, 20],
          leadingComments: "",
          trailingComments: " (optional)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 0, 2, 2],
          span: [49, 2, 22],
          leadingComments: "",
          trailingComments: " (default false)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 0, 2, 3],
          span: [50, 2, 32],
          leadingComments: "",
          trailingComments:
            " only applies to audio_only egress (default DEFAULT_MIXING)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 0, 2, 4],
          span: [51, 2, 22],
          leadingComments: "",
          trailingComments: " (default false)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 0, 2, 5],
          span: [52, 2, 29],
          leadingComments: "",
          trailingComments:
            " template base url (default https://recorder.livekit.io)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 0, 8, 0],
          span: [53, 2, 57, 3],
          leadingComments: "",
          trailingComments: " deprecated (use _output fields)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 0, 2, 9],
          span: [59, 4, 37],
          leadingComments: "",
          trailingComments: " (default H264_720P_30)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 0, 2, 10],
          span: [60, 4, 33],
          leadingComments: "",
          trailingComments: " (optional)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 1],
          span: [69, 0, 87, 1],
          leadingComments: " record any website\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 1, 8, 0],
          span: [74, 2, 78, 3],
          leadingComments: "",
          trailingComments: " deprecated (use _output fields)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 2],
          span: [90, 0, 102, 1],
          leadingComments:
            " record audio and video from a single participant\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 2, 2, 0],
          span: [91, 2, 23],
          leadingComments: "",
          trailingComments: " required\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 2, 2, 1],
          span: [92, 2, 22],
          leadingComments: "",
          trailingComments: " required\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 2, 2, 2],
          span: [93, 2, 24],
          leadingComments: "",
          trailingComments: " (default false)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 2, 2, 3],
          span: [95, 4, 37],
          leadingComments: "",
          trailingComments: " (default H264_720P_30)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 2, 2, 4],
          span: [96, 4, 33],
          leadingComments: "",
          trailingComments: " (optional)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 3],
          span: [105, 0, 122, 1],
          leadingComments:
            " containerize up to one audio and one video track\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 3, 2, 0],
          span: [106, 2, 23],
          leadingComments: "",
          trailingComments: " required\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 3, 2, 1],
          span: [107, 2, 28],
          leadingComments: "",
          trailingComments: " (optional)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 3, 2, 2],
          span: [108, 2, 28],
          leadingComments: "",
          trailingComments: " (optional)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 3, 8, 0],
          span: [109, 2, 113, 3],
          leadingComments: "",
          trailingComments: " deprecated (use _output fields)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 3, 2, 6],
          span: [115, 4, 37],
          leadingComments: "",
          trailingComments: " (default H264_720P_30)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 3, 2, 7],
          span: [116, 4, 33],
          leadingComments: "",
          trailingComments: " (optional)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 4],
          span: [125, 0, 132, 1],
          leadingComments: " record tracks individually, without transcoding\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 4, 2, 0],
          span: [126, 2, 23],
          leadingComments: "",
          trailingComments: " required\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 4, 2, 1],
          span: [127, 2, 22],
          leadingComments: "",
          trailingComments: " required\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 4, 8, 0],
          span: [128, 2, 131, 3],
          leadingComments: "",
          trailingComments: " required\n",
          leadingDetachedComments: [],
        },
        {
          path: [5, 0, 2, 0],
          span: [135, 2, 23],
          leadingComments: "",
          trailingComments: " file type chosen based on codecs\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 5, 2, 0],
          span: [141, 2, 32],
          leadingComments: "",
          trailingComments: " (optional)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 5, 2, 1],
          span: [142, 2, 22],
          leadingComments: "",
          trailingComments:
            " see egress docs for templating (default {room_name}-{time})\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 5, 2, 2],
          span: [143, 2, 28],
          leadingComments: "",
          trailingComments:
            " disable upload of manifest file (default false)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 6],
          span: [163, 0, 177, 1],
          leadingComments:
            " Used to generate HLS segments or other kind of segmented output\n",
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [4, 6, 2, 0],
          span: [164, 2, 37],
          leadingComments: "",
          trailingComments: " (optional)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 6, 2, 1],
          span: [165, 2, 29],
          leadingComments: "",
          trailingComments: " (optional)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 6, 2, 2],
          span: [166, 2, 27],
          leadingComments: "",
          trailingComments: " (optional)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 6, 2, 3],
          span: [167, 2, 33],
          leadingComments: "",
          trailingComments:
            " (optional, disabled if not provided). Path of a live playlist\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 6, 2, 4],
          span: [168, 2, 30],
          leadingComments: "",
          trailingComments: " in seconds (optional)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 6, 2, 5],
          span: [169, 2, 43],
          leadingComments: "",
          trailingComments: " (optional, default INDEX)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 6, 2, 6],
          span: [170, 2, 28],
          leadingComments: "",
          trailingComments:
            " disable upload of manifest file (default false)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 6, 8, 0],
          span: [171, 2, 176, 3],
          leadingComments: "",
          trailingComments: " required\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 7, 2, 0],
          span: [180, 2, 22],
          leadingComments: "",
          trailingComments:
            " see egress docs for templating (default {track_id}-{time})\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 7, 2, 1],
          span: [181, 2, 28],
          leadingComments: "",
          trailingComments:
            " disable upload of manifest file (default false)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 8, 2, 0],
          span: [196, 2, 30],
          leadingComments: "",
          trailingComments: " in seconds (required)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 8, 2, 1],
          span: [197, 2, 18],
          leadingComments: "",
          trailingComments: " (optional, defaults to track width)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 8, 2, 2],
          span: [198, 2, 19],
          leadingComments: "",
          trailingComments: " (optional, defaults to track height)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 8, 2, 3],
          span: [199, 2, 29],
          leadingComments: "",
          trailingComments: " (optional)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 8, 2, 4],
          span: [200, 2, 38],
          leadingComments: "",
          trailingComments: " (optional, default INDEX)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 8, 2, 5],
          span: [201, 2, 29],
          leadingComments: "",
          trailingComments: " (optional)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 8, 2, 6],
          span: [202, 2, 28],
          leadingComments: "",
          trailingComments:
            " disable upload of manifest file (default false)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 8, 8, 0],
          span: [203, 2, 208, 3],
          leadingComments: "",
          trailingComments: " required\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 9, 2, 9],
          span: [221, 2, 33],
          leadingComments: "",
          trailingComments: " Content-Disposition header\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 10, 2, 0],
          span: [227, 2, 25],
          leadingComments:
            ' service account credentials serialized in JSON "credentials.json"\n',
          trailingComments: "",
          leadingDetachedComments: [],
        },
        {
          path: [5, 4, 2, 0],
          span: [253, 2, 23],
          leadingComments: "",
          trailingComments: " protocol chosen based on urls\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 14, 2, 0],
          span: [259, 2, 30],
          leadingComments: "",
          trailingComments: " required\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 14, 2, 1],
          span: [260, 2, 27],
          leadingComments: "",
          trailingComments: " required\n",
          leadingDetachedComments: [],
        },
        {
          path: [5, 5, 2, 0],
          span: [264, 2, 21],
          leadingComments: "",
          trailingComments: " all users are mixed together\n",
          leadingDetachedComments: [],
        },
        {
          path: [5, 5, 2, 1],
          span: [265, 2, 25],
          leadingComments: "",
          trailingComments:
            " agent audio in the left channel, all other audio in the right channel\n",
          leadingDetachedComments: [],
        },
        {
          path: [5, 5, 2, 2],
          span: [266, 2, 29],
          leadingComments: "",
          trailingComments:
            " each new audio track alternates between left and right channels\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 15, 2, 0],
          span: [270, 2, 18],
          leadingComments: "",
          trailingComments: " (default 1920)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 15, 2, 1],
          span: [271, 2, 19],
          leadingComments: "",
          trailingComments: " (default 1080)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 15, 2, 2],
          span: [272, 2, 18],
          leadingComments: "",
          trailingComments: " (default 24)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 15, 2, 3],
          span: [273, 2, 22],
          leadingComments: "",
          trailingComments: " (default 30)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 15, 2, 4],
          span: [274, 2, 29],
          leadingComments: "",
          trailingComments: " (default OPUS)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 15, 2, 5],
          span: [275, 2, 26],
          leadingComments: "",
          trailingComments: " (default 128)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 15, 2, 6],
          span: [276, 2, 27],
          leadingComments: "",
          trailingComments: " quality setting on audio encoder\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 15, 2, 7],
          span: [277, 2, 28],
          leadingComments: "",
          trailingComments: " (default 44100)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 15, 2, 8],
          span: [278, 2, 29],
          leadingComments: "",
          trailingComments: " (default H264_MAIN)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 15, 2, 9],
          span: [279, 2, 26],
          leadingComments: "",
          trailingComments: " (default 4500)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 15, 2, 10],
          span: [280, 2, 27],
          leadingComments: "",
          trailingComments: " quality setting on video encoder\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 15, 2, 11],
          span: [281, 2, 33],
          leadingComments: "",
          trailingComments:
            " in seconds (default 4s for streaming, segment duration for segmented output, encoder default for files)\n",
          leadingDetachedComments: [],
        },
        {
          path: [5, 6, 2, 0],
          span: [285, 2, 19],
          leadingComments: "",
          trailingComments: "  1280x720, 30fps, 3000kpbs, H.264_MAIN / OPUS\n",
          leadingDetachedComments: [],
        },
        {
          path: [5, 6, 2, 1],
          span: [286, 2, 19],
          leadingComments: "",
          trailingComments: "  1280x720, 60fps, 4500kbps, H.264_MAIN / OPUS\n",
          leadingDetachedComments: [],
        },
        {
          path: [5, 6, 2, 2],
          span: [287, 2, 20],
          leadingComments: "",
          trailingComments: " 1920x1080, 30fps, 4500kbps, H.264_MAIN / OPUS\n",
          leadingDetachedComments: [],
        },
        {
          path: [5, 6, 2, 3],
          span: [288, 2, 20],
          leadingComments: "",
          trailingComments: " 1920x1080, 60fps, 6000kbps, H.264_MAIN / OPUS\n",
          leadingDetachedComments: [],
        },
        {
          path: [5, 6, 2, 4],
          span: [289, 2, 28],
          leadingComments: "",
          trailingComments: "  720x1280, 30fps, 3000kpbs, H.264_MAIN / OPUS\n",
          leadingDetachedComments: [],
        },
        {
          path: [5, 6, 2, 5],
          span: [290, 2, 28],
          leadingComments: "",
          trailingComments: "  720x1280, 60fps, 4500kbps, H.264_MAIN / OPUS\n",
          leadingDetachedComments: [],
        },
        {
          path: [5, 6, 2, 6],
          span: [291, 2, 29],
          leadingComments: "",
          trailingComments: " 1080x1920, 30fps, 4500kbps, H.264_MAIN / OPUS\n",
          leadingDetachedComments: [],
        },
        {
          path: [5, 6, 2, 7],
          span: [292, 2, 29],
          leadingComments: "",
          trailingComments: " 1080x1920, 60fps, 6000kbps, H.264_MAIN / OPUS\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 18, 2, 0],
          span: [307, 2, 23],
          leadingComments: "",
          trailingComments: " (optional, filter by room name)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 18, 2, 1],
          span: [308, 2, 23],
          leadingComments: "",
          trailingComments: " (optional, filter by egress ID)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 18, 2, 2],
          span: [309, 2, 18],
          leadingComments: "",
          trailingComments: " (optional, list active egress only)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 21, 8, 1],
          span: [354, 2, 358, 3],
          leadingComments: "",
          trailingComments: " deprecated (use _result fields)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 21, 2, 24],
          span: [364, 2, 32],
          leadingComments: "",
          trailingComments: " next ID: 27\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 27, 2, 0],
          span: [418, 4, 37],
          leadingComments: "",
          trailingComments: " (default H264_720P_30)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 27, 2, 1],
          span: [419, 4, 33],
          leadingComments: "",
          trailingComments: " (optional)\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 28, 2, 0],
          span: [426, 2, 22],
          leadingComments: "",
          trailingComments:
            " see docs for templating (default {track_id}-{time})\n",
          leadingDetachedComments: [],
        },
        {
          path: [4, 28, 2, 1],
          span: [427, 2, 28],
          leadingComments: "",
          trailingComments:
            " disables upload of json manifest file (default false)\n",
          leadingDetachedComments: [],
        },
      ],
    },
    syntax: "proto3",
  },
  references: {
    ".livekit.EncodedFileType": EncodedFileType,
    ".livekit.SegmentedFileProtocol": SegmentedFileProtocol,
    ".livekit.SegmentedFileSuffix": SegmentedFileSuffix,
    ".livekit.ImageFileSuffix": ImageFileSuffix,
    ".livekit.StreamProtocol": StreamProtocol,
    ".livekit.AudioMixing": AudioMixing,
    ".livekit.EncodingOptionsPreset": EncodingOptionsPreset,
    ".livekit.EgressStatus": EgressStatus,
    ".livekit.EgressSourceType": EgressSourceType,
    ".livekit.RoomCompositeEgressRequest": RoomCompositeEgressRequest,
    ".livekit.WebEgressRequest": WebEgressRequest,
    ".livekit.ParticipantEgressRequest": ParticipantEgressRequest,
    ".livekit.TrackCompositeEgressRequest": TrackCompositeEgressRequest,
    ".livekit.TrackEgressRequest": TrackEgressRequest,
    ".livekit.EncodedFileOutput": EncodedFileOutput,
    ".livekit.SegmentedFileOutput": SegmentedFileOutput,
    ".livekit.DirectFileOutput": DirectFileOutput,
    ".livekit.ImageOutput": ImageOutput,
    ".livekit.S3Upload": S3Upload,
    ".livekit.S3Upload.MetadataEntry": S3Upload_MetadataEntry,
    ".livekit.GCPUpload": GCPUpload,
    ".livekit.AzureBlobUpload": AzureBlobUpload,
    ".livekit.AliOSSUpload": AliOSSUpload,
    ".livekit.ProxyConfig": ProxyConfig,
    ".livekit.StreamOutput": StreamOutput,
    ".livekit.EncodingOptions": EncodingOptions,
    ".livekit.UpdateLayoutRequest": UpdateLayoutRequest,
    ".livekit.UpdateStreamRequest": UpdateStreamRequest,
    ".livekit.ListEgressRequest": ListEgressRequest,
    ".livekit.ListEgressResponse": ListEgressResponse,
    ".livekit.StopEgressRequest": StopEgressRequest,
    ".livekit.EgressInfo": EgressInfo,
    ".livekit.StreamInfoList": StreamInfoList,
    ".livekit.StreamInfo": StreamInfo,
    ".livekit.StreamInfo.Status": StreamInfo_Status,
    ".livekit.FileInfo": FileInfo,
    ".livekit.SegmentsInfo": SegmentsInfo,
    ".livekit.ImagesInfo": ImagesInfo,
    ".livekit.AutoParticipantEgress": AutoParticipantEgress,
    ".livekit.AutoTrackEgress": AutoTrackEgress,
  },
  dependencies: [protoMetadata1],
} as const satisfies ProtoMetadata;

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | bigint
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never;
    };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
