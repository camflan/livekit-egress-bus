// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v4.25.6
// source: internal.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "./google/protobuf/any.proto";

export const protobufPackage = "internal";

export interface Msg {
  typeUrl: string;
  value: Buffer;
  channel: string;
}

export interface Channel {
  channel: string;
}

export interface Request {
  requestId: string;
  clientId: string;
  sentAt: number;
  expiry: number;
  multi: boolean;
  request: Any | undefined;
  metadata: { [key: string]: string };
  rawRequest: Buffer;
}

export interface Request_MetadataEntry {
  key: string;
  value: string;
}

export interface Response {
  requestId: string;
  serverId: string;
  sentAt: number;
  response: Any | undefined;
  error: string;
  code: string;
  rawResponse: Buffer;
  errorDetails: Any[];
}

export interface ClaimRequest {
  requestId: string;
  serverId: string;
  affinity: number;
}

export interface ClaimResponse {
  requestId: string;
  serverId: string;
}

export interface Stream {
  streamId: string;
  requestId: string;
  sentAt: number;
  expiry: number;
  open?: StreamOpen | undefined;
  message?: StreamMessage | undefined;
  ack?: StreamAck | undefined;
  close?: StreamClose | undefined;
}

export interface StreamOpen {
  nodeId: string;
  metadata: { [key: string]: string };
}

export interface StreamOpen_MetadataEntry {
  key: string;
  value: string;
}

export interface StreamMessage {
  message: Any | undefined;
  rawMessage: Buffer;
}

export interface StreamAck {
}

export interface StreamClose {
  error: string;
  code: string;
}

function createBaseMsg(): Msg {
  return { typeUrl: "", value: Buffer.alloc(0), channel: "" };
}

export const Msg: MessageFns<Msg> = {
  encode(message: Msg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.typeUrl !== "") {
      writer.uint32(10).string(message.typeUrl);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    if (message.channel !== "") {
      writer.uint32(26).string(message.channel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Msg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.typeUrl = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Buffer.from(reader.bytes());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.channel = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Msg {
    return {
      typeUrl: isSet(object.typeUrl) ? globalThis.String(object.typeUrl) : "",
      value: isSet(object.value) ? Buffer.from(bytesFromBase64(object.value)) : Buffer.alloc(0),
      channel: isSet(object.channel) ? globalThis.String(object.channel) : "",
    };
  },

  toJSON(message: Msg): unknown {
    const obj: any = {};
    if (message.typeUrl !== "") {
      obj.typeUrl = message.typeUrl;
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Msg>, I>>(base?: I): Msg {
    return Msg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Msg>, I>>(object: I): Msg {
    const message = createBaseMsg();
    message.typeUrl = object.typeUrl ?? "";
    message.value = object.value ?? Buffer.alloc(0);
    message.channel = object.channel ?? "";
    return message;
  },
};

function createBaseChannel(): Channel {
  return { channel: "" };
}

export const Channel: MessageFns<Channel> = {
  encode(message: Channel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.channel !== "") {
      writer.uint32(26).string(message.channel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Channel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.channel = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Channel {
    return { channel: isSet(object.channel) ? globalThis.String(object.channel) : "" };
  },

  toJSON(message: Channel): unknown {
    const obj: any = {};
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Channel>, I>>(base?: I): Channel {
    return Channel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Channel>, I>>(object: I): Channel {
    const message = createBaseChannel();
    message.channel = object.channel ?? "";
    return message;
  },
};

function createBaseRequest(): Request {
  return {
    requestId: "",
    clientId: "",
    sentAt: 0,
    expiry: 0,
    multi: false,
    request: undefined,
    metadata: {},
    rawRequest: Buffer.alloc(0),
  };
}

export const Request: MessageFns<Request> = {
  encode(message: Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.sentAt !== 0) {
      writer.uint32(24).int64(message.sentAt);
    }
    if (message.expiry !== 0) {
      writer.uint32(32).int64(message.expiry);
    }
    if (message.multi !== false) {
      writer.uint32(40).bool(message.multi);
    }
    if (message.request !== undefined) {
      Any.encode(message.request, writer.uint32(50).fork()).join();
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      Request_MetadataEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    if (message.rawRequest.length !== 0) {
      writer.uint32(66).bytes(message.rawRequest);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sentAt = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.expiry = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.multi = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.request = Any.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = Request_MetadataEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.metadata[entry7.key] = entry7.value;
          }
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.rawRequest = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      sentAt: isSet(object.sentAt) ? globalThis.Number(object.sentAt) : 0,
      expiry: isSet(object.expiry) ? globalThis.Number(object.expiry) : 0,
      multi: isSet(object.multi) ? globalThis.Boolean(object.multi) : false,
      request: isSet(object.request) ? Any.fromJSON(object.request) : undefined,
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      rawRequest: isSet(object.rawRequest) ? Buffer.from(bytesFromBase64(object.rawRequest)) : Buffer.alloc(0),
    };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.sentAt !== 0) {
      obj.sentAt = Math.round(message.sentAt);
    }
    if (message.expiry !== 0) {
      obj.expiry = Math.round(message.expiry);
    }
    if (message.multi !== false) {
      obj.multi = message.multi;
    }
    if (message.request !== undefined) {
      obj.request = Any.toJSON(message.request);
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    if (message.rawRequest.length !== 0) {
      obj.rawRequest = base64FromBytes(message.rawRequest);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request>, I>>(base?: I): Request {
    return Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request>, I>>(object: I): Request {
    const message = createBaseRequest();
    message.requestId = object.requestId ?? "";
    message.clientId = object.clientId ?? "";
    message.sentAt = object.sentAt ?? 0;
    message.expiry = object.expiry ?? 0;
    message.multi = object.multi ?? false;
    message.request = (object.request !== undefined && object.request !== null)
      ? Any.fromPartial(object.request)
      : undefined;
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.rawRequest = object.rawRequest ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseRequest_MetadataEntry(): Request_MetadataEntry {
  return { key: "", value: "" };
}

export const Request_MetadataEntry: MessageFns<Request_MetadataEntry> = {
  encode(message: Request_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Request_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Request_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request_MetadataEntry>, I>>(base?: I): Request_MetadataEntry {
    return Request_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request_MetadataEntry>, I>>(object: I): Request_MetadataEntry {
    const message = createBaseRequest_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseResponse(): Response {
  return {
    requestId: "",
    serverId: "",
    sentAt: 0,
    response: undefined,
    error: "",
    code: "",
    rawResponse: Buffer.alloc(0),
    errorDetails: [],
  };
}

export const Response: MessageFns<Response> = {
  encode(message: Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.serverId !== "") {
      writer.uint32(18).string(message.serverId);
    }
    if (message.sentAt !== 0) {
      writer.uint32(24).int64(message.sentAt);
    }
    if (message.response !== undefined) {
      Any.encode(message.response, writer.uint32(34).fork()).join();
    }
    if (message.error !== "") {
      writer.uint32(42).string(message.error);
    }
    if (message.code !== "") {
      writer.uint32(50).string(message.code);
    }
    if (message.rawResponse.length !== 0) {
      writer.uint32(58).bytes(message.rawResponse);
    }
    for (const v of message.errorDetails) {
      Any.encode(v!, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.serverId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sentAt = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.response = Any.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.error = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.rawResponse = Buffer.from(reader.bytes());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.errorDetails.push(Any.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      serverId: isSet(object.serverId) ? globalThis.String(object.serverId) : "",
      sentAt: isSet(object.sentAt) ? globalThis.Number(object.sentAt) : 0,
      response: isSet(object.response) ? Any.fromJSON(object.response) : undefined,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      rawResponse: isSet(object.rawResponse) ? Buffer.from(bytesFromBase64(object.rawResponse)) : Buffer.alloc(0),
      errorDetails: globalThis.Array.isArray(object?.errorDetails)
        ? object.errorDetails.map((e: any) => Any.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.serverId !== "") {
      obj.serverId = message.serverId;
    }
    if (message.sentAt !== 0) {
      obj.sentAt = Math.round(message.sentAt);
    }
    if (message.response !== undefined) {
      obj.response = Any.toJSON(message.response);
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.rawResponse.length !== 0) {
      obj.rawResponse = base64FromBytes(message.rawResponse);
    }
    if (message.errorDetails?.length) {
      obj.errorDetails = message.errorDetails.map((e) => Any.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.requestId = object.requestId ?? "";
    message.serverId = object.serverId ?? "";
    message.sentAt = object.sentAt ?? 0;
    message.response = (object.response !== undefined && object.response !== null)
      ? Any.fromPartial(object.response)
      : undefined;
    message.error = object.error ?? "";
    message.code = object.code ?? "";
    message.rawResponse = object.rawResponse ?? Buffer.alloc(0);
    message.errorDetails = object.errorDetails?.map((e) => Any.fromPartial(e)) || [];
    return message;
  },
};

function createBaseClaimRequest(): ClaimRequest {
  return { requestId: "", serverId: "", affinity: 0 };
}

export const ClaimRequest: MessageFns<ClaimRequest> = {
  encode(message: ClaimRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.serverId !== "") {
      writer.uint32(18).string(message.serverId);
    }
    if (message.affinity !== 0) {
      writer.uint32(29).float(message.affinity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClaimRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClaimRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.serverId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.affinity = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClaimRequest {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      serverId: isSet(object.serverId) ? globalThis.String(object.serverId) : "",
      affinity: isSet(object.affinity) ? globalThis.Number(object.affinity) : 0,
    };
  },

  toJSON(message: ClaimRequest): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.serverId !== "") {
      obj.serverId = message.serverId;
    }
    if (message.affinity !== 0) {
      obj.affinity = message.affinity;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClaimRequest>, I>>(base?: I): ClaimRequest {
    return ClaimRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClaimRequest>, I>>(object: I): ClaimRequest {
    const message = createBaseClaimRequest();
    message.requestId = object.requestId ?? "";
    message.serverId = object.serverId ?? "";
    message.affinity = object.affinity ?? 0;
    return message;
  },
};

function createBaseClaimResponse(): ClaimResponse {
  return { requestId: "", serverId: "" };
}

export const ClaimResponse: MessageFns<ClaimResponse> = {
  encode(message: ClaimResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.serverId !== "") {
      writer.uint32(18).string(message.serverId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClaimResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClaimResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.serverId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClaimResponse {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      serverId: isSet(object.serverId) ? globalThis.String(object.serverId) : "",
    };
  },

  toJSON(message: ClaimResponse): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.serverId !== "") {
      obj.serverId = message.serverId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClaimResponse>, I>>(base?: I): ClaimResponse {
    return ClaimResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClaimResponse>, I>>(object: I): ClaimResponse {
    const message = createBaseClaimResponse();
    message.requestId = object.requestId ?? "";
    message.serverId = object.serverId ?? "";
    return message;
  },
};

function createBaseStream(): Stream {
  return {
    streamId: "",
    requestId: "",
    sentAt: 0,
    expiry: 0,
    open: undefined,
    message: undefined,
    ack: undefined,
    close: undefined,
  };
}

export const Stream: MessageFns<Stream> = {
  encode(message: Stream, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.streamId !== "") {
      writer.uint32(10).string(message.streamId);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.sentAt !== 0) {
      writer.uint32(24).int64(message.sentAt);
    }
    if (message.expiry !== 0) {
      writer.uint32(32).int64(message.expiry);
    }
    if (message.open !== undefined) {
      StreamOpen.encode(message.open, writer.uint32(50).fork()).join();
    }
    if (message.message !== undefined) {
      StreamMessage.encode(message.message, writer.uint32(58).fork()).join();
    }
    if (message.ack !== undefined) {
      StreamAck.encode(message.ack, writer.uint32(66).fork()).join();
    }
    if (message.close !== undefined) {
      StreamClose.encode(message.close, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Stream {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStream();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.streamId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sentAt = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.expiry = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.open = StreamOpen.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.message = StreamMessage.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.ack = StreamAck.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.close = StreamClose.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Stream {
    return {
      streamId: isSet(object.streamId) ? globalThis.String(object.streamId) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      sentAt: isSet(object.sentAt) ? globalThis.Number(object.sentAt) : 0,
      expiry: isSet(object.expiry) ? globalThis.Number(object.expiry) : 0,
      open: isSet(object.open) ? StreamOpen.fromJSON(object.open) : undefined,
      message: isSet(object.message) ? StreamMessage.fromJSON(object.message) : undefined,
      ack: isSet(object.ack) ? StreamAck.fromJSON(object.ack) : undefined,
      close: isSet(object.close) ? StreamClose.fromJSON(object.close) : undefined,
    };
  },

  toJSON(message: Stream): unknown {
    const obj: any = {};
    if (message.streamId !== "") {
      obj.streamId = message.streamId;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.sentAt !== 0) {
      obj.sentAt = Math.round(message.sentAt);
    }
    if (message.expiry !== 0) {
      obj.expiry = Math.round(message.expiry);
    }
    if (message.open !== undefined) {
      obj.open = StreamOpen.toJSON(message.open);
    }
    if (message.message !== undefined) {
      obj.message = StreamMessage.toJSON(message.message);
    }
    if (message.ack !== undefined) {
      obj.ack = StreamAck.toJSON(message.ack);
    }
    if (message.close !== undefined) {
      obj.close = StreamClose.toJSON(message.close);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Stream>, I>>(base?: I): Stream {
    return Stream.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Stream>, I>>(object: I): Stream {
    const message = createBaseStream();
    message.streamId = object.streamId ?? "";
    message.requestId = object.requestId ?? "";
    message.sentAt = object.sentAt ?? 0;
    message.expiry = object.expiry ?? 0;
    message.open = (object.open !== undefined && object.open !== null)
      ? StreamOpen.fromPartial(object.open)
      : undefined;
    message.message = (object.message !== undefined && object.message !== null)
      ? StreamMessage.fromPartial(object.message)
      : undefined;
    message.ack = (object.ack !== undefined && object.ack !== null) ? StreamAck.fromPartial(object.ack) : undefined;
    message.close = (object.close !== undefined && object.close !== null)
      ? StreamClose.fromPartial(object.close)
      : undefined;
    return message;
  },
};

function createBaseStreamOpen(): StreamOpen {
  return { nodeId: "", metadata: {} };
}

export const StreamOpen: MessageFns<StreamOpen> = {
  encode(message: StreamOpen, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nodeId !== "") {
      writer.uint32(10).string(message.nodeId);
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      StreamOpen_MetadataEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamOpen {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamOpen();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nodeId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = StreamOpen_MetadataEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.metadata[entry7.key] = entry7.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamOpen {
    return {
      nodeId: isSet(object.nodeId) ? globalThis.String(object.nodeId) : "",
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: StreamOpen): unknown {
    const obj: any = {};
    if (message.nodeId !== "") {
      obj.nodeId = message.nodeId;
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamOpen>, I>>(base?: I): StreamOpen {
    return StreamOpen.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamOpen>, I>>(object: I): StreamOpen {
    const message = createBaseStreamOpen();
    message.nodeId = object.nodeId ?? "";
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseStreamOpen_MetadataEntry(): StreamOpen_MetadataEntry {
  return { key: "", value: "" };
}

export const StreamOpen_MetadataEntry: MessageFns<StreamOpen_MetadataEntry> = {
  encode(message: StreamOpen_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamOpen_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamOpen_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamOpen_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: StreamOpen_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamOpen_MetadataEntry>, I>>(base?: I): StreamOpen_MetadataEntry {
    return StreamOpen_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamOpen_MetadataEntry>, I>>(object: I): StreamOpen_MetadataEntry {
    const message = createBaseStreamOpen_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseStreamMessage(): StreamMessage {
  return { message: undefined, rawMessage: Buffer.alloc(0) };
}

export const StreamMessage: MessageFns<StreamMessage> = {
  encode(message: StreamMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== undefined) {
      Any.encode(message.message, writer.uint32(10).fork()).join();
    }
    if (message.rawMessage.length !== 0) {
      writer.uint32(18).bytes(message.rawMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = Any.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rawMessage = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamMessage {
    return {
      message: isSet(object.message) ? Any.fromJSON(object.message) : undefined,
      rawMessage: isSet(object.rawMessage) ? Buffer.from(bytesFromBase64(object.rawMessage)) : Buffer.alloc(0),
    };
  },

  toJSON(message: StreamMessage): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = Any.toJSON(message.message);
    }
    if (message.rawMessage.length !== 0) {
      obj.rawMessage = base64FromBytes(message.rawMessage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamMessage>, I>>(base?: I): StreamMessage {
    return StreamMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamMessage>, I>>(object: I): StreamMessage {
    const message = createBaseStreamMessage();
    message.message = (object.message !== undefined && object.message !== null)
      ? Any.fromPartial(object.message)
      : undefined;
    message.rawMessage = object.rawMessage ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseStreamAck(): StreamAck {
  return {};
}

export const StreamAck: MessageFns<StreamAck> = {
  encode(_: StreamAck, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamAck {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamAck();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): StreamAck {
    return {};
  },

  toJSON(_: StreamAck): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamAck>, I>>(base?: I): StreamAck {
    return StreamAck.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamAck>, I>>(_: I): StreamAck {
    const message = createBaseStreamAck();
    return message;
  },
};

function createBaseStreamClose(): StreamClose {
  return { error: "", code: "" };
}

export const StreamClose: MessageFns<StreamClose> = {
  encode(message: StreamClose, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamClose {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamClose();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamClose {
    return {
      error: isSet(object.error) ? globalThis.String(object.error) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
    };
  },

  toJSON(message: StreamClose): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamClose>, I>>(base?: I): StreamClose {
    return StreamClose.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamClose>, I>>(object: I): StreamClose {
    const message = createBaseStreamClose();
    message.error = object.error ?? "";
    message.code = object.code ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
