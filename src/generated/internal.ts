// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: internal.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { FileDescriptorProto } from "ts-proto-descriptors";
import { Any, protoMetadata as protoMetadata1 } from "./google/protobuf/any";
import { messageTypeRegistry } from "./typeRegistry";

export const protobufPackage = "internal";

export interface Msg {
  $type: "internal.Msg";
  typeUrl: string;
  value: Buffer;
  channel: string;
}

export interface Channel {
  $type: "internal.Channel";
  channel: string;
}

export interface Request {
  $type: "internal.Request";
  requestId: string;
  clientId: string;
  sentAt: bigint;
  expiry: bigint;
  multi: boolean;
  request: Any | undefined;
  metadata: { [key: string]: string };
  rawRequest: Buffer;
}

export interface Request_MetadataEntry {
  $type: "internal.Request.MetadataEntry";
  key: string;
  value: string;
}

export interface Response {
  $type: "internal.Response";
  requestId: string;
  serverId: string;
  sentAt: bigint;
  response: Any | undefined;
  error: string;
  code: string;
  rawResponse: Buffer;
  errorDetails: Any[];
}

export interface ClaimRequest {
  $type: "internal.ClaimRequest";
  requestId: string;
  serverId: string;
  affinity: number;
}

export interface ClaimResponse {
  $type: "internal.ClaimResponse";
  requestId: string;
  serverId: string;
}

export interface Stream {
  $type: "internal.Stream";
  streamId: string;
  requestId: string;
  sentAt: bigint;
  expiry: bigint;
  open?: StreamOpen | undefined;
  message?: StreamMessage | undefined;
  ack?: StreamAck | undefined;
  close?: StreamClose | undefined;
}

export interface StreamOpen {
  $type: "internal.StreamOpen";
  nodeId: string;
  metadata: { [key: string]: string };
}

export interface StreamOpen_MetadataEntry {
  $type: "internal.StreamOpen.MetadataEntry";
  key: string;
  value: string;
}

export interface StreamMessage {
  $type: "internal.StreamMessage";
  message: Any | undefined;
  rawMessage: Buffer;
}

export interface StreamAck {
  $type: "internal.StreamAck";
}

export interface StreamClose {
  $type: "internal.StreamClose";
  error: string;
  code: string;
}

function createBaseMsg(): Msg {
  return { $type: "internal.Msg", typeUrl: "", value: Buffer.alloc(0), channel: "" };
}

export const Msg: MessageFns<Msg, "internal.Msg"> = {
  $type: "internal.Msg" as const,

  encode(message: Msg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.typeUrl !== "") {
      writer.uint32(10).string(message.typeUrl);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    if (message.channel !== "") {
      writer.uint32(26).string(message.channel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Msg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.typeUrl = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Buffer.from(reader.bytes());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.channel = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Msg {
    return {
      $type: Msg.$type,
      typeUrl: isSet(object.typeUrl) ? globalThis.String(object.typeUrl) : "",
      value: isSet(object.value) ? Buffer.from(bytesFromBase64(object.value)) : Buffer.alloc(0),
      channel: isSet(object.channel) ? globalThis.String(object.channel) : "",
    };
  },

  toJSON(message: Msg): unknown {
    const obj: any = {};
    if (message.typeUrl !== "") {
      obj.typeUrl = message.typeUrl;
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Msg>, I>>(base?: I): Msg {
    return Msg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Msg>, I>>(object: I): Msg {
    const message = createBaseMsg();
    message.typeUrl = object.typeUrl ?? "";
    message.value = object.value ?? Buffer.alloc(0);
    message.channel = object.channel ?? "";
    return message;
  },
};

messageTypeRegistry.set(Msg.$type, Msg);

function createBaseChannel(): Channel {
  return { $type: "internal.Channel", channel: "" };
}

export const Channel: MessageFns<Channel, "internal.Channel"> = {
  $type: "internal.Channel" as const,

  encode(message: Channel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.channel !== "") {
      writer.uint32(26).string(message.channel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Channel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.channel = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Channel {
    return { $type: Channel.$type, channel: isSet(object.channel) ? globalThis.String(object.channel) : "" };
  },

  toJSON(message: Channel): unknown {
    const obj: any = {};
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Channel>, I>>(base?: I): Channel {
    return Channel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Channel>, I>>(object: I): Channel {
    const message = createBaseChannel();
    message.channel = object.channel ?? "";
    return message;
  },
};

messageTypeRegistry.set(Channel.$type, Channel);

function createBaseRequest(): Request {
  return {
    $type: "internal.Request",
    requestId: "",
    clientId: "",
    sentAt: 0n,
    expiry: 0n,
    multi: false,
    request: undefined,
    metadata: {},
    rawRequest: Buffer.alloc(0),
  };
}

export const Request: MessageFns<Request, "internal.Request"> = {
  $type: "internal.Request" as const,

  encode(message: Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.sentAt !== 0n) {
      if (BigInt.asIntN(64, message.sentAt) !== message.sentAt) {
        throw new globalThis.Error("value provided for field message.sentAt of type int64 too large");
      }
      writer.uint32(24).int64(message.sentAt);
    }
    if (message.expiry !== 0n) {
      if (BigInt.asIntN(64, message.expiry) !== message.expiry) {
        throw new globalThis.Error("value provided for field message.expiry of type int64 too large");
      }
      writer.uint32(32).int64(message.expiry);
    }
    if (message.multi !== false) {
      writer.uint32(40).bool(message.multi);
    }
    if (message.request !== undefined) {
      Any.encode(message.request, writer.uint32(50).fork()).join();
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      Request_MetadataEntry.encode(
        { $type: "internal.Request.MetadataEntry", key: key as any, value },
        writer.uint32(58).fork(),
      ).join();
    });
    if (message.rawRequest.length !== 0) {
      writer.uint32(66).bytes(message.rawRequest);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sentAt = reader.int64() as bigint;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.expiry = reader.int64() as bigint;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.multi = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.request = Any.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = Request_MetadataEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.metadata[entry7.key] = entry7.value;
          }
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.rawRequest = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return {
      $type: Request.$type,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
      sentAt: isSet(object.sentAt) ? BigInt(object.sentAt) : 0n,
      expiry: isSet(object.expiry) ? BigInt(object.expiry) : 0n,
      multi: isSet(object.multi) ? globalThis.Boolean(object.multi) : false,
      request: isSet(object.request) ? Any.fromJSON(object.request) : undefined,
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      rawRequest: isSet(object.rawRequest) ? Buffer.from(bytesFromBase64(object.rawRequest)) : Buffer.alloc(0),
    };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.clientId !== "") {
      obj.clientId = message.clientId;
    }
    if (message.sentAt !== 0n) {
      obj.sentAt = message.sentAt.toString();
    }
    if (message.expiry !== 0n) {
      obj.expiry = message.expiry.toString();
    }
    if (message.multi !== false) {
      obj.multi = message.multi;
    }
    if (message.request !== undefined) {
      obj.request = Any.toJSON(message.request);
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    if (message.rawRequest.length !== 0) {
      obj.rawRequest = base64FromBytes(message.rawRequest);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request>, I>>(base?: I): Request {
    return Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request>, I>>(object: I): Request {
    const message = createBaseRequest();
    message.requestId = object.requestId ?? "";
    message.clientId = object.clientId ?? "";
    message.sentAt = object.sentAt ?? 0n;
    message.expiry = object.expiry ?? 0n;
    message.multi = object.multi ?? false;
    message.request = (object.request !== undefined && object.request !== null)
      ? Any.fromPartial(object.request)
      : undefined;
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.rawRequest = object.rawRequest ?? Buffer.alloc(0);
    return message;
  },
};

messageTypeRegistry.set(Request.$type, Request);

function createBaseRequest_MetadataEntry(): Request_MetadataEntry {
  return { $type: "internal.Request.MetadataEntry", key: "", value: "" };
}

export const Request_MetadataEntry: MessageFns<Request_MetadataEntry, "internal.Request.MetadataEntry"> = {
  $type: "internal.Request.MetadataEntry" as const,

  encode(message: Request_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Request_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request_MetadataEntry {
    return {
      $type: Request_MetadataEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Request_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request_MetadataEntry>, I>>(base?: I): Request_MetadataEntry {
    return Request_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request_MetadataEntry>, I>>(object: I): Request_MetadataEntry {
    const message = createBaseRequest_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(Request_MetadataEntry.$type, Request_MetadataEntry);

function createBaseResponse(): Response {
  return {
    $type: "internal.Response",
    requestId: "",
    serverId: "",
    sentAt: 0n,
    response: undefined,
    error: "",
    code: "",
    rawResponse: Buffer.alloc(0),
    errorDetails: [],
  };
}

export const Response: MessageFns<Response, "internal.Response"> = {
  $type: "internal.Response" as const,

  encode(message: Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.serverId !== "") {
      writer.uint32(18).string(message.serverId);
    }
    if (message.sentAt !== 0n) {
      if (BigInt.asIntN(64, message.sentAt) !== message.sentAt) {
        throw new globalThis.Error("value provided for field message.sentAt of type int64 too large");
      }
      writer.uint32(24).int64(message.sentAt);
    }
    if (message.response !== undefined) {
      Any.encode(message.response, writer.uint32(34).fork()).join();
    }
    if (message.error !== "") {
      writer.uint32(42).string(message.error);
    }
    if (message.code !== "") {
      writer.uint32(50).string(message.code);
    }
    if (message.rawResponse.length !== 0) {
      writer.uint32(58).bytes(message.rawResponse);
    }
    for (const v of message.errorDetails) {
      Any.encode(v!, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.serverId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sentAt = reader.int64() as bigint;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.response = Any.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.error = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.rawResponse = Buffer.from(reader.bytes());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.errorDetails.push(Any.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return {
      $type: Response.$type,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      serverId: isSet(object.serverId) ? globalThis.String(object.serverId) : "",
      sentAt: isSet(object.sentAt) ? BigInt(object.sentAt) : 0n,
      response: isSet(object.response) ? Any.fromJSON(object.response) : undefined,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      rawResponse: isSet(object.rawResponse) ? Buffer.from(bytesFromBase64(object.rawResponse)) : Buffer.alloc(0),
      errorDetails: globalThis.Array.isArray(object?.errorDetails)
        ? object.errorDetails.map((e: any) => Any.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.serverId !== "") {
      obj.serverId = message.serverId;
    }
    if (message.sentAt !== 0n) {
      obj.sentAt = message.sentAt.toString();
    }
    if (message.response !== undefined) {
      obj.response = Any.toJSON(message.response);
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.rawResponse.length !== 0) {
      obj.rawResponse = base64FromBytes(message.rawResponse);
    }
    if (message.errorDetails?.length) {
      obj.errorDetails = message.errorDetails.map((e) => Any.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.requestId = object.requestId ?? "";
    message.serverId = object.serverId ?? "";
    message.sentAt = object.sentAt ?? 0n;
    message.response = (object.response !== undefined && object.response !== null)
      ? Any.fromPartial(object.response)
      : undefined;
    message.error = object.error ?? "";
    message.code = object.code ?? "";
    message.rawResponse = object.rawResponse ?? Buffer.alloc(0);
    message.errorDetails = object.errorDetails?.map((e) => Any.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(Response.$type, Response);

function createBaseClaimRequest(): ClaimRequest {
  return { $type: "internal.ClaimRequest", requestId: "", serverId: "", affinity: 0 };
}

export const ClaimRequest: MessageFns<ClaimRequest, "internal.ClaimRequest"> = {
  $type: "internal.ClaimRequest" as const,

  encode(message: ClaimRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.serverId !== "") {
      writer.uint32(18).string(message.serverId);
    }
    if (message.affinity !== 0) {
      writer.uint32(29).float(message.affinity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClaimRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClaimRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.serverId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.affinity = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClaimRequest {
    return {
      $type: ClaimRequest.$type,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      serverId: isSet(object.serverId) ? globalThis.String(object.serverId) : "",
      affinity: isSet(object.affinity) ? globalThis.Number(object.affinity) : 0,
    };
  },

  toJSON(message: ClaimRequest): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.serverId !== "") {
      obj.serverId = message.serverId;
    }
    if (message.affinity !== 0) {
      obj.affinity = message.affinity;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClaimRequest>, I>>(base?: I): ClaimRequest {
    return ClaimRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClaimRequest>, I>>(object: I): ClaimRequest {
    const message = createBaseClaimRequest();
    message.requestId = object.requestId ?? "";
    message.serverId = object.serverId ?? "";
    message.affinity = object.affinity ?? 0;
    return message;
  },
};

messageTypeRegistry.set(ClaimRequest.$type, ClaimRequest);

function createBaseClaimResponse(): ClaimResponse {
  return { $type: "internal.ClaimResponse", requestId: "", serverId: "" };
}

export const ClaimResponse: MessageFns<ClaimResponse, "internal.ClaimResponse"> = {
  $type: "internal.ClaimResponse" as const,

  encode(message: ClaimResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.serverId !== "") {
      writer.uint32(18).string(message.serverId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClaimResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClaimResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.serverId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClaimResponse {
    return {
      $type: ClaimResponse.$type,
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      serverId: isSet(object.serverId) ? globalThis.String(object.serverId) : "",
    };
  },

  toJSON(message: ClaimResponse): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.serverId !== "") {
      obj.serverId = message.serverId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClaimResponse>, I>>(base?: I): ClaimResponse {
    return ClaimResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClaimResponse>, I>>(object: I): ClaimResponse {
    const message = createBaseClaimResponse();
    message.requestId = object.requestId ?? "";
    message.serverId = object.serverId ?? "";
    return message;
  },
};

messageTypeRegistry.set(ClaimResponse.$type, ClaimResponse);

function createBaseStream(): Stream {
  return {
    $type: "internal.Stream",
    streamId: "",
    requestId: "",
    sentAt: 0n,
    expiry: 0n,
    open: undefined,
    message: undefined,
    ack: undefined,
    close: undefined,
  };
}

export const Stream: MessageFns<Stream, "internal.Stream"> = {
  $type: "internal.Stream" as const,

  encode(message: Stream, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.streamId !== "") {
      writer.uint32(10).string(message.streamId);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.sentAt !== 0n) {
      if (BigInt.asIntN(64, message.sentAt) !== message.sentAt) {
        throw new globalThis.Error("value provided for field message.sentAt of type int64 too large");
      }
      writer.uint32(24).int64(message.sentAt);
    }
    if (message.expiry !== 0n) {
      if (BigInt.asIntN(64, message.expiry) !== message.expiry) {
        throw new globalThis.Error("value provided for field message.expiry of type int64 too large");
      }
      writer.uint32(32).int64(message.expiry);
    }
    if (message.open !== undefined) {
      StreamOpen.encode(message.open, writer.uint32(50).fork()).join();
    }
    if (message.message !== undefined) {
      StreamMessage.encode(message.message, writer.uint32(58).fork()).join();
    }
    if (message.ack !== undefined) {
      StreamAck.encode(message.ack, writer.uint32(66).fork()).join();
    }
    if (message.close !== undefined) {
      StreamClose.encode(message.close, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Stream {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStream();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.streamId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sentAt = reader.int64() as bigint;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.expiry = reader.int64() as bigint;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.open = StreamOpen.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.message = StreamMessage.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.ack = StreamAck.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.close = StreamClose.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Stream {
    return {
      $type: Stream.$type,
      streamId: isSet(object.streamId) ? globalThis.String(object.streamId) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      sentAt: isSet(object.sentAt) ? BigInt(object.sentAt) : 0n,
      expiry: isSet(object.expiry) ? BigInt(object.expiry) : 0n,
      open: isSet(object.open) ? StreamOpen.fromJSON(object.open) : undefined,
      message: isSet(object.message) ? StreamMessage.fromJSON(object.message) : undefined,
      ack: isSet(object.ack) ? StreamAck.fromJSON(object.ack) : undefined,
      close: isSet(object.close) ? StreamClose.fromJSON(object.close) : undefined,
    };
  },

  toJSON(message: Stream): unknown {
    const obj: any = {};
    if (message.streamId !== "") {
      obj.streamId = message.streamId;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.sentAt !== 0n) {
      obj.sentAt = message.sentAt.toString();
    }
    if (message.expiry !== 0n) {
      obj.expiry = message.expiry.toString();
    }
    if (message.open !== undefined) {
      obj.open = StreamOpen.toJSON(message.open);
    }
    if (message.message !== undefined) {
      obj.message = StreamMessage.toJSON(message.message);
    }
    if (message.ack !== undefined) {
      obj.ack = StreamAck.toJSON(message.ack);
    }
    if (message.close !== undefined) {
      obj.close = StreamClose.toJSON(message.close);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Stream>, I>>(base?: I): Stream {
    return Stream.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Stream>, I>>(object: I): Stream {
    const message = createBaseStream();
    message.streamId = object.streamId ?? "";
    message.requestId = object.requestId ?? "";
    message.sentAt = object.sentAt ?? 0n;
    message.expiry = object.expiry ?? 0n;
    message.open = (object.open !== undefined && object.open !== null)
      ? StreamOpen.fromPartial(object.open)
      : undefined;
    message.message = (object.message !== undefined && object.message !== null)
      ? StreamMessage.fromPartial(object.message)
      : undefined;
    message.ack = (object.ack !== undefined && object.ack !== null) ? StreamAck.fromPartial(object.ack) : undefined;
    message.close = (object.close !== undefined && object.close !== null)
      ? StreamClose.fromPartial(object.close)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Stream.$type, Stream);

function createBaseStreamOpen(): StreamOpen {
  return { $type: "internal.StreamOpen", nodeId: "", metadata: {} };
}

export const StreamOpen: MessageFns<StreamOpen, "internal.StreamOpen"> = {
  $type: "internal.StreamOpen" as const,

  encode(message: StreamOpen, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nodeId !== "") {
      writer.uint32(10).string(message.nodeId);
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      StreamOpen_MetadataEntry.encode(
        { $type: "internal.StreamOpen.MetadataEntry", key: key as any, value },
        writer.uint32(58).fork(),
      ).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamOpen {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamOpen();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nodeId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = StreamOpen_MetadataEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.metadata[entry7.key] = entry7.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamOpen {
    return {
      $type: StreamOpen.$type,
      nodeId: isSet(object.nodeId) ? globalThis.String(object.nodeId) : "",
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: StreamOpen): unknown {
    const obj: any = {};
    if (message.nodeId !== "") {
      obj.nodeId = message.nodeId;
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamOpen>, I>>(base?: I): StreamOpen {
    return StreamOpen.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamOpen>, I>>(object: I): StreamOpen {
    const message = createBaseStreamOpen();
    message.nodeId = object.nodeId ?? "";
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

messageTypeRegistry.set(StreamOpen.$type, StreamOpen);

function createBaseStreamOpen_MetadataEntry(): StreamOpen_MetadataEntry {
  return { $type: "internal.StreamOpen.MetadataEntry", key: "", value: "" };
}

export const StreamOpen_MetadataEntry: MessageFns<StreamOpen_MetadataEntry, "internal.StreamOpen.MetadataEntry"> = {
  $type: "internal.StreamOpen.MetadataEntry" as const,

  encode(message: StreamOpen_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamOpen_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamOpen_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamOpen_MetadataEntry {
    return {
      $type: StreamOpen_MetadataEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: StreamOpen_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamOpen_MetadataEntry>, I>>(base?: I): StreamOpen_MetadataEntry {
    return StreamOpen_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamOpen_MetadataEntry>, I>>(object: I): StreamOpen_MetadataEntry {
    const message = createBaseStreamOpen_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(StreamOpen_MetadataEntry.$type, StreamOpen_MetadataEntry);

function createBaseStreamMessage(): StreamMessage {
  return { $type: "internal.StreamMessage", message: undefined, rawMessage: Buffer.alloc(0) };
}

export const StreamMessage: MessageFns<StreamMessage, "internal.StreamMessage"> = {
  $type: "internal.StreamMessage" as const,

  encode(message: StreamMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== undefined) {
      Any.encode(message.message, writer.uint32(10).fork()).join();
    }
    if (message.rawMessage.length !== 0) {
      writer.uint32(18).bytes(message.rawMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = Any.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rawMessage = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamMessage {
    return {
      $type: StreamMessage.$type,
      message: isSet(object.message) ? Any.fromJSON(object.message) : undefined,
      rawMessage: isSet(object.rawMessage) ? Buffer.from(bytesFromBase64(object.rawMessage)) : Buffer.alloc(0),
    };
  },

  toJSON(message: StreamMessage): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = Any.toJSON(message.message);
    }
    if (message.rawMessage.length !== 0) {
      obj.rawMessage = base64FromBytes(message.rawMessage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamMessage>, I>>(base?: I): StreamMessage {
    return StreamMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamMessage>, I>>(object: I): StreamMessage {
    const message = createBaseStreamMessage();
    message.message = (object.message !== undefined && object.message !== null)
      ? Any.fromPartial(object.message)
      : undefined;
    message.rawMessage = object.rawMessage ?? Buffer.alloc(0);
    return message;
  },
};

messageTypeRegistry.set(StreamMessage.$type, StreamMessage);

function createBaseStreamAck(): StreamAck {
  return { $type: "internal.StreamAck" };
}

export const StreamAck: MessageFns<StreamAck, "internal.StreamAck"> = {
  $type: "internal.StreamAck" as const,

  encode(_: StreamAck, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamAck {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamAck();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): StreamAck {
    return { $type: StreamAck.$type };
  },

  toJSON(_: StreamAck): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamAck>, I>>(base?: I): StreamAck {
    return StreamAck.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamAck>, I>>(_: I): StreamAck {
    const message = createBaseStreamAck();
    return message;
  },
};

messageTypeRegistry.set(StreamAck.$type, StreamAck);

function createBaseStreamClose(): StreamClose {
  return { $type: "internal.StreamClose", error: "", code: "" };
}

export const StreamClose: MessageFns<StreamClose, "internal.StreamClose"> = {
  $type: "internal.StreamClose" as const,

  encode(message: StreamClose, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.error !== "") {
      writer.uint32(10).string(message.error);
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamClose {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamClose();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.error = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamClose {
    return {
      $type: StreamClose.$type,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
    };
  },

  toJSON(message: StreamClose): unknown {
    const obj: any = {};
    if (message.error !== "") {
      obj.error = message.error;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamClose>, I>>(base?: I): StreamClose {
    return StreamClose.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamClose>, I>>(object: I): StreamClose {
    const message = createBaseStreamClose();
    message.error = object.error ?? "";
    message.code = object.code ?? "";
    return message;
  },
};

messageTypeRegistry.set(StreamClose.$type, StreamClose);

type ProtoMetaMessageOptions = {
  options?: { [key: string]: any };
  fields?: { [key: string]: { [key: string]: any } };
  oneof?: { [key: string]: { [key: string]: any } };
  nested?: { [key: string]: ProtoMetaMessageOptions };
};

export interface ProtoMetadata {
  fileDescriptor: FileDescriptorProto;
  references: { [key: string]: any };
  dependencies?: ProtoMetadata[];
  options?: {
    options?: { [key: string]: any };
    services?: {
      [key: string]: { options?: { [key: string]: any }; methods?: { [key: string]: { [key: string]: any } } };
    };
    messages?: { [key: string]: ProtoMetaMessageOptions };
    enums?: { [key: string]: { options?: { [key: string]: any }; values?: { [key: string]: { [key: string]: any } } } };
  };
}

export const protoMetadata = {
  fileDescriptor: {
    "name": "internal.proto",
    "package": "internal",
    "dependency": ["google/protobuf/any.proto"],
    "publicDependency": [],
    "weakDependency": [],
    "messageType": [{
      "name": "Msg",
      "field": [{
        "name": "type_url",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "typeUrl",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "value",
        "number": 2,
        "label": 1,
        "type": 12,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "value",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "channel",
        "number": 3,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "channel",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "Channel",
      "field": [{
        "name": "channel",
        "number": 3,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "channel",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "Request",
      "field": [{
        "name": "request_id",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "requestId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "client_id",
        "number": 2,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "clientId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "sent_at",
        "number": 3,
        "label": 1,
        "type": 3,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "sentAt",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "expiry",
        "number": 4,
        "label": 1,
        "type": 3,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "expiry",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "multi",
        "number": 5,
        "label": 1,
        "type": 8,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "multi",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "request",
        "number": 6,
        "label": 1,
        "type": 11,
        "typeName": ".google.protobuf.Any",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "request",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "metadata",
        "number": 7,
        "label": 3,
        "type": 11,
        "typeName": ".internal.Request.MetadataEntry",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "metadata",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "raw_request",
        "number": 8,
        "label": 1,
        "type": 12,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "rawRequest",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [{
        "name": "MetadataEntry",
        "field": [{
          "name": "key",
          "number": 1,
          "label": 1,
          "type": 9,
          "typeName": "",
          "extendee": "",
          "defaultValue": "",
          "oneofIndex": 0,
          "jsonName": "key",
          "options": undefined,
          "proto3Optional": false,
        }, {
          "name": "value",
          "number": 2,
          "label": 1,
          "type": 9,
          "typeName": "",
          "extendee": "",
          "defaultValue": "",
          "oneofIndex": 0,
          "jsonName": "value",
          "options": undefined,
          "proto3Optional": false,
        }],
        "extension": [],
        "nestedType": [],
        "enumType": [],
        "extensionRange": [],
        "oneofDecl": [],
        "options": {
          "messageSetWireFormat": false,
          "noStandardDescriptorAccessor": false,
          "deprecated": false,
          "mapEntry": true,
          "uninterpretedOption": [],
        },
        "reservedRange": [],
        "reservedName": [],
      }],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "Response",
      "field": [{
        "name": "request_id",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "requestId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "server_id",
        "number": 2,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "serverId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "sent_at",
        "number": 3,
        "label": 1,
        "type": 3,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "sentAt",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "response",
        "number": 4,
        "label": 1,
        "type": 11,
        "typeName": ".google.protobuf.Any",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "response",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "error",
        "number": 5,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "error",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "code",
        "number": 6,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "code",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "raw_response",
        "number": 7,
        "label": 1,
        "type": 12,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "rawResponse",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "error_details",
        "number": 8,
        "label": 3,
        "type": 11,
        "typeName": ".google.protobuf.Any",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "errorDetails",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "ClaimRequest",
      "field": [{
        "name": "request_id",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "requestId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "server_id",
        "number": 2,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "serverId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "affinity",
        "number": 3,
        "label": 1,
        "type": 2,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "affinity",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "ClaimResponse",
      "field": [{
        "name": "request_id",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "requestId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "server_id",
        "number": 2,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "serverId",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "Stream",
      "field": [{
        "name": "stream_id",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "streamId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "request_id",
        "number": 2,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "requestId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "sent_at",
        "number": 3,
        "label": 1,
        "type": 3,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "sentAt",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "expiry",
        "number": 4,
        "label": 1,
        "type": 3,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "expiry",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "open",
        "number": 6,
        "label": 1,
        "type": 11,
        "typeName": ".internal.StreamOpen",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "open",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "message",
        "number": 7,
        "label": 1,
        "type": 11,
        "typeName": ".internal.StreamMessage",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "message",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "ack",
        "number": 8,
        "label": 1,
        "type": 11,
        "typeName": ".internal.StreamAck",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "ack",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "close",
        "number": 9,
        "label": 1,
        "type": 11,
        "typeName": ".internal.StreamClose",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "close",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [{ "name": "body", "options": undefined }],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "StreamOpen",
      "field": [{
        "name": "node_id",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "nodeId",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "metadata",
        "number": 7,
        "label": 3,
        "type": 11,
        "typeName": ".internal.StreamOpen.MetadataEntry",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "metadata",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [{
        "name": "MetadataEntry",
        "field": [{
          "name": "key",
          "number": 1,
          "label": 1,
          "type": 9,
          "typeName": "",
          "extendee": "",
          "defaultValue": "",
          "oneofIndex": 0,
          "jsonName": "key",
          "options": undefined,
          "proto3Optional": false,
        }, {
          "name": "value",
          "number": 2,
          "label": 1,
          "type": 9,
          "typeName": "",
          "extendee": "",
          "defaultValue": "",
          "oneofIndex": 0,
          "jsonName": "value",
          "options": undefined,
          "proto3Optional": false,
        }],
        "extension": [],
        "nestedType": [],
        "enumType": [],
        "extensionRange": [],
        "oneofDecl": [],
        "options": {
          "messageSetWireFormat": false,
          "noStandardDescriptorAccessor": false,
          "deprecated": false,
          "mapEntry": true,
          "uninterpretedOption": [],
        },
        "reservedRange": [],
        "reservedName": [],
      }],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "StreamMessage",
      "field": [{
        "name": "message",
        "number": 1,
        "label": 1,
        "type": 11,
        "typeName": ".google.protobuf.Any",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "message",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "raw_message",
        "number": 2,
        "label": 1,
        "type": 12,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "rawMessage",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "StreamAck",
      "field": [],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }, {
      "name": "StreamClose",
      "field": [{
        "name": "error",
        "number": 1,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "error",
        "options": undefined,
        "proto3Optional": false,
      }, {
        "name": "code",
        "number": 2,
        "label": 1,
        "type": 9,
        "typeName": "",
        "extendee": "",
        "defaultValue": "",
        "oneofIndex": 0,
        "jsonName": "code",
        "options": undefined,
        "proto3Optional": false,
      }],
      "extension": [],
      "nestedType": [],
      "enumType": [],
      "extensionRange": [],
      "oneofDecl": [],
      "options": undefined,
      "reservedRange": [],
      "reservedName": [],
    }],
    "enumType": [],
    "service": [],
    "extension": [],
    "options": {
      "javaPackage": "",
      "javaOuterClassname": "",
      "javaMultipleFiles": false,
      "javaGenerateEqualsAndHash": false,
      "javaStringCheckUtf8": false,
      "optimizeFor": 1,
      "goPackage": "github.com/livekit/psrpc/internal",
      "ccGenericServices": false,
      "javaGenericServices": false,
      "pyGenericServices": false,
      "phpGenericServices": false,
      "deprecated": false,
      "ccEnableArenas": true,
      "objcClassPrefix": "",
      "csharpNamespace": "",
      "swiftPrefix": "",
      "phpClassPrefix": "",
      "phpNamespace": "",
      "phpMetadataNamespace": "",
      "rubyPackage": "",
      "uninterpretedOption": [],
    },
    "sourceCodeInfo": { "location": [] },
    "syntax": "proto3",
  },
  references: {
    ".internal.Msg": Msg,
    ".internal.Channel": Channel,
    ".internal.Request": Request,
    ".internal.Request.MetadataEntry": Request_MetadataEntry,
    ".internal.Response": Response,
    ".internal.ClaimRequest": ClaimRequest,
    ".internal.ClaimResponse": ClaimResponse,
    ".internal.Stream": Stream,
    ".internal.StreamOpen": StreamOpen,
    ".internal.StreamOpen.MetadataEntry": StreamOpen_MetadataEntry,
    ".internal.StreamMessage": StreamMessage,
    ".internal.StreamAck": StreamAck,
    ".internal.StreamClose": StreamClose,
  },
  dependencies: [protoMetadata1],
} as const satisfies ProtoMetadata;

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
